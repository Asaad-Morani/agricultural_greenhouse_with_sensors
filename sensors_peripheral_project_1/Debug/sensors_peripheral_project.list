
sensors_peripheral_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e4  0800d0e4  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e4  0800d0e4  0001d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0ec  0800d0ec  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0f0  0800d0f0  0001d0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0800d16c  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0800d20c  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000e74  200001b8  0800d2ac  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000102c  0800d2ac  0002102c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001f06f  00000000  00000000  0002022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003f62  00000000  00000000  0003f29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001948  00000000  00000000  00043200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000013af  00000000  00000000  00044b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b744  00000000  00000000  00045ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001fd0f  00000000  00000000  0007163b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001040ba  00000000  00000000  0009134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000075b8  00000000  00000000  00195404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  0019c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800afac 	.word	0x0800afac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800afac 	.word	0x0800afac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b970 	b.w	8000d94 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4694      	mov	ip, r2
 8000ae0:	d965      	bls.n	8000bae <__udivmoddi4+0xe2>
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	b143      	cbz	r3, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aec:	f1c3 0220 	rsb	r2, r3, #32
 8000af0:	409f      	lsls	r7, r3
 8000af2:	fa20 f202 	lsr.w	r2, r0, r2
 8000af6:	4317      	orrs	r7, r2
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afe:	fa1f f58c 	uxth.w	r5, ip
 8000b02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b06:	0c22      	lsrs	r2, r4, #16
 8000b08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b10:	fb01 f005 	mul.w	r0, r1, r5
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b18:	eb1c 0202 	adds.w	r2, ip, r2
 8000b1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b20:	f080 811c 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b24:	4290      	cmp	r0, r2
 8000b26:	f240 8119 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b3e:	fb00 f505 	mul.w	r5, r0, r5
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x90>
 8000b46:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8107 	bcs.w	8000d60 <__udivmoddi4+0x294>
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	f240 8104 	bls.w	8000d60 <__udivmoddi4+0x294>
 8000b58:	4464      	add	r4, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11e      	cbz	r6, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0xbc>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80ed 	beq.w	8000d56 <__udivmoddi4+0x28a>
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b82:	4608      	mov	r0, r1
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	fab3 f183 	clz	r1, r3
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d149      	bne.n	8000c24 <__udivmoddi4+0x158>
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	d302      	bcc.n	8000b9a <__udivmoddi4+0xce>
 8000b94:	4282      	cmp	r2, r0
 8000b96:	f200 80f8 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000b9a:	1a84      	subs	r4, r0, r2
 8000b9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d0e2      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bac:	e7df      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000bae:	b902      	cbnz	r2, 8000bb2 <__udivmoddi4+0xe6>
 8000bb0:	deff      	udf	#255	; 0xff
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd0:	0c22      	lsrs	r2, r4, #16
 8000bd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bd6:	fb0e f005 	mul.w	r0, lr, r5
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000bde:	eb1c 0202 	adds.w	r2, ip, r2
 8000be2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2b8>
 8000bee:	4645      	mov	r5, r8
 8000bf0:	1a12      	subs	r2, r2, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x14e>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x14c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2c2>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c22:	e79f      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c24:	f1c1 0720 	rsb	r7, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa05 f401 	lsl.w	r4, r5, r1
 8000c36:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3a:	40fd      	lsrs	r5, r7
 8000c3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c40:	4323      	orrs	r3, r4
 8000c42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c4e:	0c1c      	lsrs	r4, r3, #16
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	fb08 f50e 	mul.w	r5, r8, lr
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2b4>
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2b4>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4464      	add	r4, ip
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	b29d      	uxth	r5, r3
 8000c80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c84:	fb09 4413 	mls	r4, r9, r3, r4
 8000c88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2ac>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2ac>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000caa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	42ac      	cmp	r4, r5
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46ae      	mov	lr, r5
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x29c>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x298>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x208>
 8000cbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40ca      	lsrs	r2, r1
 8000ccc:	40cc      	lsrs	r4, r1
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	f1c3 0120 	rsb	r1, r3, #32
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cec:	409d      	lsls	r5, r3
 8000cee:	432a      	orrs	r2, r5
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d06:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x258>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d1c:	428d      	cmp	r5, r1
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1b49      	subs	r1, r1, r5
 8000d26:	b292      	uxth	r2, r2
 8000d28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	fb05 f10e 	mul.w	r1, r5, lr
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x282>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000d46:	4291      	cmp	r1, r2
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000d4a:	3d02      	subs	r5, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a52      	subs	r2, r2, r1
 8000d50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0xfc>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e6e6      	b.n	8000b2e <__udivmoddi4+0x62>
 8000d60:	4610      	mov	r0, r2
 8000d62:	e6fb      	b.n	8000b5c <__udivmoddi4+0x90>
 8000d64:	4548      	cmp	r0, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d74:	4645      	mov	r5, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d78:	462b      	mov	r3, r5
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x258>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d84:	3d02      	subs	r5, #2
 8000d86:	4462      	add	r2, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e70a      	b.n	8000ba4 <__udivmoddi4+0xd8>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x14e>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	b087      	sub	sp, #28
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t buffer_size = 10;
 8000da0:	230a      	movs	r3, #10
 8000da2:	82fb      	strh	r3, [r7, #22]
	uint32_t memory_buffer_adc1[buffer_size];
 8000da4:	8afe      	ldrh	r6, [r7, #22]
 8000da6:	4633      	mov	r3, r6
 8000da8:	3b01      	subs	r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	b2b3      	uxth	r3, r6
 8000dae:	2200      	movs	r2, #0
 8000db0:	469a      	mov	sl, r3
 8000db2:	4693      	mov	fp, r2
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000dc0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000dc4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000dc8:	b2b3      	uxth	r3, r6
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4698      	mov	r8, r3
 8000dce:	4691      	mov	r9, r2
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ddc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000de0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000de4:	4633      	mov	r3, r6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	3307      	adds	r3, #7
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	ebad 0d03 	sub.w	sp, sp, r3
 8000df2:	466b      	mov	r3, sp
 8000df4:	3303      	adds	r3, #3
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
	uint32_t memory_buffer_him3[buffer_size];
 8000dfc:	8afe      	ldrh	r6, [r7, #22]
 8000dfe:	4633      	mov	r3, r6
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	b2b3      	uxth	r3, r6
 8000e06:	2200      	movs	r2, #0
 8000e08:	461c      	mov	r4, r3
 8000e0a:	4615      	mov	r5, r2
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	016b      	lsls	r3, r5, #5
 8000e16:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e1a:	0162      	lsls	r2, r4, #5
 8000e1c:	b2b3      	uxth	r3, r6
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	4611      	mov	r1, r2
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	014b      	lsls	r3, r1, #5
 8000e2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e32:	0142      	lsls	r2, r0, #5
 8000e34:	4633      	mov	r3, r6
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3307      	adds	r3, #7
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e42:	466b      	mov	r3, sp
 8000e44:	3303      	adds	r3, #3
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f001 fb49 	bl	80024e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f836 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fb08 	bl	8001468 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 fad4 	bl	8001404 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e5c:	f000 fa74 	bl	8001348 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e60:	f000 faa2 	bl	80013a8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000e64:	f000 f894 	bl	8000f90 <MX_ADC1_Init>
  MX_UART7_Init();
 8000e68:	f000 fa3e 	bl	80012e8 <MX_UART7_Init>
  MX_I2C1_Init();
 8000e6c:	f000 f930 	bl	80010d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e70:	f000 f96e 	bl	8001150 <MX_TIM1_Init>
  MX_ETH_Init();
 8000e74:	f000 f8de 	bl	8001034 <MX_ETH_Init>
  MX_TIM3_Init();
 8000e78:	f000 f9be 	bl	80011f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, memory_buffer_adc1, buffer_size);
 8000e7c:	8afb      	ldrh	r3, [r7, #22]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <main+0x118>)
 8000e84:	f001 fc7e 	bl	8002784 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <main+0x11c>)
 8000e8a:	f005 ff7d 	bl	8006d88 <HAL_TIM_Base_Start>

  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, memory_buffer_him3, buffer_size);
 8000e8e:	8afb      	ldrh	r3, [r7, #22]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	2104      	movs	r1, #4
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <main+0x120>)
 8000e96:	f006 f849 	bl	8006f2c <HAL_TIM_PWM_Start_DMA>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <main+0x124>)
 8000ea2:	f003 fa7b 	bl	800439c <HAL_GPIO_WritePin>
  SSD1306_Init();
 8000ea6:	f000 fbd7 	bl	8001658 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_inner_system();
 8000eaa:	f008 fd91 	bl	80099d0 <main_inner_system>
 8000eae:	e7fc      	b.n	8000eaa <main+0x112>
 8000eb0:	2000020c 	.word	0x2000020c
 8000eb4:	200003b8 	.word	0x200003b8
 8000eb8:	20000404 	.word	0x20000404
 8000ebc:	40021400 	.word	0x40021400

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	; 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f009 f893 	bl	8009ffa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ee4:	f004 fe2e 	bl	8005b44 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <SystemClock_Config+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <SystemClock_Config+0xc8>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f34:	2348      	movs	r3, #72	; 0x48
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fe0d 	bl	8005b64 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f50:	f000 fb7c 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 f89b 	bl	80060ac <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f7c:	f000 fb66 	bl	800164c <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	; 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <MX_ADC1_Init+0x9c>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <MX_ADC1_Init+0xa0>)
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ADC1_Init+0x98>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_ADC1_Init+0x98>)
 8000ff0:	f001 faf8 	bl	80025e4 <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 fb27 	bl	800164c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffe:	2309      	movs	r3, #9
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001002:	2301      	movs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_ADC1_Init+0x98>)
 8001010:	f001 fcde 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800101a:	f000 fb17 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000020c 	.word	0x2000020c
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ETH_Init+0x84>)
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <MX_ETH_Init+0x88>)
 800103c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <MX_ETH_Init+0x8c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_ETH_Init+0x8c>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_ETH_Init+0x8c>)
 800104c:	22e1      	movs	r2, #225	; 0xe1
 800104e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_ETH_Init+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_ETH_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_ETH_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_ETH_Init+0x84>)
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_ETH_Init+0x8c>)
 8001066:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_ETH_Init+0x84>)
 800106a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800106e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ETH_Init+0x84>)
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <MX_ETH_Init+0x90>)
 8001074:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_ETH_Init+0x84>)
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <MX_ETH_Init+0x94>)
 800107a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_ETH_Init+0x84>)
 800107e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001082:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ETH_Init+0x84>)
 8001086:	f002 fc9f 	bl	80039c8 <HAL_ETH_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001090:	f000 fadc 	bl	800164c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001094:	2238      	movs	r2, #56	; 0x38
 8001096:	2100      	movs	r1, #0
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <MX_ETH_Init+0x98>)
 800109a:	f008 ffae 	bl	8009ffa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_ETH_Init+0x98>)
 80010a0:	2221      	movs	r2, #33	; 0x21
 80010a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_ETH_Init+0x98>)
 80010a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_ETH_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002b4 	.word	0x200002b4
 80010bc:	40028000 	.word	0x40028000
 80010c0:	20000ac8 	.word	0x20000ac8
 80010c4:	20000118 	.word	0x20000118
 80010c8:	20000078 	.word	0x20000078
 80010cc:	200001d4 	.word	0x200001d4

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f003 f960 	bl	80043d0 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f000 fa99 	bl	800164c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f004 fb31 	bl	8005784 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 fa90 	bl	800164c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f004 fb73 	bl	800581a <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fa87 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000364 	.word	0x20000364
 8001148:	40005400 	.word	0x40005400
 800114c:	00301739 	.word	0x00301739

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_TIM1_Init+0xa0>)
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_TIM1_Init+0xa4>)
 8001172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM1_Init+0xa0>)
 8001176:	2247      	movs	r2, #71	; 0x47
 8001178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM1_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM1_Init+0xa0>)
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM1_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM1_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM1_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <MX_TIM1_Init+0xa0>)
 800119c:	f005 fd9c 	bl	8006cd8 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011a6:	f000 fa51 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MX_TIM1_Init+0xa0>)
 80011b8:	f006 f9e0 	bl	800757c <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011c2:	f000 fa43 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_TIM1_Init+0xa0>)
 80011d8:	f006 ff48 	bl	800806c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 fa33 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200003b8 	.word	0x200003b8
 80011f4:	40010000 	.word	0x40010000

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <MX_TIM3_Init+0xe8>)
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <MX_TIM3_Init+0xec>)
 800122e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001232:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_TIM3_Init+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001240:	f242 720f 	movw	r2, #9999	; 0x270f
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_TIM3_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001252:	4823      	ldr	r0, [pc, #140]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001254:	f005 fd40 	bl	8006cd8 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f9f5 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126c:	4619      	mov	r1, r3
 800126e:	481c      	ldr	r0, [pc, #112]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001270:	f006 f984 	bl	800757c <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800127a:	f000 f9e7 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127e:	4818      	ldr	r0, [pc, #96]	; (80012e0 <MX_TIM3_Init+0xe8>)
 8001280:	f005 fdf2 	bl	8006e68 <HAL_TIM_PWM_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800128a:	f000 f9df 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <MX_TIM3_Init+0xe8>)
 800129e:	f006 fee5 	bl	800806c <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80012a8:	f000 f9d0 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ac:	2360      	movs	r3, #96	; 0x60
 80012ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2204      	movs	r2, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM3_Init+0xe8>)
 80012c4:	f006 f846 	bl	8007354 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80012ce:	f000 f9bd 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM3_Init+0xe8>)
 80012d4:	f000 fea4 	bl	8002020 <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3738      	adds	r7, #56	; 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000404 	.word	0x20000404
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_UART7_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <MX_UART7_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_UART7_Init+0x58>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_UART7_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_UART7_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_UART7_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_UART7_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_UART7_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_UART7_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_UART7_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_UART7_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_UART7_Init+0x58>)
 800132c:	f006 ff2c 	bl	8008188 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f989 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200004b0 	.word	0x200004b0
 8001344:	40007800 	.word	0x40007800

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MX_USART3_UART_Init+0x5c>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800138c:	f006 fefc 	bl	8008188 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 f959 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000538 	.word	0x20000538
 80013a4:	40004800 	.word	0x40004800

080013a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b6:	2206      	movs	r2, #6
 80013b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013bc:	2202      	movs	r2, #2
 80013be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ec:	f004 fa61 	bl	80058b2 <HAL_PCD_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013f6:	f000 f929 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200005c0 	.word	0x200005c0

08001404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_DMA_Init+0x60>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <MX_DMA_Init+0x60>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_DMA_Init+0x60>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_DMA_Init+0x60>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <MX_DMA_Init+0x60>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_DMA_Init+0x60>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2010      	movs	r0, #16
 8001440:	f001 fe73 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001444:	2010      	movs	r0, #16
 8001446:	f001 fe8c 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	203c      	movs	r0, #60	; 0x3c
 8001450:	f001 fe6b 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001454:	203c      	movs	r0, #60	; 0x3c
 8001456:	f001 fe84 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <MX_GPIO_Init+0x1cc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a66      	ldr	r2, [pc, #408]	; (8001634 <MX_GPIO_Init+0x1cc>)
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b64      	ldr	r3, [pc, #400]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a60      	ldr	r2, [pc, #384]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b55      	ldr	r3, [pc, #340]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a54      	ldr	r2, [pc, #336]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b52      	ldr	r3, [pc, #328]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f6:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <MX_GPIO_Init+0x1cc>)
 80014fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a48      	ldr	r2, [pc, #288]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <MX_GPIO_Init+0x1cc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a42      	ldr	r2, [pc, #264]	; (8001634 <MX_GPIO_Init+0x1cc>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b40      	ldr	r3, [pc, #256]	; (8001634 <MX_GPIO_Init+0x1cc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|triger_output_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f241 0104 	movw	r1, #4100	; 0x1004
 8001544:	483c      	ldr	r0, [pc, #240]	; (8001638 <MX_GPIO_Init+0x1d0>)
 8001546:	f002 ff29 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001550:	483a      	ldr	r0, [pc, #232]	; (800163c <MX_GPIO_Init+0x1d4>)
 8001552:	f002 ff23 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2141      	movs	r1, #65	; 0x41
 800155a:	4839      	ldr	r0, [pc, #228]	; (8001640 <MX_GPIO_Init+0x1d8>)
 800155c:	f002 ff1e 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2103      	movs	r1, #3
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <MX_GPIO_Init+0x1dc>)
 8001566:	f002 ff19 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4831      	ldr	r0, [pc, #196]	; (8001648 <MX_GPIO_Init+0x1e0>)
 8001582:	f002 fd47 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 triger_output_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|triger_output_Pin;
 8001586:	f241 0304 	movw	r3, #4100	; 0x1004
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_GPIO_Init+0x1d0>)
 80015a0:	f002 fd38 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	481f      	ldr	r0, [pc, #124]	; (800163c <MX_GPIO_Init+0x1d4>)
 80015be:	f002 fd29 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 80015c2:	2341      	movs	r3, #65	; 0x41
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <MX_GPIO_Init+0x1d8>)
 80015da:	f002 fd1b 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : echo_input_Pin */
  GPIO_InitStruct.Pin = echo_input_Pin;
 80015de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(echo_input_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <MX_GPIO_Init+0x1dc>)
 80015f4:	f002 fd0e 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_GPIO_Init+0x1d8>)
 800160c:	f002 fd02 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001610:	2303      	movs	r3, #3
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_GPIO_Init+0x1dc>)
 8001628:	f002 fcf4 	bl	8004014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3738      	adds	r7, #56	; 0x38
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40021400 	.word	0x40021400
 800163c:	40020400 	.word	0x40020400
 8001640:	40021800 	.word	0x40021800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40020800 	.word	0x40020800

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800165e:	f000 fa21 	bl	8001aa4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001662:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001666:	2201      	movs	r2, #1
 8001668:	2178      	movs	r1, #120	; 0x78
 800166a:	485b      	ldr	r0, [pc, #364]	; (80017d8 <SSD1306_Init+0x180>)
 800166c:	f003 f834 	bl	80046d8 <HAL_I2C_IsDeviceReady>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e0a9      	b.n	80017ce <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800167a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800167e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001680:	e002      	b.n	8001688 <SSD1306_Init+0x30>
		p--;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3b01      	subs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800168e:	22ae      	movs	r2, #174	; 0xae
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 fa82 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	2078      	movs	r0, #120	; 0x78
 800169e:	f000 fa7d 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	2078      	movs	r0, #120	; 0x78
 80016a8:	f000 fa78 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016ac:	22b0      	movs	r2, #176	; 0xb0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2078      	movs	r0, #120	; 0x78
 80016b2:	f000 fa73 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016b6:	22c8      	movs	r2, #200	; 0xc8
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 fa6e 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2078      	movs	r0, #120	; 0x78
 80016c6:	f000 fa69 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ca:	2210      	movs	r2, #16
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 fa64 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	; 0x78
 80016da:	f000 fa5f 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016de:	2281      	movs	r2, #129	; 0x81
 80016e0:	2100      	movs	r1, #0
 80016e2:	2078      	movs	r0, #120	; 0x78
 80016e4:	f000 fa5a 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	2100      	movs	r1, #0
 80016ec:	2078      	movs	r0, #120	; 0x78
 80016ee:	f000 fa55 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016f2:	22a1      	movs	r2, #161	; 0xa1
 80016f4:	2100      	movs	r1, #0
 80016f6:	2078      	movs	r0, #120	; 0x78
 80016f8:	f000 fa50 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016fc:	22a6      	movs	r2, #166	; 0xa6
 80016fe:	2100      	movs	r1, #0
 8001700:	2078      	movs	r0, #120	; 0x78
 8001702:	f000 fa4b 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001706:	22a8      	movs	r2, #168	; 0xa8
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f000 fa46 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001710:	223f      	movs	r2, #63	; 0x3f
 8001712:	2100      	movs	r1, #0
 8001714:	2078      	movs	r0, #120	; 0x78
 8001716:	f000 fa41 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800171a:	22a4      	movs	r2, #164	; 0xa4
 800171c:	2100      	movs	r1, #0
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f000 fa3c 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001724:	22d3      	movs	r2, #211	; 0xd3
 8001726:	2100      	movs	r1, #0
 8001728:	2078      	movs	r0, #120	; 0x78
 800172a:	f000 fa37 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	; 0x78
 8001734:	f000 fa32 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001738:	22d5      	movs	r2, #213	; 0xd5
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	; 0x78
 800173e:	f000 fa2d 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	; 0x78
 8001748:	f000 fa28 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800174c:	22d9      	movs	r2, #217	; 0xd9
 800174e:	2100      	movs	r1, #0
 8001750:	2078      	movs	r0, #120	; 0x78
 8001752:	f000 fa23 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001756:	2222      	movs	r2, #34	; 0x22
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	; 0x78
 800175c:	f000 fa1e 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001760:	22da      	movs	r2, #218	; 0xda
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	; 0x78
 8001766:	f000 fa19 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800176a:	2212      	movs	r2, #18
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	; 0x78
 8001770:	f000 fa14 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001774:	22db      	movs	r2, #219	; 0xdb
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	; 0x78
 800177a:	f000 fa0f 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800177e:	2220      	movs	r2, #32
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	; 0x78
 8001784:	f000 fa0a 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001788:	228d      	movs	r2, #141	; 0x8d
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	; 0x78
 800178e:	f000 fa05 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001792:	2214      	movs	r2, #20
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	; 0x78
 8001798:	f000 fa00 	bl	8001b9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800179c:	22af      	movs	r2, #175	; 0xaf
 800179e:	2100      	movs	r1, #0
 80017a0:	2078      	movs	r0, #120	; 0x78
 80017a2:	f000 f9fb 	bl	8001b9c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	; 0x78
 80017ac:	f000 f9f6 	bl	8001b9c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f843 	bl	800183c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80017b6:	f000 f813 	bl	80017e0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SSD1306_Init+0x184>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SSD1306_Init+0x184>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SSD1306_Init+0x184>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000364 	.word	0x20000364
 80017dc:	20000ed0 	.word	0x20000ed0

080017e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e01d      	b.n	8001828 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	3b50      	subs	r3, #80	; 0x50
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 f9d0 	bl	8001b9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 f9cb 	bl	8001b9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001806:	2210      	movs	r2, #16
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 f9c6 	bl	8001b9c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <SSD1306_UpdateScreen+0x58>)
 8001816:	441a      	add	r2, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 f957 	bl	8001ad0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3301      	adds	r3, #1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b07      	cmp	r3, #7
 800182c:	d9de      	bls.n	80017ec <SSD1306_UpdateScreen+0xc>
	}
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000ad0 	.word	0x20000ad0

0800183c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <SSD1306_Fill+0x14>
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <SSD1306_Fill+0x16>
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	4619      	mov	r1, r3
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <SSD1306_Fill+0x2c>)
 800185a:	f008 fbce 	bl	8009ffa <memset>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000ad0 	.word	0x20000ad0

0800186c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	70fb      	strb	r3, [r7, #3]
	if (
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b7f      	cmp	r3, #127	; 0x7f
 8001882:	d848      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	2b3f      	cmp	r3, #63	; 0x3f
 8001888:	d845      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d11a      	bne.n	80018dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	b298      	uxth	r0, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	01db      	lsls	r3, r3, #7
 80018b2:	4413      	add	r3, r2
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b259      	sxtb	r1, r3
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	4413      	add	r3, r2
 80018d4:	b2c9      	uxtb	r1, r1
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018d8:	54d1      	strb	r1, [r2, r3]
 80018da:	e01d      	b.n	8001918 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	01db      	lsls	r3, r3, #7
 80018e8:	4413      	add	r3, r2
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4013      	ands	r3, r2
 8001904:	b259      	sxtb	r1, r3
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 8001912:	54d1      	strb	r1, [r2, r3]
 8001914:	e000      	b.n	8001918 <SSD1306_DrawPixel+0xac>
		return;
 8001916:	bf00      	nop
	}
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000ed0 	.word	0x20000ed0
 8001928:	20000ad0 	.word	0x20000ad0

0800192c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	4613      	mov	r3, r2
 800193a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SSD1306_GotoXY+0x28>)
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <SSD1306_GotoXY+0x28>)
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	8053      	strh	r3, [r2, #2]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20000ed0 	.word	0x20000ed0

08001958 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <SSD1306_Putc+0xfc>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
	if (
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	dc07      	bgt.n	8001988 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <SSD1306_Putc+0xfc>)
 800197a:	885b      	ldrh	r3, [r3, #2]
 800197c:	461a      	mov	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001984:	2b3f      	cmp	r3, #63	; 0x3f
 8001986:	dd01      	ble.n	800198c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e05e      	b.n	8001a4a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e04b      	b.n	8001a2a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	3b20      	subs	r3, #32
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	7849      	ldrb	r1, [r1, #1]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e030      	b.n	8001a18 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b298      	uxth	r0, r3
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019d4:	885a      	ldrh	r2, [r3, #2]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b29b      	uxth	r3, r3
 80019de:	79ba      	ldrb	r2, [r7, #6]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff ff43 	bl	800186c <SSD1306_DrawPixel>
 80019e6:	e014      	b.n	8001a12 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b298      	uxth	r0, r3
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019f6:	885a      	ldrh	r2, [r3, #2]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b299      	uxth	r1, r3
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f7ff ff2d 	bl	800186c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d3c8      	bcc.n	80019b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d3ad      	bcc.n	8001992 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SSD1306_Putc+0xfc>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <SSD1306_Putc+0xfc>)
 8001a46:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000ed0 	.word	0x20000ed0

08001a58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a66:	e012      	b.n	8001a8e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff71 	bl	8001958 <SSD1306_Putc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d002      	beq.n	8001a88 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	e008      	b.n	8001a9a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e8      	bne.n	8001a68 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781b      	ldrb	r3, [r3, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <ssd1306_I2C_Init+0x28>)
 8001aac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aae:	e002      	b.n	8001ab6 <ssd1306_I2C_Init+0x12>
		p--;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	0003d090 	.word	0x0003d090

08001ad0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b0c7      	sub	sp, #284	; 0x11c
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	4608      	mov	r0, r1
 8001ada:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ade:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001ae2:	600a      	str	r2, [r1, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001aee:	4622      	mov	r2, r4
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001af6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001afa:	4602      	mov	r2, r0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b06:	460a      	mov	r2, r1
 8001b08:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b16:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b24:	e015      	b.n	8001b52 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b2a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b2e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	441a      	add	r2, r3
 8001b36:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	7811      	ldrb	r1, [r2, #0]
 8001b3e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b42:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b46:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b5c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b60:	8812      	ldrh	r2, [r2, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d8df      	bhi.n	8001b26 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b6a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b299      	uxth	r1, r3
 8001b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f107 020c 	add.w	r2, r7, #12
 8001b84:	200a      	movs	r0, #10
 8001b86:	9000      	str	r0, [sp, #0]
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <ssd1306_I2C_WriteMulti+0xc8>)
 8001b8a:	f002 fcb1 	bl	80044f0 <HAL_I2C_Master_Transmit>
}
 8001b8e:	bf00      	nop
 8001b90:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	20000364 	.word	0x20000364

08001b9c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	71bb      	strb	r3, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bb2:	797b      	ldrb	r3, [r7, #5]
 8001bb4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	f107 020c 	add.w	r2, r7, #12
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <ssd1306_I2C_Write+0x38>)
 8001bc6:	f002 fc93 	bl	80044f0 <HAL_I2C_Master_Transmit>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000364 	.word	0x20000364

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x44>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_MspInit+0x44>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_MspInit+0x44>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_MspInit+0x44>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x44>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x44>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <HAL_ADC_MspInit+0xd0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d152      	bne.n	8001ce8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_ADC_MspInit+0xd4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c72:	2302      	movs	r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	; (8001cf8 <HAL_ADC_MspInit+0xd8>)
 8001c86:	f002 f9c5 	bl	8004014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001cce:	f001 fa63 	bl	8003198 <HAL_DMA_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001cd8:	f7ff fcb8 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	20000254 	.word	0x20000254
 8001d00:	40026470 	.word	0x40026470

08001d04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_ETH_MspInit+0x158>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	f040 8096 	bne.w	8001e54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a46      	ldr	r2, [pc, #280]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da0:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_ETH_MspInit+0x15c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dd0:	2332      	movs	r3, #50	; 0x32
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001de0:	230b      	movs	r3, #11
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	481e      	ldr	r0, [pc, #120]	; (8001e64 <HAL_ETH_MspInit+0x160>)
 8001dec:	f002 f912 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001df0:	2386      	movs	r3, #134	; 0x86
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e00:	230b      	movs	r3, #11
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4817      	ldr	r0, [pc, #92]	; (8001e68 <HAL_ETH_MspInit+0x164>)
 8001e0c:	f002 f902 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e22:	230b      	movs	r3, #11
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480f      	ldr	r0, [pc, #60]	; (8001e6c <HAL_ETH_MspInit+0x168>)
 8001e2e:	f002 f8f1 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e44:	230b      	movs	r3, #11
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <HAL_ETH_MspInit+0x16c>)
 8001e50:	f002 f8e0 	bl	8004014 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	; 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40028000 	.word	0x40028000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40021800 	.word	0x40021800

08001e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0aa      	sub	sp, #168	; 0xa8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2284      	movs	r2, #132	; 0x84
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f008 f8b0 	bl	8009ffa <memset>
  if(hi2c->Instance==I2C1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_I2C_MspInit+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d14c      	bne.n	8001f3e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ea4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fb20 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ebe:	f7ff fbc5 	bl	800164c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001efe:	4619      	mov	r1, r3
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <HAL_I2C_MspInit+0xdc>)
 8001f02:	f002 f887 	bl	8004014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_I2C_MspInit+0xd8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	201f      	movs	r0, #31
 8001f24:	f001 f901 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f28:	201f      	movs	r0, #31
 8001f2a:	f001 f91a 	bl	8003162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2020      	movs	r0, #32
 8001f34:	f001 f8f9 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f38:	2020      	movs	r0, #32
 8001f3a:	f001 f912 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	37a8      	adds	r7, #168	; 0xa8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2a      	ldr	r2, [pc, #168]	; (800200c <HAL_TIM_Base_MspInit+0xb8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10c      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a29      	ldr	r2, [pc, #164]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7e:	e040      	b.n	8002002 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_TIM_Base_MspInit+0xc0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d13b      	bne.n	8002002 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_TIM_Base_MspInit+0xc8>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001faa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001fae:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001fe6:	480c      	ldr	r0, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001fe8:	f001 f8d6 	bl	8003198 <HAL_DMA_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 8001ff2:	f7ff fb2b 	bl	800164c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_TIM_Base_MspInit+0xc4>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40023800 	.word	0x40023800
 8002014:	40000400 	.word	0x40000400
 8002018:	20000450 	.word	0x20000450
 800201c:	40026088 	.word	0x40026088

08002020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_TIM_MspPostInit+0x64>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d11b      	bne.n	800207a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_TIM_MspPostInit+0x68>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_TIM_MspPostInit+0x68>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_TIM_MspPostInit+0x68>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206a:	2302      	movs	r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_TIM_MspPostInit+0x6c>)
 8002076:	f001 ffcd 	bl	8004014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40000400 	.word	0x40000400
 8002088:	40023800 	.word	0x40023800
 800208c:	40020800 	.word	0x40020800

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0ac      	sub	sp, #176	; 0xb0
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	2284      	movs	r2, #132	; 0x84
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f007 ffa2 	bl	8009ffa <memset>
  if(huart->Instance==UART7)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_UART_MspInit+0x148>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d145      	bne.n	800214c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 fa12 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020da:	f7ff fab7 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020de:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <HAL_UART_MspInit+0x14c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a3e      	ldr	r2, [pc, #248]	; (80021dc <HAL_UART_MspInit+0x14c>)
 80020e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_UART_MspInit+0x14c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_UART_MspInit+0x14c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a38      	ldr	r2, [pc, #224]	; (80021dc <HAL_UART_MspInit+0x14c>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_UART_MspInit+0x14c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800210e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002128:	2308      	movs	r3, #8
 800212a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002132:	4619      	mov	r1, r3
 8002134:	482a      	ldr	r0, [pc, #168]	; (80021e0 <HAL_UART_MspInit+0x150>)
 8002136:	f001 ff6d 	bl	8004014 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2052      	movs	r0, #82	; 0x52
 8002140:	f000 fff3 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002144:	2052      	movs	r0, #82	; 0x52
 8002146:	f001 f80c 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800214a:	e041      	b.n	80021d0 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_UART_MspInit+0x154>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d13c      	bne.n	80021d0 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800215c:	2300      	movs	r3, #0
 800215e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	4618      	mov	r0, r3
 8002166:	f004 f9c7 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8002170:	f7ff fa6c 	bl	800164c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_UART_MspInit+0x14c>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_UART_MspInit+0x14c>)
 800217a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_UART_MspInit+0x14c>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_UART_MspInit+0x14c>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_UART_MspInit+0x14c>)
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_UART_MspInit+0x14c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021be:	2307      	movs	r3, #7
 80021c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c8:	4619      	mov	r1, r3
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <HAL_UART_MspInit+0x158>)
 80021cc:	f001 ff22 	bl	8004014 <HAL_GPIO_Init>
}
 80021d0:	bf00      	nop
 80021d2:	37b0      	adds	r7, #176	; 0xb0
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40007800 	.word	0x40007800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40004800 	.word	0x40004800
 80021e8:	40020c00 	.word	0x40020c00

080021ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0ac      	sub	sp, #176	; 0xb0
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	2284      	movs	r2, #132	; 0x84
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f007 fef4 	bl	8009ffa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221a:	d159      	bne.n	80022d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800221c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002220:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4618      	mov	r0, r3
 800222e:	f004 f963 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002238:	f7ff fa08 	bl	800164c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6313      	str	r3, [r2, #48]	; 0x30
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002254:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800226e:	230a      	movs	r3, #10
 8002270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002278:	4619      	mov	r1, r3
 800227a:	4818      	ldr	r0, [pc, #96]	; (80022dc <HAL_PCD_MspInit+0xf0>)
 800227c:	f001 feca 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002298:	4619      	mov	r1, r3
 800229a:	4810      	ldr	r0, [pc, #64]	; (80022dc <HAL_PCD_MspInit+0xf0>)
 800229c:	f001 feba 	bl	8004014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022aa:	6353      	str	r3, [r2, #52]	; 0x34
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c2:	6453      	str	r3, [r2, #68]	; 0x44
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_PCD_MspInit+0xec>)
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022d0:	bf00      	nop
 80022d2:	37b0      	adds	r7, #176	; 0xb0
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 f916 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <DMA1_Stream5_IRQHandler+0x10>)
 800233a:	f001 f8cd 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000450 	.word	0x20000450

08002348 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <I2C1_EV_IRQHandler+0x10>)
 800234e:	f002 facb 	bl	80048e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000364 	.word	0x20000364

0800235c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <I2C1_ER_IRQHandler+0x10>)
 8002362:	f002 fadb 	bl	800491c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000364 	.word	0x20000364

08002370 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA2_Stream4_IRQHandler+0x10>)
 8002376:	f001 f8af 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000254 	.word	0x20000254

08002384 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <UART7_IRQHandler+0x10>)
 800238a:	f006 f893 	bl	80084b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200004b0 	.word	0x200004b0

08002398 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c0:	605a      	str	r2, [r3, #4]
  return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_isatty>:

int _isatty(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f007 fe32 	bl	800a098 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20050000 	.word	0x20050000
 8002460:	00000400 	.word	0x00000400
 8002464:	20000ed8 	.word	0x20000ed8
 8002468:	20001030 	.word	0x20001030

0800246c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002496:	490e      	ldr	r1, [pc, #56]	; (80024d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024ac:	4c0b      	ldr	r4, [pc, #44]	; (80024dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ba:	f7ff ffd7 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f007 fdf1 	bl	800a0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7fe fc69 	bl	8000d98 <main>
  bx  lr    
 80024c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024d4:	0800d0f4 	.word	0x0800d0f4
  ldr r2, =_sbss
 80024d8:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80024dc:	2000102c 	.word	0x2000102c

080024e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC_IRQHandler>

080024e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e6:	2003      	movs	r0, #3
 80024e8:	f000 fe14 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ec:	200f      	movs	r0, #15
 80024ee:	f000 f805 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f2:	f7ff fb71 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fe2f 	bl	800317e <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f000 fdf7 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000010 	.word	0x20000010
 8002554:	20000018 	.word	0x20000018
 8002558:	20000014 	.word	0x20000014

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000018 	.word	0x20000018
 8002580:	20000edc 	.word	0x20000edc

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000edc 	.word	0x20000edc

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c2:	bf00      	nop
 80025c4:	f7ff ffde 	bl	8002584 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000018 	.word	0x20000018

080025e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e031      	b.n	800265e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fb0c 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_ADC_Init+0x84>)
 8002628:	4013      	ands	r3, r2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb22 	bl	8002c7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	ffffeefd 	.word	0xffffeefd

0800266c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d113      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d10b      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e063      	b.n	800277a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026b2:	f7ff ff67 	bl	8002584 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026b8:	e021      	b.n	80026fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d01d      	beq.n	80026fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x6c>
 80026c8:	f7ff ff5c 	bl	8002584 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d212      	bcs.n	80026fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d00b      	beq.n	80026fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e03d      	b.n	800277a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d1d6      	bne.n	80026ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0212 	mvn.w	r2, #18
 8002714:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d123      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11f      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0d4      	b.n	800294c <HAL_ADC_Start_DMA+0x1c8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d018      	beq.n	80027ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80027c8:	4b62      	ldr	r3, [pc, #392]	; (8002954 <HAL_ADC_Start_DMA+0x1d0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a62      	ldr	r2, [pc, #392]	; (8002958 <HAL_ADC_Start_DMA+0x1d4>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9a      	lsrs	r2, r3, #18
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	f040 809c 	bne.w	8002932 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <HAL_ADC_Start_DMA+0x1d8>)
 8002800:	4013      	ands	r3, r2
 8002802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	d106      	bne.n	8002844 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f023 0206 	bic.w	r2, r3, #6
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
 8002842:	e002      	b.n	800284a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_ADC_Start_DMA+0x1dc>)
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_ADC_Start_DMA+0x1e0>)
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	4a40      	ldr	r2, [pc, #256]	; (8002968 <HAL_ADC_Start_DMA+0x1e4>)
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002872:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002882:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	334c      	adds	r3, #76	; 0x4c
 800289e:	4619      	mov	r1, r3
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f000 fd26 	bl	80032f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_ADC_Start_DMA+0x1e8>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10f      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d143      	bne.n	800294a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e03a      	b.n	800294a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_ADC_Start_DMA+0x1ec>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10e      	bne.n	80028fc <HAL_ADC_Start_DMA+0x178>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_ADC_Start_DMA+0x1e8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d120      	bne.n	800294a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_ADC_Start_DMA+0x1f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d11b      	bne.n	800294a <HAL_ADC_Start_DMA+0x1c6>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d114      	bne.n	800294a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e00b      	b.n	800294a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000010 	.word	0x20000010
 8002958:	431bde83 	.word	0x431bde83
 800295c:	fffff8fe 	.word	0xfffff8fe
 8002960:	08002e71 	.word	0x08002e71
 8002964:	08002f2b 	.word	0x08002f2b
 8002968:	08002f47 	.word	0x08002f47
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000
 8002974:	40012200 	.word	0x40012200

08002978 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e136      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x28a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d93a      	bls.n	8002a72 <HAL_ADC_ConfigChannel+0xa2>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a04:	d035      	beq.n	8002a72 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b1e      	subs	r3, #30
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a8d      	ldr	r2, [pc, #564]	; (8002c68 <HAL_ADC_ConfigChannel+0x298>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68d9      	ldr	r1, [r3, #12]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	061a      	lsls	r2, r3, #24
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a4a:	e035      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68d9      	ldr	r1, [r3, #12]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4403      	add	r3, r0
 8002a64:	3b1e      	subs	r3, #30
 8002a66:	409a      	lsls	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a70:	e022      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	400a      	ands	r2, r1
 8002a94:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d824      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b05      	subs	r3, #5
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b05      	subs	r3, #5
 8002afc:	fa00 f203 	lsl.w	r2, r0, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	635a      	str	r2, [r3, #52]	; 0x34
 8002b08:	e04c      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d824      	bhi.n	8002b5c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b23      	subs	r3, #35	; 0x23
 8002b24:	221f      	movs	r2, #31
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b23      	subs	r3, #35	; 0x23
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5a:	e023      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b41      	subs	r3, #65	; 0x41
 8002b6e:	221f      	movs	r2, #31
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43da      	mvns	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	; 0x41
 8002b98:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_ADC_ConfigChannel+0x29c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10a      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002bc2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <HAL_ADC_ConfigChannel+0x29c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10f      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b12      	cmp	r3, #18
 8002bd4:	d10b      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002be0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_ADC_ConfigChannel+0x29c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d12b      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x280>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_ADC_ConfigChannel+0x298>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x23a>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b11      	cmp	r3, #17
 8002c08:	d122      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c14:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c20:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_ADC_ConfigChannel+0x298>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_ADC_ConfigChannel+0x2a4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9a      	lsrs	r2, r3, #18
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c42:	e002      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	10000012 	.word	0x10000012
 8002c6c:	40012000 	.word	0x40012000
 8002c70:	40012300 	.word	0x40012300
 8002c74:	20000010 	.word	0x20000010
 8002c78:	431bde83 	.word	0x431bde83

08002c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c84:	4b78      	ldr	r3, [pc, #480]	; (8002e68 <ADC_Init+0x1ec>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a77      	ldr	r2, [pc, #476]	; (8002e68 <ADC_Init+0x1ec>)
 8002c8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <ADC_Init+0x1ec>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4973      	ldr	r1, [pc, #460]	; (8002e68 <ADC_Init+0x1ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <ADC_Init+0x1f0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	e00f      	b.n	8002d76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0202 	bic.w	r2, r2, #2
 8002d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6899      	ldr	r1, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	005a      	lsls	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	035a      	lsls	r2, r3, #13
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e007      	b.n	8002dec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	051a      	lsls	r2, r3, #20
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e2e:	025a      	lsls	r2, r3, #9
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	029a      	lsls	r2, r3, #10
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40012300 	.word	0x40012300
 8002e6c:	0f000001 	.word	0x0f000001

08002e70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d13c      	bne.n	8002f04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d12b      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d127      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d119      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0220 	bic.w	r2, r2, #32
 8002ed6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff fd48 	bl	8002992 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f02:	e00e      	b.n	8002f22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fd52 	bl	80029ba <HAL_ADC_ErrorCallback>
}
 8002f16:	e004      	b.n	8002f22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fd34 	bl	80029a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff fd27 	bl	80029ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	05fa0000 	.word	0x05fa0000

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff f9ee 	bl	8002584 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e099      	b.n	80032e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d4:	e00f      	b.n	80031f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7ff f9d5 	bl	8002584 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d908      	bls.n	80031f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e078      	b.n	80032e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e8      	bne.n	80031d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_DMA_Init+0x158>)
 8003210:	4013      	ands	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	4313      	orrs	r3, r2
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b04      	cmp	r3, #4
 8003288:	d117      	bne.n	80032ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fb17 	bl	80038d0 <DMA_CheckFifoParam>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032b6:	2301      	movs	r3, #1
 80032b8:	e016      	b.n	80032e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 face 	bl	8003864 <DMA_CalcBaseAndBitshift>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	223f      	movs	r2, #63	; 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	f010803f 	.word	0xf010803f

080032f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_DMA_Start_IT+0x26>
 8003316:	2302      	movs	r3, #2
 8003318:	e048      	b.n	80033ac <HAL_DMA_Start_IT+0xb8>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d137      	bne.n	800339e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa60 	bl	8003808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0216 	orr.w	r2, r2, #22
 8003362:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003372:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e005      	b.n	80033aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033c2:	f7ff f8df 	bl	8002584 <HAL_GetTick>
 80033c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e052      	b.n	800348c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0216 	bic.w	r2, r2, #22
 80033f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003404:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_DMA_Abort+0x62>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003436:	e013      	b.n	8003460 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003438:	f7ff f8a4 	bl	8002584 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b05      	cmp	r3, #5
 8003444:	d90c      	bls.n	8003460 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2203      	movs	r2, #3
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e015      	b.n	800348c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e4      	bne.n	8003438 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	223f      	movs	r2, #63	; 0x3f
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00c      	b.n	80034cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2205      	movs	r2, #5
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80034e4:	4b8e      	ldr	r3, [pc, #568]	; (8003720 <HAL_DMA_IRQHandler+0x248>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a8e      	ldr	r2, [pc, #568]	; (8003724 <HAL_DMA_IRQHandler+0x24c>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2208      	movs	r2, #8
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	2208      	movs	r2, #8
 8003532:	409a      	lsls	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	2201      	movs	r2, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2204      	movs	r2, #4
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	2210      	movs	r2, #16
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d043      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03c      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2210      	movs	r2, #16
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d024      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
 8003606:	e01f      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e016      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0208 	bic.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2220      	movs	r2, #32
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 808f 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8087 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2220      	movs	r2, #32
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d136      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0216 	bic.w	r2, r2, #22
 8003690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_DMA_IRQHandler+0x1da>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0208 	bic.w	r2, r2, #8
 80036c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07e      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
        }
        return;
 80036ee:	e079      	b.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d031      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e02c      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
 800371e:	bf00      	nop
 8003720:	20000010 	.word	0x20000010
 8003724:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e01e      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0210 	bic.w	r2, r2, #16
 8003756:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2205      	movs	r2, #5
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d307      	bcc.n	80037c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f2      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x2cc>
 80037be:	e000      	b.n	80037c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037e4:	bf00      	nop
    }
  }
}
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037fa:	b2db      	uxtb	r3, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d108      	bne.n	8003848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003846:	e007      	b.n	8003858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b10      	subs	r3, #16
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <DMA_CalcBaseAndBitshift+0x60>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d908      	bls.n	80038a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <DMA_CalcBaseAndBitshift+0x68>)
 800389a:	4013      	ands	r3, r2
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	; 0x58
 80038a2:	e006      	b.n	80038b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <DMA_CalcBaseAndBitshift+0x68>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	aaaaaaab 	.word	0xaaaaaaab
 80038c8:	0800d0a8 	.word	0x0800d0a8
 80038cc:	fffffc00 	.word	0xfffffc00

080038d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11f      	bne.n	800392a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d856      	bhi.n	800399e <DMA_CheckFifoParam+0xce>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <DMA_CheckFifoParam+0x28>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003909 	.word	0x08003909
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	08003909 	.word	0x08003909
 8003904:	0800399f 	.word	0x0800399f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d046      	beq.n	80039a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003918:	e043      	b.n	80039a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003922:	d140      	bne.n	80039a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e03d      	b.n	80039a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003932:	d121      	bne.n	8003978 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d837      	bhi.n	80039aa <DMA_CheckFifoParam+0xda>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <DMA_CheckFifoParam+0x70>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003951 	.word	0x08003951
 8003944:	08003957 	.word	0x08003957
 8003948:	08003951 	.word	0x08003951
 800394c:	08003969 	.word	0x08003969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e030      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003966:	e022      	b.n	80039ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003970:	d11f      	bne.n	80039b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003976:	e01c      	b.n	80039b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d903      	bls.n	8003986 <DMA_CheckFifoParam+0xb6>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003984:	e018      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      break;
 800398a:	e015      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e00b      	b.n	80039b6 <DMA_CheckFifoParam+0xe6>
      break;
 800399e:	bf00      	nop
 80039a0:	e00a      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e008      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e006      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e004      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
    }
  } 
  
  return status; 
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06a      	b.n	8003ab0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2223      	movs	r2, #35	; 0x23
 80039e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fe f989 	bl	8001d04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_ETH_Init+0xf0>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <HAL_ETH_Init+0xf0>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_ETH_Init+0xf0>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <HAL_ETH_Init+0xf4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_ETH_Init+0xf4>)
 8003a10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a14:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_ETH_Init+0xf4>)
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4927      	ldr	r1, [pc, #156]	; (8003abc <HAL_ETH_Init+0xf4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_ETH_Init+0xf4>)
 8003a26:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a40:	f7fe fda0 	bl	8002584 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a46:	e011      	b.n	8003a6c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a48:	f7fe fd9c 	bl	8002584 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a56:	d909      	bls.n	8003a6c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	22e0      	movs	r2, #224	; 0xe0
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e021      	b.n	8003ab0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e4      	bne.n	8003a48 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f958 	bl	8003d34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9ff 	bl	8003e88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa55 	bl	8003f3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	461a      	mov	r2, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f9bd 	bl	8003e18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40013800 	.word	0x40013800

08003ac0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4b51      	ldr	r3, [pc, #324]	; (8003c1c <ETH_SetMACConfig+0x15c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	7c1b      	ldrb	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <ETH_SetMACConfig+0x28>
 8003ae2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ae6:	e000      	b.n	8003aea <ETH_SetMACConfig+0x2a>
 8003ae8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7c5b      	ldrb	r3, [r3, #17]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <ETH_SetMACConfig+0x38>
 8003af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003af6:	e000      	b.n	8003afa <ETH_SetMACConfig+0x3a>
 8003af8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003afa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	7fdb      	ldrb	r3, [r3, #31]
 8003b06:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b08:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	7f92      	ldrb	r2, [r2, #30]
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	d102      	bne.n	8003b1e <ETH_SetMACConfig+0x5e>
 8003b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0x60>
 8003b1e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	7f1b      	ldrb	r3, [r3, #28]
 8003b26:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b28:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	791b      	ldrb	r3, [r3, #4]
 8003b34:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	d102      	bne.n	8003b48 <ETH_SetMACConfig+0x88>
 8003b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b46:	e000      	b.n	8003b4a <ETH_SetMACConfig+0x8a>
 8003b48:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	7bdb      	ldrb	r3, [r3, #15]
 8003b50:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b52:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b62:	4313      	orrs	r3, r2
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f7fe fd0e 	bl	800259c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b96:	4013      	ands	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d101      	bne.n	8003bae <ETH_SetMACConfig+0xee>
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	e000      	b.n	8003bb0 <ETH_SetMACConfig+0xf0>
 8003bae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bb0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003bbe:	2a01      	cmp	r2, #1
 8003bc0:	d101      	bne.n	8003bc6 <ETH_SetMACConfig+0x106>
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	e000      	b.n	8003bc8 <ETH_SetMACConfig+0x108>
 8003bc6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003bc8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003bd0:	2a01      	cmp	r2, #1
 8003bd2:	d101      	bne.n	8003bd8 <ETH_SetMACConfig+0x118>
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	e000      	b.n	8003bda <ETH_SetMACConfig+0x11a>
 8003bd8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003be2:	2a01      	cmp	r2, #1
 8003be4:	d101      	bne.n	8003bea <ETH_SetMACConfig+0x12a>
 8003be6:	2202      	movs	r2, #2
 8003be8:	e000      	b.n	8003bec <ETH_SetMACConfig+0x12c>
 8003bea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bec:	4313      	orrs	r3, r2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7fe fcc9 	bl	800259c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	619a      	str	r2, [r3, #24]
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	ff20810f 	.word	0xff20810f

08003c20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <ETH_SetDMAConfig+0x110>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7b1b      	ldrb	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <ETH_SetDMAConfig+0x2c>
 8003c46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c4a:	e000      	b.n	8003c4e <ETH_SetDMAConfig+0x2e>
 8003c4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	7b5b      	ldrb	r3, [r3, #13]
 8003c52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	7f52      	ldrb	r2, [r2, #29]
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	d102      	bne.n	8003c64 <ETH_SetDMAConfig+0x44>
 8003c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c62:	e000      	b.n	8003c66 <ETH_SetDMAConfig+0x46>
 8003c64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	7b9b      	ldrb	r3, [r3, #14]
 8003c6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	7f1b      	ldrb	r3, [r3, #28]
 8003c7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	7f9b      	ldrb	r3, [r3, #30]
 8003c82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c94:	4313      	orrs	r3, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f7fe fc70 	bl	800259c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	791b      	ldrb	r3, [r3, #4]
 8003cce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cd4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003cda:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ce0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003cea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003cf2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cf8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d14:	2001      	movs	r0, #1
 8003d16:	f7fe fc41 	bl	800259c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	f8de3f23 	.word	0xf8de3f23

08003d34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b0a6      	sub	sp, #152	; 0x98
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d70:	2300      	movs	r3, #0
 8003d72:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fe86 	bl	8003ac0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff08 	bl	8003c20 <ETH_SetDMAConfig>
}
 8003e10:	bf00      	nop
 8003e12:	3798      	adds	r7, #152	; 0x98
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3305      	adds	r3, #5
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	3204      	adds	r2, #4
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <ETH_MACAddressConfig+0x68>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3303      	adds	r3, #3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	061a      	lsls	r2, r3, #24
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3301      	adds	r3, #1
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <ETH_MACAddressConfig+0x6c>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6013      	str	r3, [r2, #0]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40028040 	.word	0x40028040
 8003e84:	40028044 	.word	0x40028044

08003e88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e03e      	b.n	8003f14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68d9      	ldr	r1, [r3, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	440b      	add	r3, r1
 8003ea6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	3206      	adds	r2, #6
 8003ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d80c      	bhi.n	8003ef8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	440b      	add	r3, r1
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e004      	b.n	8003f02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d9bd      	bls.n	8003e96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2c:	611a      	str	r2, [r3, #16]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e046      	b.n	8003fd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2200      	movs	r2, #0
 8003f64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003f8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	3212      	adds	r2, #18
 8003fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d80c      	bhi.n	8003fc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6919      	ldr	r1, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e004      	b.n	8003fd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9b5      	bls.n	8003f48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	60da      	str	r2, [r3, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e175      	b.n	8004320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004034:	2201      	movs	r2, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4013      	ands	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	f040 8164 	bne.w	800431a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d005      	beq.n	800406a <HAL_GPIO_Init+0x56>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d130      	bne.n	80040cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a0:	2201      	movs	r2, #1
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 0201 	and.w	r2, r3, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d017      	beq.n	8004108 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	2203      	movs	r2, #3
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d123      	bne.n	800415c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	08da      	lsrs	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	220f      	movs	r2, #15
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	08da      	lsrs	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3208      	adds	r2, #8
 8004156:	69b9      	ldr	r1, [r7, #24]
 8004158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0203 	and.w	r2, r3, #3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80be 	beq.w	800431a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_GPIO_Init+0x324>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a65      	ldr	r2, [pc, #404]	; (8004338 <HAL_GPIO_Init+0x324>)
 80041a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_GPIO_Init+0x324>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041b6:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_GPIO_Init+0x328>)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	3302      	adds	r3, #2
 80041be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a58      	ldr	r2, [pc, #352]	; (8004340 <HAL_GPIO_Init+0x32c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d037      	beq.n	8004252 <HAL_GPIO_Init+0x23e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_GPIO_Init+0x330>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_GPIO_Init+0x23a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a56      	ldr	r2, [pc, #344]	; (8004348 <HAL_GPIO_Init+0x334>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02b      	beq.n	800424a <HAL_GPIO_Init+0x236>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a55      	ldr	r2, [pc, #340]	; (800434c <HAL_GPIO_Init+0x338>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d025      	beq.n	8004246 <HAL_GPIO_Init+0x232>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a54      	ldr	r2, [pc, #336]	; (8004350 <HAL_GPIO_Init+0x33c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01f      	beq.n	8004242 <HAL_GPIO_Init+0x22e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a53      	ldr	r2, [pc, #332]	; (8004354 <HAL_GPIO_Init+0x340>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d019      	beq.n	800423e <HAL_GPIO_Init+0x22a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_GPIO_Init+0x344>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_GPIO_Init+0x226>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a51      	ldr	r2, [pc, #324]	; (800435c <HAL_GPIO_Init+0x348>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00d      	beq.n	8004236 <HAL_GPIO_Init+0x222>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a50      	ldr	r2, [pc, #320]	; (8004360 <HAL_GPIO_Init+0x34c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <HAL_GPIO_Init+0x21e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a4f      	ldr	r2, [pc, #316]	; (8004364 <HAL_GPIO_Init+0x350>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_GPIO_Init+0x21a>
 800422a:	2309      	movs	r3, #9
 800422c:	e012      	b.n	8004254 <HAL_GPIO_Init+0x240>
 800422e:	230a      	movs	r3, #10
 8004230:	e010      	b.n	8004254 <HAL_GPIO_Init+0x240>
 8004232:	2308      	movs	r3, #8
 8004234:	e00e      	b.n	8004254 <HAL_GPIO_Init+0x240>
 8004236:	2307      	movs	r3, #7
 8004238:	e00c      	b.n	8004254 <HAL_GPIO_Init+0x240>
 800423a:	2306      	movs	r3, #6
 800423c:	e00a      	b.n	8004254 <HAL_GPIO_Init+0x240>
 800423e:	2305      	movs	r3, #5
 8004240:	e008      	b.n	8004254 <HAL_GPIO_Init+0x240>
 8004242:	2304      	movs	r3, #4
 8004244:	e006      	b.n	8004254 <HAL_GPIO_Init+0x240>
 8004246:	2303      	movs	r3, #3
 8004248:	e004      	b.n	8004254 <HAL_GPIO_Init+0x240>
 800424a:	2302      	movs	r3, #2
 800424c:	e002      	b.n	8004254 <HAL_GPIO_Init+0x240>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_GPIO_Init+0x240>
 8004252:	2300      	movs	r3, #0
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	f002 0203 	and.w	r2, r2, #3
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	4093      	lsls	r3, r2
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004264:	4935      	ldr	r1, [pc, #212]	; (800433c <HAL_GPIO_Init+0x328>)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3302      	adds	r3, #2
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_GPIO_Init+0x354>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004296:	4a34      	ldr	r2, [pc, #208]	; (8004368 <HAL_GPIO_Init+0x354>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800429c:	4b32      	ldr	r3, [pc, #200]	; (8004368 <HAL_GPIO_Init+0x354>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_GPIO_Init+0x354>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <HAL_GPIO_Init+0x354>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_GPIO_Init+0x354>)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <HAL_GPIO_Init+0x354>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004314:	4a14      	ldr	r2, [pc, #80]	; (8004368 <HAL_GPIO_Init+0x354>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3301      	adds	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	f67f ae86 	bls.w	8004034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	40013800 	.word	0x40013800
 8004340:	40020000 	.word	0x40020000
 8004344:	40020400 	.word	0x40020400
 8004348:	40020800 	.word	0x40020800
 800434c:	40020c00 	.word	0x40020c00
 8004350:	40021000 	.word	0x40021000
 8004354:	40021400 	.word	0x40021400
 8004358:	40021800 	.word	0x40021800
 800435c:	40021c00 	.word	0x40021c00
 8004360:	40022000 	.word	0x40022000
 8004364:	40022400 	.word	0x40022400
 8004368:	40013c00 	.word	0x40013c00

0800436c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	e001      	b.n	800438e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	4613      	mov	r3, r2
 80043aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043b8:	e003      	b.n	80043c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	041a      	lsls	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	619a      	str	r2, [r3, #24]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07f      	b.n	80044e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd fd3c 	bl	8001e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d107      	bne.n	800444a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	e006      	b.n	8004458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d104      	bne.n	800446a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_I2C_Init+0x11c>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	02008000 	.word	0x02008000

080044f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	461a      	mov	r2, r3
 80044fc:	460b      	mov	r3, r1
 80044fe:	817b      	strh	r3, [r7, #10]
 8004500:	4613      	mov	r3, r2
 8004502:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 80da 	bne.w	80046c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x30>
 800451c:	2302      	movs	r3, #2
 800451e:	e0d3      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004528:	f7fe f82c 	bl	8002584 <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2319      	movs	r3, #25
 8004534:	2201      	movs	r2, #1
 8004536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fef5 	bl	800532a <I2C_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0be      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2210      	movs	r2, #16
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	893a      	ldrh	r2, [r7, #8]
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2bff      	cmp	r3, #255	; 0xff
 800457a:	d90e      	bls.n	800459a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	22ff      	movs	r2, #255	; 0xff
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	b2da      	uxtb	r2, r3
 8004588:	8979      	ldrh	r1, [r7, #10]
 800458a:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f001 f866 	bl	8005664 <I2C_TransferConfig>
 8004598:	e06c      	b.n	8004674 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	4b48      	ldr	r3, [pc, #288]	; (80046d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f001 f855 	bl	8005664 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045ba:	e05b      	b.n	8004674 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	6a39      	ldr	r1, [r7, #32]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fef2 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e07b      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d034      	beq.n	8004674 <HAL_I2C_Master_Transmit+0x184>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d130      	bne.n	8004674 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fe84 	bl	800532a <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04d      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2bff      	cmp	r3, #255	; 0xff
 8004634:	d90e      	bls.n	8004654 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	22ff      	movs	r2, #255	; 0xff
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	b2da      	uxtb	r2, r3
 8004642:	8979      	ldrh	r1, [r7, #10]
 8004644:	2300      	movs	r3, #0
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f001 f809 	bl	8005664 <I2C_TransferConfig>
 8004652:	e00f      	b.n	8004674 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	b2da      	uxtb	r2, r3
 8004664:	8979      	ldrh	r1, [r7, #10]
 8004666:	2300      	movs	r3, #0
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fff8 	bl	8005664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d19e      	bne.n	80045bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	6a39      	ldr	r1, [r7, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fed1 	bl	800542a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e01a      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2220      	movs	r2, #32
 8004698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	80002000 	.word	0x80002000
 80046d4:	fe00e800 	.word	0xfe00e800

080046d8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	460b      	mov	r3, r1
 80046e6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	f040 80ef 	bne.w	80048d8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004708:	d101      	bne.n	800470e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	e0e5      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_I2C_IsDeviceReady+0x44>
 8004718:	2302      	movs	r3, #2
 800471a:	e0de      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <HAL_I2C_IsDeviceReady+0x6e>
 800473a:	897b      	ldrh	r3, [r7, #10]
 800473c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004740:	4b68      	ldr	r3, [pc, #416]	; (80048e4 <HAL_I2C_IsDeviceReady+0x20c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	e004      	b.n	8004750 <HAL_I2C_IsDeviceReady+0x78>
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004756:	f7fd ff15 	bl	8002584 <HAL_GetTick>
 800475a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004788:	e034      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004790:	d01a      	beq.n	80047c8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fd fef7 	bl	8002584 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <HAL_I2C_IsDeviceReady+0xd0>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10f      	bne.n	80047c8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e088      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_I2C_IsDeviceReady+0x128>
 80047fa:	7fbb      	ldrb	r3, [r7, #30]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0c4      	beq.n	800478a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d01a      	beq.n	8004844 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2200      	movs	r2, #0
 8004816:	2120      	movs	r1, #32
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fd86 	bl	800532a <I2C_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e058      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2220      	movs	r2, #32
 800482e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e04a      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	2120      	movs	r1, #32
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fd6b 	bl	800532a <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e03d      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2220      	movs	r2, #32
 800486c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d118      	bne.n	80048a8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004884:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	2120      	movs	r1, #32
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fd4a 	bl	800532a <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e01c      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2220      	movs	r2, #32
 80048a6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3301      	adds	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	f63f af3d 	bhi.w	8004732 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	02002000 	.word	0x02002000

080048e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
  }
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00f      	beq.n	800495e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800495c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f043 0208 	orr.w	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004986:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00f      	beq.n	80049b2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	f043 0202 	orr.w	r2, r3, #2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 030b 	and.w	r3, r3, #11
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fb77 	bl	80050b8 <I2C_ITError>
  }
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
 8004a06:	4613      	mov	r3, r2
 8004a08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <I2C_Slave_ISR_IT+0x24>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0e1      	b.n	8004c3a <I2C_Slave_ISR_IT+0x1e8>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f9b5 	bl	8004e04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d04b      	beq.n	8004b3c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d046      	beq.n	8004b3c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d128      	bne.n	8004b0a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b28      	cmp	r3, #40	; 0x28
 8004ac2:	d108      	bne.n	8004ad6 <I2C_Slave_ISR_IT+0x84>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aca:	d104      	bne.n	8004ad6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004acc:	6939      	ldr	r1, [r7, #16]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa9e 	bl	8005010 <I2C_ITListenCplt>
 8004ad4:	e031      	b.n	8004b3a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b29      	cmp	r3, #41	; 0x29
 8004ae0:	d10e      	bne.n	8004b00 <I2C_Slave_ISR_IT+0xae>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae8:	d00a      	beq.n	8004b00 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fbd7 	bl	80052a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f926 	bl	8004d4a <I2C_ITSlaveSeqCplt>
 8004afe:	e01c      	b.n	8004b3a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2210      	movs	r2, #16
 8004b06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b08:	e08f      	b.n	8004c2a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f043 0204 	orr.w	r2, r3, #4
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <I2C_Slave_ISR_IT+0xda>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b2a:	d17e      	bne.n	8004c2a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fac0 	bl	80050b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b38:	e077      	b.n	8004c2a <I2C_Slave_ISR_IT+0x1d8>
 8004b3a:	e076      	b.n	8004c2a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02f      	beq.n	8004ba6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02a      	beq.n	8004ba6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d14b      	bne.n	8004c2e <I2C_Slave_ISR_IT+0x1dc>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b9c:	d047      	beq.n	8004c2e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f8d3 	bl	8004d4a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004ba4:	e043      	b.n	8004c2e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f840 	bl	8004c42 <I2C_ITAddrCplt>
 8004bc2:	e035      	b.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d030      	beq.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02b      	beq.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c12:	e00d      	b.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1a:	d002      	beq.n	8004c22 <I2C_Slave_ISR_IT+0x1d0>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f891 	bl	8004d4a <I2C_ITSlaveSeqCplt>
 8004c28:	e002      	b.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004c2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c58:	2b28      	cmp	r3, #40	; 0x28
 8004c5a:	d16a      	bne.n	8004d32 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c7a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c88:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c96:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d138      	bne.n	8004d12 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004ca0:	897b      	ldrh	r3, [r7, #10]
 8004ca2:	09db      	lsrs	r3, r3, #7
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	89bb      	ldrh	r3, [r7, #12]
 8004ca8:	4053      	eors	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f003 0306 	and.w	r3, r3, #6
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11c      	bne.n	8004cee <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d13b      	bne.n	8004d42 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ce0:	89ba      	ldrh	r2, [r7, #12]
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fe87 	bl	80049fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cec:	e029      	b.n	8004d42 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004cee:	893b      	ldrh	r3, [r7, #8]
 8004cf0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fce6 	bl	80056c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d04:	89ba      	ldrh	r2, [r7, #12]
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fe75 	bl	80049fa <HAL_I2C_AddrCallback>
}
 8004d10:	e017      	b.n	8004d42 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fcd6 	bl	80056c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d24:	89ba      	ldrh	r2, [r7, #12]
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe65 	bl	80049fa <HAL_I2C_AddrCallback>
}
 8004d30:	e007      	b.n	8004d42 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2208      	movs	r2, #8
 8004d38:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e00c      	b.n	8004d98 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d96:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b29      	cmp	r3, #41	; 0x29
 8004da2:	d112      	bne.n	8004dca <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2228      	movs	r2, #40	; 0x28
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2221      	movs	r2, #33	; 0x21
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004db2:	2101      	movs	r1, #1
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fc87 	bl	80056c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fe05 	bl	80049d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dc8:	e017      	b.n	8004dfa <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd4:	d111      	bne.n	8004dfa <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2228      	movs	r2, #40	; 0x28
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2222      	movs	r2, #34	; 0x22
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004de4:	2102      	movs	r1, #2
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fc6e 	bl	80056c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fdf6 	bl	80049e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e20:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2220      	movs	r2, #32
 8004e28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b21      	cmp	r3, #33	; 0x21
 8004e2e:	d002      	beq.n	8004e36 <I2C_ITSlaveCplt+0x32>
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b29      	cmp	r3, #41	; 0x29
 8004e34:	d108      	bne.n	8004e48 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e36:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fc44 	bl	80056c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
 8004e46:	e00d      	b.n	8004e64 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d002      	beq.n	8004e54 <I2C_ITSlaveCplt+0x50>
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b2a      	cmp	r3, #42	; 0x2a
 8004e52:	d107      	bne.n	8004e64 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e54:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc35 	bl	80056c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2222      	movs	r2, #34	; 0x22
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b62      	ldr	r3, [pc, #392]	; (8005008 <I2C_ITSlaveCplt+0x204>)
 8004e80:	400b      	ands	r3, r1
 8004e82:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa0e 	bl	80052a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d013      	beq.n	8004ebc <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ea2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01f      	beq.n	8004eec <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eba:	e017      	b.n	8004eec <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8a4 	bl	80050b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b28      	cmp	r3, #40	; 0x28
 8004f7a:	d141      	bne.n	8005000 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f846 	bl	8005010 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f84:	e03c      	b.n	8005000 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f8e:	d014      	beq.n	8004fba <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff feda 	bl	8004d4a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <I2C_ITSlaveCplt+0x208>)
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fd2f 	bl	8004a16 <HAL_I2C_ListenCpltCallback>
}
 8004fb8:	e022      	b.n	8005000 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b22      	cmp	r3, #34	; 0x22
 8004fc4:	d10e      	bne.n	8004fe4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fd02 	bl	80049e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fe2:	e00d      	b.n	8005000 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fce9 	bl	80049d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	fe00e800 	.word	0xfe00e800
 800500c:	ffff0000 	.word	0xffff0000

08005010 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <I2C_ITListenCplt+0xa4>)
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d022      	beq.n	800508c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	f043 0204 	orr.w	r2, r3, #4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800508c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb19 	bl	80056c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2210      	movs	r2, #16
 800509c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fcb5 	bl	8004a16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	ffff0000 	.word	0xffff0000

080050b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a5d      	ldr	r2, [pc, #372]	; (800524c <I2C_ITError+0x194>)
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b28      	cmp	r3, #40	; 0x28
 80050ee:	d005      	beq.n	80050fc <I2C_ITError+0x44>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b29      	cmp	r3, #41	; 0x29
 80050f4:	d002      	beq.n	80050fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b2a      	cmp	r3, #42	; 0x2a
 80050fa:	d10b      	bne.n	8005114 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050fc:	2103      	movs	r1, #3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fae2 	bl	80056c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2228      	movs	r2, #40	; 0x28
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a50      	ldr	r2, [pc, #320]	; (8005250 <I2C_ITError+0x198>)
 8005110:	635a      	str	r2, [r3, #52]	; 0x34
 8005112:	e011      	b.n	8005138 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005114:	f248 0103 	movw	r1, #32771	; 0x8003
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fad5 	bl	80056c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b60      	cmp	r3, #96	; 0x60
 8005128:	d003      	beq.n	8005132 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	2b00      	cmp	r3, #0
 8005144:	d039      	beq.n	80051ba <I2C_ITError+0x102>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b11      	cmp	r3, #17
 800514a:	d002      	beq.n	8005152 <I2C_ITError+0x9a>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b21      	cmp	r3, #33	; 0x21
 8005150:	d133      	bne.n	80051ba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005160:	d107      	bne.n	8005172 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005170:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fb38 	bl	80037ec <HAL_DMA_GetState>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d017      	beq.n	80051b2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	4a33      	ldr	r2, [pc, #204]	; (8005254 <I2C_ITError+0x19c>)
 8005188:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe f97c 	bl	8003494 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04d      	beq.n	800523e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051b0:	e045      	b.n	800523e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f850 	bl	8005258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051b8:	e041      	b.n	800523e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d039      	beq.n	8005236 <I2C_ITError+0x17e>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b12      	cmp	r3, #18
 80051c6:	d002      	beq.n	80051ce <I2C_ITError+0x116>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	d133      	bne.n	8005236 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051dc:	d107      	bne.n	80051ee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fafa 	bl	80037ec <HAL_DMA_GetState>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d017      	beq.n	800522e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <I2C_ITError+0x19c>)
 8005204:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe f93e 	bl	8003494 <HAL_DMA_Abort_IT>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d011      	beq.n	8005242 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800522c:	e009      	b.n	8005242 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f812 	bl	8005258 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005234:	e005      	b.n	8005242 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f80e 	bl	8005258 <I2C_TreatErrorCallback>
  }
}
 800523c:	e002      	b.n	8005244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800523e:	bf00      	nop
 8005240:	e000      	b.n	8005244 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005242:	bf00      	nop
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	ffff0000 	.word	0xffff0000
 8005250:	08004a53 	.word	0x08004a53
 8005254:	080052ef 	.word	0x080052ef

08005258 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d10e      	bne.n	800528a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fbdb 	bl	8004a3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005288:	e009      	b.n	800529e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fbc6 	bl	8004a2a <HAL_I2C_ErrorCallback>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d103      	bne.n	80052c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2200      	movs	r2, #0
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d007      	beq.n	80052e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	619a      	str	r2, [r3, #24]
  }
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	2200      	movs	r2, #0
 800530a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	2200      	movs	r2, #0
 800531a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ff9b 	bl	8005258 <I2C_TreatErrorCallback>
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800533a:	e022      	b.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005342:	d01e      	beq.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005344:	f7fd f91e 	bl	8002584 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d113      	bne.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d0cd      	beq.n	800533c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b6:	e02c      	b.n	8005412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f871 	bl	80054a4 <I2C_IsErrorOccurred>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e02a      	b.n	8005422 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d2:	d01e      	beq.n	8005412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d4:	f7fd f8d6 	bl	8002584 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d113      	bne.n	8005412 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d1cb      	bne.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005436:	e028      	b.n	800548a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f831 	bl	80054a4 <I2C_IsErrorOccurred>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e026      	b.n	800549a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fd f89a 	bl	8002584 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d113      	bne.n	800548a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e007      	b.n	800549a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b20      	cmp	r3, #32
 8005496:	d1cf      	bne.n	8005438 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d068      	beq.n	80055a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2210      	movs	r2, #16
 80054d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054d8:	e049      	b.n	800556e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e0:	d045      	beq.n	800556e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054e2:	f7fd f84f 	bl	8002584 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <I2C_IsErrorOccurred+0x54>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d13a      	bne.n	800556e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800550a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551a:	d121      	bne.n	8005560 <I2C_IsErrorOccurred+0xbc>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005522:	d01d      	beq.n	8005560 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b20      	cmp	r3, #32
 8005528:	d01a      	beq.n	8005560 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800553a:	f7fd f823 	bl	8002584 <HAL_GetTick>
 800553e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005540:	e00e      	b.n	8005560 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005542:	f7fd f81f 	bl	8002584 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b19      	cmp	r3, #25
 800554e:	d907      	bls.n	8005560 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f043 0320 	orr.w	r3, r3, #32
 8005556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800555e:	e006      	b.n	800556e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b20      	cmp	r3, #32
 800556c:	d1e9      	bne.n	8005542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b20      	cmp	r3, #32
 800557a:	d003      	beq.n	8005584 <I2C_IsErrorOccurred+0xe0>
 800557c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0aa      	beq.n	80054da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2220      	movs	r2, #32
 8005592:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	f043 0304 	orr.w	r3, r3, #4
 800559a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f043 0308 	orr.w	r3, r3, #8
 80055dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01c      	beq.n	8005652 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fe44 	bl	80052a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <I2C_IsErrorOccurred+0x1bc>)
 800562a:	400b      	ands	r3, r1
 800562c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005656:	4618      	mov	r0, r3
 8005658:	3728      	adds	r7, #40	; 0x28
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	fe00e800 	.word	0xfe00e800

08005664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	817b      	strh	r3, [r7, #10]
 8005672:	4613      	mov	r3, r2
 8005674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005676:	897b      	ldrh	r3, [r7, #10]
 8005678:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800567c:	7a7b      	ldrb	r3, [r7, #9]
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005684:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	4313      	orrs	r3, r2
 800568e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005692:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	0d5b      	lsrs	r3, r3, #21
 800569e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <I2C_TransferConfig+0x60>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	43db      	mvns	r3, r3
 80056a8:	ea02 0103 	and.w	r1, r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	03ff63ff 	.word	0x03ff63ff

080056c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056d8:	887b      	ldrh	r3, [r7, #2]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00f      	beq.n	8005702 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80056e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f6:	2b28      	cmp	r3, #40	; 0x28
 80056f8:	d003      	beq.n	8005702 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005700:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00f      	beq.n	800572c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005712:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005720:	2b28      	cmp	r3, #40	; 0x28
 8005722:	d003      	beq.n	800572c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800572a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800572c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da03      	bge.n	800573c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800573a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	2b10      	cmp	r3, #16
 8005740:	d103      	bne.n	800574a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	2b20      	cmp	r3, #32
 800574e:	d103      	bne.n	8005758 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f043 0320 	orr.w	r3, r3, #32
 8005756:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d103      	bne.n	8005766 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005764:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6819      	ldr	r1, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	43da      	mvns	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	400a      	ands	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	d138      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e032      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b20      	cmp	r3, #32
 800582e:	d139      	bne.n	80058a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800583a:	2302      	movs	r3, #2
 800583c:	e033      	b.n	80058a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2224      	movs	r2, #36	; 0x24
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800586c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b4:	b08f      	sub	sp, #60	; 0x3c
 80058b6:	af0a      	add	r7, sp, #40	; 0x28
 80058b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e116      	b.n	8005af2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc fc84 	bl	80021ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2203      	movs	r2, #3
 80058e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f003 fdc8 	bl	8009498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	687e      	ldr	r6, [r7, #4]
 8005910:	466d      	mov	r5, sp
 8005912:	f106 0410 	add.w	r4, r6, #16
 8005916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800591a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800591c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800591e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005922:	e885 0003 	stmia.w	r5, {r0, r1}
 8005926:	1d33      	adds	r3, r6, #4
 8005928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800592a:	6838      	ldr	r0, [r7, #0]
 800592c:	f003 fd5c 	bl	80093e8 <USB_CoreInit>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0d7      	b.n	8005af2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f003 fdb6 	bl	80094ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
 8005952:	e04a      	b.n	80059ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	333d      	adds	r3, #61	; 0x3d
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005968:	7bfa      	ldrb	r2, [r7, #15]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	333c      	adds	r3, #60	; 0x3c
 8005978:	7bfa      	ldrb	r2, [r7, #15]
 800597a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	b298      	uxth	r0, r3
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	3344      	adds	r3, #68	; 0x44
 8005990:	4602      	mov	r2, r0
 8005992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3340      	adds	r3, #64	; 0x40
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3348      	adds	r3, #72	; 0x48
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	334c      	adds	r3, #76	; 0x4c
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	3354      	adds	r3, #84	; 0x54
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	3301      	adds	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
 80059ea:	7bfa      	ldrb	r2, [r7, #15]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3af      	bcc.n	8005954 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	e044      	b.n	8005a84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	3301      	adds	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	7bfa      	ldrb	r2, [r7, #15]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3b5      	bcc.n	80059fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	687e      	ldr	r6, [r7, #4]
 8005a96:	466d      	mov	r5, sp
 8005a98:	f106 0410 	add.w	r4, r6, #16
 8005a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005aac:	1d33      	adds	r3, r6, #4
 8005aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ab0:	6838      	ldr	r0, [r7, #0]
 8005ab2:	f003 fd4f 	bl	8009554 <USB_DevInit>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e014      	b.n	8005af2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d102      	bne.n	8005ae6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f80b 	bl	8005afc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 ff0d 	bl	800990a <USB_DevDisconnect>

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005afc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	10000003 	.word	0x10000003

08005b44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40007000 	.word	0x40007000

08005b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e291      	b.n	800609e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8087 	beq.w	8005c96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b88:	4b96      	ldr	r3, [pc, #600]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 030c 	and.w	r3, r3, #12
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d00c      	beq.n	8005bae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b94:	4b93      	ldr	r3, [pc, #588]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d112      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x62>
 8005ba0:	4b90      	ldr	r3, [pc, #576]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bac:	d10b      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bae:	4b8d      	ldr	r3, [pc, #564]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d06c      	beq.n	8005c94 <HAL_RCC_OscConfig+0x130>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d168      	bne.n	8005c94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e26b      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bce:	d106      	bne.n	8005bde <HAL_RCC_OscConfig+0x7a>
 8005bd0:	4b84      	ldr	r3, [pc, #528]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a83      	ldr	r2, [pc, #524]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	e02e      	b.n	8005c3c <HAL_RCC_OscConfig+0xd8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x9c>
 8005be6:	4b7f      	ldr	r3, [pc, #508]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7e      	ldr	r2, [pc, #504]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4b7c      	ldr	r3, [pc, #496]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a7b      	ldr	r2, [pc, #492]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e01d      	b.n	8005c3c <HAL_RCC_OscConfig+0xd8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0xc0>
 8005c0a:	4b76      	ldr	r3, [pc, #472]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a75      	ldr	r2, [pc, #468]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4b73      	ldr	r3, [pc, #460]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a72      	ldr	r2, [pc, #456]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0xd8>
 8005c24:	4b6f      	ldr	r3, [pc, #444]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a6e      	ldr	r2, [pc, #440]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b6c      	ldr	r3, [pc, #432]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6b      	ldr	r2, [pc, #428]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d013      	beq.n	8005c6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fc fc9e 	bl	8002584 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fc fc9a 	bl	8002584 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e21f      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0xe8>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fc fc8a 	bl	8002584 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c74:	f7fc fc86 	bl	8002584 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e20b      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c86:	4b57      	ldr	r3, [pc, #348]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x110>
 8005c92:	e000      	b.n	8005c96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d069      	beq.n	8005d76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ca2:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cae:	4b4d      	ldr	r3, [pc, #308]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d11c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x190>
 8005cba:	4b4a      	ldr	r3, [pc, #296]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d116      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc6:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_RCC_OscConfig+0x17a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d001      	beq.n	8005cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e1df      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cde:	4b41      	ldr	r3, [pc, #260]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	493d      	ldr	r1, [pc, #244]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf2:	e040      	b.n	8005d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d023      	beq.n	8005d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cfc:	4b39      	ldr	r3, [pc, #228]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a38      	ldr	r2, [pc, #224]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fc fc3c 	bl	8002584 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d10:	f7fc fc38 	bl	8002584 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e1bd      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d22:	4b30      	ldr	r3, [pc, #192]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4929      	ldr	r1, [pc, #164]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
 8005d42:	e018      	b.n	8005d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fc fc18 	bl	8002584 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d58:	f7fc fc14 	bl	8002584 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e199      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d038      	beq.n	8005df4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d019      	beq.n	8005dbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8e:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fc fbf5 	bl	8002584 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d9e:	f7fc fbf1 	bl	8002584 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e176      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x23a>
 8005dbc:	e01a      	b.n	8005df4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc2:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <HAL_RCC_OscConfig+0x280>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dca:	f7fc fbdb 	bl	8002584 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd0:	e00a      	b.n	8005de8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd2:	f7fc fbd7 	bl	8002584 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d903      	bls.n	8005de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e15c      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
 8005de4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de8:	4b91      	ldr	r3, [pc, #580]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ee      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80a4 	beq.w	8005f4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e02:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	4b88      	ldr	r3, [pc, #544]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a87      	ldr	r2, [pc, #540]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b85      	ldr	r3, [pc, #532]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e2a:	4b82      	ldr	r3, [pc, #520]	; (8006034 <HAL_RCC_OscConfig+0x4d0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d118      	bne.n	8005e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e36:	4b7f      	ldr	r3, [pc, #508]	; (8006034 <HAL_RCC_OscConfig+0x4d0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7e      	ldr	r2, [pc, #504]	; (8006034 <HAL_RCC_OscConfig+0x4d0>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e42:	f7fc fb9f 	bl	8002584 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4a:	f7fc fb9b 	bl	8002584 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b64      	cmp	r3, #100	; 0x64
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e120      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e5c:	4b75      	ldr	r3, [pc, #468]	; (8006034 <HAL_RCC_OscConfig+0x4d0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d106      	bne.n	8005e7e <HAL_RCC_OscConfig+0x31a>
 8005e70:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7c:	e02d      	b.n	8005eda <HAL_RCC_OscConfig+0x376>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x33c>
 8005e86:	4b6a      	ldr	r3, [pc, #424]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	4a69      	ldr	r2, [pc, #420]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	6713      	str	r3, [r2, #112]	; 0x70
 8005e92:	4b67      	ldr	r3, [pc, #412]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4a66      	ldr	r2, [pc, #408]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005e98:	f023 0304 	bic.w	r3, r3, #4
 8005e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9e:	e01c      	b.n	8005eda <HAL_RCC_OscConfig+0x376>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d10c      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x35e>
 8005ea8:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	4a60      	ldr	r2, [pc, #384]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005eae:	f043 0304 	orr.w	r3, r3, #4
 8005eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb4:	4b5e      	ldr	r3, [pc, #376]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec0:	e00b      	b.n	8005eda <HAL_RCC_OscConfig+0x376>
 8005ec2:	4b5b      	ldr	r3, [pc, #364]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	4a5a      	ldr	r2, [pc, #360]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ece:	4b58      	ldr	r3, [pc, #352]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a57      	ldr	r2, [pc, #348]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ed4:	f023 0304 	bic.w	r3, r3, #4
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d015      	beq.n	8005f0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee2:	f7fc fb4f 	bl	8002584 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee8:	e00a      	b.n	8005f00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eea:	f7fc fb4b 	bl	8002584 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e0ce      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f00:	4b4b      	ldr	r3, [pc, #300]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ee      	beq.n	8005eea <HAL_RCC_OscConfig+0x386>
 8005f0c:	e014      	b.n	8005f38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0e:	f7fc fb39 	bl	8002584 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f14:	e00a      	b.n	8005f2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f16:	f7fc fb35 	bl	8002584 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e0b8      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2c:	4b40      	ldr	r3, [pc, #256]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ee      	bne.n	8005f16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	4a3b      	ldr	r2, [pc, #236]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80a4 	beq.w	800609c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f54:	4b36      	ldr	r3, [pc, #216]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 030c 	and.w	r3, r3, #12
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d06b      	beq.n	8006038 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d149      	bne.n	8005ffc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f68:	4b31      	ldr	r3, [pc, #196]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a30      	ldr	r2, [pc, #192]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fc fb06 	bl	8002584 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fc fb02 	bl	8002584 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e087      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc8:	4b19      	ldr	r3, [pc, #100]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a18      	ldr	r2, [pc, #96]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fc fad6 	bl	8002584 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fdc:	f7fc fad2 	bl	8002584 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e057      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fee:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x478>
 8005ffa:	e04f      	b.n	800609c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8006002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006008:	f7fc fabc 	bl	8002584 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006010:	f7fc fab8 	bl	8002584 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e03d      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	4b03      	ldr	r3, [pc, #12]	; (8006030 <HAL_RCC_OscConfig+0x4cc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x4ac>
 800602e:	e035      	b.n	800609c <HAL_RCC_OscConfig+0x538>
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HAL_RCC_OscConfig+0x544>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d028      	beq.n	8006098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d121      	bne.n	8006098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d11a      	bne.n	8006098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800606e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006070:	4293      	cmp	r3, r2
 8006072:	d111      	bne.n	8006098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d107      	bne.n	8006098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800

080060ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0d0      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c4:	4b6a      	ldr	r3, [pc, #424]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d910      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 020f 	bic.w	r2, r3, #15
 80060da:	4965      	ldr	r1, [pc, #404]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b63      	ldr	r3, [pc, #396]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b8      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a58      	ldr	r2, [pc, #352]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800612a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800612e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006130:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	494d      	ldr	r1, [pc, #308]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d040      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d115      	bne.n	800618e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616e:	4b41      	ldr	r3, [pc, #260]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e073      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617e:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e06b      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f023 0203 	bic.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4936      	ldr	r1, [pc, #216]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800619c:	4313      	orrs	r3, r2
 800619e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a0:	f7fc f9f0 	bl	8002584 <HAL_GetTick>
 80061a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a6:	e00a      	b.n	80061be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a8:	f7fc f9ec 	bl	8002584 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e053      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 020c 	and.w	r2, r3, #12
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d1eb      	bne.n	80061a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d210      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b24      	ldr	r3, [pc, #144]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 020f 	bic.w	r2, r3, #15
 80061e6:	4922      	ldr	r1, [pc, #136]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e032      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4916      	ldr	r1, [pc, #88]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800623e:	f000 f821 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8006242:	4602      	mov	r2, r0
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	490a      	ldr	r1, [pc, #40]	; (8006278 <HAL_RCC_ClockConfig+0x1cc>)
 8006250:	5ccb      	ldrb	r3, [r1, r3]
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1d0>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1d4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc f94c 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00
 8006274:	40023800 	.word	0x40023800
 8006278:	0800d090 	.word	0x0800d090
 800627c:	20000010 	.word	0x20000010
 8006280:	20000014 	.word	0x20000014

08006284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006288:	b094      	sub	sp, #80	; 0x50
 800628a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	647b      	str	r3, [r7, #68]	; 0x44
 8006290:	2300      	movs	r3, #0
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	2300      	movs	r3, #0
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629c:	4b79      	ldr	r3, [pc, #484]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d00d      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x40>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	f200 80e1 	bhi.w	8006470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0x34>
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d003      	beq.n	80062be <HAL_RCC_GetSysClockFreq+0x3a>
 80062b6:	e0db      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b8:	4b73      	ldr	r3, [pc, #460]	; (8006488 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062bc:	e0db      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062be:	4b73      	ldr	r3, [pc, #460]	; (800648c <HAL_RCC_GetSysClockFreq+0x208>)
 80062c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062c2:	e0d8      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c4:	4b6f      	ldr	r3, [pc, #444]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062ce:	4b6d      	ldr	r3, [pc, #436]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b6a      	ldr	r3, [pc, #424]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	2200      	movs	r2, #0
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
 80062f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062f6:	4622      	mov	r2, r4
 80062f8:	462b      	mov	r3, r5
 80062fa:	f04f 0000 	mov.w	r0, #0
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	0159      	lsls	r1, r3, #5
 8006304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006308:	0150      	lsls	r0, r2, #5
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4621      	mov	r1, r4
 8006310:	1a51      	subs	r1, r2, r1
 8006312:	6139      	str	r1, [r7, #16]
 8006314:	4629      	mov	r1, r5
 8006316:	eb63 0301 	sbc.w	r3, r3, r1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006328:	4659      	mov	r1, fp
 800632a:	018b      	lsls	r3, r1, #6
 800632c:	4651      	mov	r1, sl
 800632e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006332:	4651      	mov	r1, sl
 8006334:	018a      	lsls	r2, r1, #6
 8006336:	4651      	mov	r1, sl
 8006338:	ebb2 0801 	subs.w	r8, r2, r1
 800633c:	4659      	mov	r1, fp
 800633e:	eb63 0901 	sbc.w	r9, r3, r1
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800634e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006356:	4690      	mov	r8, r2
 8006358:	4699      	mov	r9, r3
 800635a:	4623      	mov	r3, r4
 800635c:	eb18 0303 	adds.w	r3, r8, r3
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	462b      	mov	r3, r5
 8006364:	eb49 0303 	adc.w	r3, r9, r3
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006376:	4629      	mov	r1, r5
 8006378:	024b      	lsls	r3, r1, #9
 800637a:	4621      	mov	r1, r4
 800637c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006380:	4621      	mov	r1, r4
 8006382:	024a      	lsls	r2, r1, #9
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638a:	2200      	movs	r2, #0
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006394:	f7fa fb82 	bl	8000a9c <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4613      	mov	r3, r2
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	e058      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a2:	4b38      	ldr	r3, [pc, #224]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	2200      	movs	r2, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	4611      	mov	r1, r2
 80063ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063b2:	623b      	str	r3, [r7, #32]
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	f04f 0000 	mov.w	r0, #0
 80063c4:	f04f 0100 	mov.w	r1, #0
 80063c8:	0159      	lsls	r1, r3, #5
 80063ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ce:	0150      	lsls	r0, r2, #5
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4641      	mov	r1, r8
 80063d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063da:	4649      	mov	r1, r9
 80063dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063f4:	ebb2 040a 	subs.w	r4, r2, sl
 80063f8:	eb63 050b 	sbc.w	r5, r3, fp
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	464b      	mov	r3, r9
 8006418:	eb45 0303 	adc.w	r3, r5, r3
 800641c:	607b      	str	r3, [r7, #4]
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800642a:	4629      	mov	r1, r5
 800642c:	028b      	lsls	r3, r1, #10
 800642e:	4621      	mov	r1, r4
 8006430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006434:	4621      	mov	r1, r4
 8006436:	028a      	lsls	r2, r1, #10
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643e:	2200      	movs	r2, #0
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	61fa      	str	r2, [r7, #28]
 8006444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006448:	f7fa fb28 	bl	8000a9c <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4613      	mov	r3, r2
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_GetSysClockFreq+0x200>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	3301      	adds	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800646e:	e002      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCC_GetSysClockFreq+0x204>)
 8006472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006478:	4618      	mov	r0, r3
 800647a:	3750      	adds	r7, #80	; 0x50
 800647c:	46bd      	mov	sp, r7
 800647e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800
 8006488:	00f42400 	.word	0x00f42400
 800648c:	007a1200 	.word	0x007a1200

08006490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000010 	.word	0x20000010

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064ac:	f7ff fff0 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	; (80064cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800d0a0 	.word	0x0800d0a0

080064d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d4:	f7ff ffdc 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064d8:	4602      	mov	r2, r0
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	0b5b      	lsrs	r3, r3, #13
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	4903      	ldr	r1, [pc, #12]	; (80064f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e6:	5ccb      	ldrb	r3, [r1, r3]
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	0800d0a0 	.word	0x0800d0a0

080064f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006520:	4b69      	ldr	r3, [pc, #420]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4a68      	ldr	r2, [pc, #416]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006526:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800652a:	6093      	str	r3, [r2, #8]
 800652c:	4b66      	ldr	r3, [pc, #408]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	4964      	ldr	r1, [pc, #400]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006542:	2301      	movs	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006552:	4b5d      	ldr	r3, [pc, #372]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	4959      	ldr	r1, [pc, #356]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006570:	d101      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800657e:	2301      	movs	r3, #1
 8006580:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800658e:	4b4e      	ldr	r3, [pc, #312]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	494a      	ldr	r1, [pc, #296]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ac:	d101      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80065ba:	2301      	movs	r3, #1
 80065bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065ca:	2301      	movs	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 808b 	beq.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065dc:	4b3a      	ldr	r3, [pc, #232]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	4a39      	ldr	r2, [pc, #228]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e6:	6413      	str	r3, [r2, #64]	; 0x40
 80065e8:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065f4:	4b35      	ldr	r3, [pc, #212]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a34      	ldr	r2, [pc, #208]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006600:	f7fb ffc0 	bl	8002584 <HAL_GetTick>
 8006604:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006608:	f7fb ffbc 	bl	8002584 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e357      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800661a:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006626:	4b28      	ldr	r3, [pc, #160]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d035      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	429a      	cmp	r2, r3
 8006642:	d02e      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800664e:	4b1e      	ldr	r3, [pc, #120]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006664:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800666c:	4b16      	ldr	r3, [pc, #88]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d114      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fb ff84 	bl	8002584 <HAL_GetTick>
 800667c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	e00a      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006680:	f7fb ff80 	bl	8002584 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f241 3288 	movw	r2, #5000	; 0x1388
 800668e:	4293      	cmp	r3, r2
 8006690:	d901      	bls.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e319      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0ee      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ae:	d111      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066be:	400b      	ands	r3, r1
 80066c0:	4901      	ldr	r1, [pc, #4]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
 80066c6:	e00b      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066c8:	40023800 	.word	0x40023800
 80066cc:	40007000 	.word	0x40007000
 80066d0:	0ffffcff 	.word	0x0ffffcff
 80066d4:	4baa      	ldr	r3, [pc, #680]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4aa9      	ldr	r2, [pc, #676]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066de:	6093      	str	r3, [r2, #8]
 80066e0:	4ba7      	ldr	r3, [pc, #668]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ec:	49a4      	ldr	r1, [pc, #656]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0310 	and.w	r3, r3, #16
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d010      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066fe:	4ba0      	ldr	r3, [pc, #640]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006704:	4a9e      	ldr	r2, [pc, #632]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800670e:	4b9c      	ldr	r3, [pc, #624]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006710:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	4999      	ldr	r1, [pc, #612]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800672c:	4b94      	ldr	r3, [pc, #592]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673a:	4991      	ldr	r1, [pc, #580]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800674e:	4b8c      	ldr	r3, [pc, #560]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800675c:	4988      	ldr	r1, [pc, #544]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006770:	4b83      	ldr	r3, [pc, #524]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677e:	4980      	ldr	r1, [pc, #512]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006792:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	4977      	ldr	r1, [pc, #476]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067b4:	4b72      	ldr	r3, [pc, #456]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	496f      	ldr	r1, [pc, #444]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d6:	4b6a      	ldr	r3, [pc, #424]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f023 020c 	bic.w	r2, r3, #12
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e4:	4966      	ldr	r1, [pc, #408]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067f8:	4b61      	ldr	r3, [pc, #388]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	495e      	ldr	r1, [pc, #376]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800681a:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006820:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	4955      	ldr	r1, [pc, #340]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800683c:	4b50      	ldr	r3, [pc, #320]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	494d      	ldr	r1, [pc, #308]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800685e:	4b48      	ldr	r3, [pc, #288]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	4944      	ldr	r1, [pc, #272]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006880:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006886:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	493c      	ldr	r1, [pc, #240]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068a2:	4b37      	ldr	r3, [pc, #220]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b0:	4933      	ldr	r1, [pc, #204]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068c4:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d2:	492b      	ldr	r1, [pc, #172]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068e6:	4b26      	ldr	r3, [pc, #152]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f4:	4922      	ldr	r1, [pc, #136]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006904:	d101      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006906:	2301      	movs	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006916:	2301      	movs	r3, #1
 8006918:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006934:	4912      	ldr	r1, [pc, #72]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006958:	4909      	ldr	r1, [pc, #36]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d006      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80d9 	beq.w	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006974:	4b02      	ldr	r3, [pc, #8]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a01      	ldr	r2, [pc, #4]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800697a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800697e:	e001      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006980:	40023800 	.word	0x40023800
 8006984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fb fdfd 	bl	8002584 <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800698e:	f7fb fdf9 	bl	8002584 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b64      	cmp	r3, #100	; 0x64
 800699a:	d901      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e194      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069a0:	4b6c      	ldr	r3, [pc, #432]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f0      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d021      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11d      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069c0:	4b64      	ldr	r3, [pc, #400]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ce:	4b61      	ldr	r3, [pc, #388]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d4:	0e1b      	lsrs	r3, r3, #24
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	019a      	lsls	r2, r3, #6
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	431a      	orrs	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	071b      	lsls	r3, r3, #28
 80069f4:	4957      	ldr	r1, [pc, #348]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a10:	d00a      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d02e      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a26:	d129      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a28:	4b4a      	ldr	r3, [pc, #296]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2e:	0c1b      	lsrs	r3, r3, #16
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a36:	4b47      	ldr	r3, [pc, #284]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	0f1b      	lsrs	r3, r3, #28
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	019a      	lsls	r2, r3, #6
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	061b      	lsls	r3, r3, #24
 8006a56:	431a      	orrs	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	071b      	lsls	r3, r3, #28
 8006a5c:	493d      	ldr	r1, [pc, #244]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a64:	4b3b      	ldr	r3, [pc, #236]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a6a:	f023 021f 	bic.w	r2, r3, #31
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	3b01      	subs	r3, #1
 8006a74:	4937      	ldr	r1, [pc, #220]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a88:	4b32      	ldr	r3, [pc, #200]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8e:	0e1b      	lsrs	r3, r3, #24
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9c:	0f1b      	lsrs	r3, r3, #28
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	019a      	lsls	r2, r3, #6
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	071b      	lsls	r3, r3, #28
 8006abc:	4925      	ldr	r1, [pc, #148]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d011      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	019a      	lsls	r2, r3, #6
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	071b      	lsls	r3, r3, #28
 8006aec:	4919      	ldr	r1, [pc, #100]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b00:	f7fb fd40 	bl	8002584 <HAL_GetTick>
 8006b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b08:	f7fb fd3c 	bl	8002584 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b64      	cmp	r3, #100	; 0x64
 8006b14:	d901      	bls.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0d7      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 80cd 	bne.w	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b3a:	f7fb fd23 	bl	8002584 <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b42:	f7fb fd1f 	bl	8002584 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	d903      	bls.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0ba      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006b54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b58:	4b5e      	ldr	r3, [pc, #376]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b64:	d0ed      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d02e      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d12a      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b8e:	4b51      	ldr	r3, [pc, #324]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b9c:	4b4d      	ldr	r3, [pc, #308]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba2:	0f1b      	lsrs	r3, r3, #28
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	019a      	lsls	r2, r3, #6
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	061b      	lsls	r3, r3, #24
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	4944      	ldr	r1, [pc, #272]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006bca:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	493d      	ldr	r1, [pc, #244]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d022      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf8:	d11d      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bfa:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	0e1b      	lsrs	r3, r3, #24
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0e:	0f1b      	lsrs	r3, r3, #28
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	019a      	lsls	r2, r3, #6
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	041b      	lsls	r3, r3, #16
 8006c22:	431a      	orrs	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	071b      	lsls	r3, r3, #28
 8006c2e:	4929      	ldr	r1, [pc, #164]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d028      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c42:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	019a      	lsls	r2, r3, #6
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	061b      	lsls	r3, r3, #24
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	071b      	lsls	r3, r3, #28
 8006c76:	4917      	ldr	r1, [pc, #92]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	4911      	ldr	r1, [pc, #68]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca0:	f7fb fc70 	bl	8002584 <HAL_GetTick>
 8006ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ca8:	f7fb fc6c 	bl	8002584 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b64      	cmp	r3, #100	; 0x64
 8006cb4:	d901      	bls.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e007      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc6:	d1ef      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e049      	b.n	8006d7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fb f928 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 fdea 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e04c      	b.n	8006e3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a26      	ldr	r2, [pc, #152]	; (8006e48 <HAL_TIM_Base_Start+0xc0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d022      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dba:	d01d      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <HAL_TIM_Base_Start+0xc4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d018      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <HAL_TIM_Base_Start+0xc8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d013      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1f      	ldr	r2, [pc, #124]	; (8006e54 <HAL_TIM_Base_Start+0xcc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00e      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <HAL_TIM_Base_Start+0xd0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <HAL_TIM_Base_Start+0xd4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_TIM_Base_Start+0x70>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_TIM_Base_Start+0xd8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d115      	bne.n	8006e24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <HAL_TIM_Base_Start+0xdc>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b06      	cmp	r3, #6
 8006e08:	d015      	beq.n	8006e36 <HAL_TIM_Base_Start+0xae>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e10:	d011      	beq.n	8006e36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e22:	e008      	b.n	8006e36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e000      	b.n	8006e38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40001800 	.word	0x40001800
 8006e64:	00010007 	.word	0x00010007

08006e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e049      	b.n	8006f0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f841 	bl	8006f16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f000 fd22 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	bf0c      	ite	eq
 8006f50:	2301      	moveq	r3, #1
 8006f52:	2300      	movne	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e03c      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d109      	bne.n	8006f72 <HAL_TIM_PWM_Start_DMA+0x46>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e02f      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d109      	bne.n	8006f8c <HAL_TIM_PWM_Start_DMA+0x60>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e022      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b0c      	cmp	r3, #12
 8006f90:	d109      	bne.n	8006fa6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e015      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIM_PWM_Start_DMA+0x94>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e008      	b.n	8006fd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e1a1      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e03c      	b.n	800706e <HAL_TIM_PWM_Start_DMA+0x142>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d109      	bne.n	800700e <HAL_TIM_PWM_Start_DMA+0xe2>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e02f      	b.n	800706e <HAL_TIM_PWM_Start_DMA+0x142>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d109      	bne.n	8007028 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e022      	b.n	800706e <HAL_TIM_PWM_Start_DMA+0x142>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b0c      	cmp	r3, #12
 800702c:	d109      	bne.n	8007042 <HAL_TIM_PWM_Start_DMA+0x116>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	bf0c      	ite	eq
 800703a:	2301      	moveq	r3, #1
 800703c:	2300      	movne	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	e015      	b.n	800706e <HAL_TIM_PWM_Start_DMA+0x142>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b10      	cmp	r3, #16
 8007046:	d109      	bne.n	800705c <HAL_TIM_PWM_Start_DMA+0x130>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	bf0c      	ite	eq
 8007054:	2301      	moveq	r3, #1
 8007056:	2300      	movne	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e008      	b.n	800706e <HAL_TIM_PWM_Start_DMA+0x142>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	bf0c      	ite	eq
 8007068:	2301      	moveq	r3, #1
 800706a:	2300      	movne	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d034      	beq.n	80070dc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_TIM_PWM_Start_DMA+0x152>
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e14d      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <HAL_TIM_PWM_Start_DMA+0x166>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007090:	e026      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x176>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	e01e      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Start_DMA+0x186>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b0:	e016      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b0c      	cmp	r3, #12
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x196>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070c0:	e00e      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070d0:	e006      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070da:	e001      	b.n	80070e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e11e      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }

  switch (Channel)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b0c      	cmp	r3, #12
 80070e4:	f200 80ae 	bhi.w	8007244 <HAL_TIM_PWM_Start_DMA+0x318>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007245 	.word	0x08007245
 80070f8:	08007245 	.word	0x08007245
 80070fc:	08007245 	.word	0x08007245
 8007100:	0800716d 	.word	0x0800716d
 8007104:	08007245 	.word	0x08007245
 8007108:	08007245 	.word	0x08007245
 800710c:	08007245 	.word	0x08007245
 8007110:	080071b5 	.word	0x080071b5
 8007114:	08007245 	.word	0x08007245
 8007118:	08007245 	.word	0x08007245
 800711c:	08007245 	.word	0x08007245
 8007120:	080071fd 	.word	0x080071fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	4a7f      	ldr	r2, [pc, #508]	; (8007328 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4a7e      	ldr	r2, [pc, #504]	; (800732c <HAL_TIM_PWM_Start_DMA+0x400>)
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	4a7d      	ldr	r2, [pc, #500]	; (8007330 <HAL_TIM_PWM_Start_DMA+0x404>)
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3334      	adds	r3, #52	; 0x34
 8007148:	461a      	mov	r2, r3
 800714a:	887b      	ldrh	r3, [r7, #2]
 800714c:	f7fc f8d2 	bl	80032f4 <HAL_DMA_Start_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e0e1      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007168:	60da      	str	r2, [r3, #12]
      break;
 800716a:	e06e      	b.n	800724a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	4a6d      	ldr	r2, [pc, #436]	; (8007328 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8007172:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	4a6c      	ldr	r2, [pc, #432]	; (800732c <HAL_TIM_PWM_Start_DMA+0x400>)
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	4a6b      	ldr	r2, [pc, #428]	; (8007330 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3338      	adds	r3, #56	; 0x38
 8007190:	461a      	mov	r2, r3
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	f7fc f8ae 	bl	80032f4 <HAL_DMA_Start_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e0bd      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071b0:	60da      	str	r2, [r3, #12]
      break;
 80071b2:	e04a      	b.n	800724a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a5b      	ldr	r2, [pc, #364]	; (8007328 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80071ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	4a5a      	ldr	r2, [pc, #360]	; (800732c <HAL_TIM_PWM_Start_DMA+0x400>)
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a59      	ldr	r2, [pc, #356]	; (8007330 <HAL_TIM_PWM_Start_DMA+0x404>)
 80071ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	333c      	adds	r3, #60	; 0x3c
 80071d8:	461a      	mov	r2, r3
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	f7fc f88a 	bl	80032f4 <HAL_DMA_Start_IT>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e099      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f8:	60da      	str	r2, [r3, #12]
      break;
 80071fa:	e026      	b.n	800724a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	4a49      	ldr	r2, [pc, #292]	; (8007328 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8007202:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	4a48      	ldr	r2, [pc, #288]	; (800732c <HAL_TIM_PWM_Start_DMA+0x400>)
 800720a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	4a47      	ldr	r2, [pc, #284]	; (8007330 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007212:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3340      	adds	r3, #64	; 0x40
 8007220:	461a      	mov	r2, r3
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	f7fc f866 	bl	80032f4 <HAL_DMA_Start_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e075      	b.n	800731e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007240:	60da      	str	r2, [r3, #12]
      break;
 8007242:	e002      	b.n	800724a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
      break;
 8007248:	bf00      	nop
  }

  if (status == HAL_OK)
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d165      	bne.n	800731c <HAL_TIM_PWM_Start_DMA+0x3f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2201      	movs	r2, #1
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fee1 	bl	8008020 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a34      	ldr	r2, [pc, #208]	; (8007334 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIM_PWM_Start_DMA+0x346>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a32      	ldr	r2, [pc, #200]	; (8007338 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d101      	bne.n	8007276 <HAL_TIM_PWM_Start_DMA+0x34a>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <HAL_TIM_PWM_Start_DMA+0x34c>
 8007276:	2300      	movs	r3, #0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800728a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a28      	ldr	r2, [pc, #160]	; (8007334 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d022      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d01d      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a25      	ldr	r2, [pc, #148]	; (800733c <HAL_TIM_PWM_Start_DMA+0x410>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d018      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a24      	ldr	r2, [pc, #144]	; (8007340 <HAL_TIM_PWM_Start_DMA+0x414>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <HAL_TIM_PWM_Start_DMA+0x418>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00e      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d009      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1e      	ldr	r2, [pc, #120]	; (8007348 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <HAL_TIM_PWM_Start_DMA+0x3b0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1d      	ldr	r2, [pc, #116]	; (800734c <HAL_TIM_PWM_Start_DMA+0x420>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d115      	bne.n	8007308 <HAL_TIM_PWM_Start_DMA+0x3dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <HAL_TIM_PWM_Start_DMA+0x424>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b06      	cmp	r3, #6
 80072ec:	d015      	beq.n	800731a <HAL_TIM_PWM_Start_DMA+0x3ee>
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f4:	d011      	beq.n	800731a <HAL_TIM_PWM_Start_DMA+0x3ee>
      {
        __HAL_TIM_ENABLE(htim);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	e008      	b.n	800731a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e000      	b.n	800731c <HAL_TIM_PWM_Start_DMA+0x3f0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800731c:	7dfb      	ldrb	r3, [r7, #23]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	080077df 	.word	0x080077df
 800732c:	08007887 	.word	0x08007887
 8007330:	0800774d 	.word	0x0800774d
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40014000 	.word	0x40014000
 800734c:	40001800 	.word	0x40001800
 8007350:	00010007 	.word	0x00010007

08007354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800736e:	2302      	movs	r3, #2
 8007370:	e0ff      	b.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b14      	cmp	r3, #20
 800737e:	f200 80f0 	bhi.w	8007562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007563 	.word	0x08007563
 8007390:	08007563 	.word	0x08007563
 8007394:	08007563 	.word	0x08007563
 8007398:	0800741d 	.word	0x0800741d
 800739c:	08007563 	.word	0x08007563
 80073a0:	08007563 	.word	0x08007563
 80073a4:	08007563 	.word	0x08007563
 80073a8:	0800745f 	.word	0x0800745f
 80073ac:	08007563 	.word	0x08007563
 80073b0:	08007563 	.word	0x08007563
 80073b4:	08007563 	.word	0x08007563
 80073b8:	0800749f 	.word	0x0800749f
 80073bc:	08007563 	.word	0x08007563
 80073c0:	08007563 	.word	0x08007563
 80073c4:	08007563 	.word	0x08007563
 80073c8:	080074e1 	.word	0x080074e1
 80073cc:	08007563 	.word	0x08007563
 80073d0:	08007563 	.word	0x08007563
 80073d4:	08007563 	.word	0x08007563
 80073d8:	08007521 	.word	0x08007521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fb24 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0208 	orr.w	r2, r2, #8
 80073f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0204 	bic.w	r2, r2, #4
 8007406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6999      	ldr	r1, [r3, #24]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	619a      	str	r2, [r3, #24]
      break;
 800741a:	e0a5      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fb76 	bl	8007b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6999      	ldr	r1, [r3, #24]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	021a      	lsls	r2, r3, #8
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	619a      	str	r2, [r3, #24]
      break;
 800745c:	e084      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fbcd 	bl	8007c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0208 	orr.w	r2, r2, #8
 8007478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0204 	bic.w	r2, r2, #4
 8007488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69d9      	ldr	r1, [r3, #28]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	61da      	str	r2, [r3, #28]
      break;
 800749c:	e064      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fc23 	bl	8007cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69da      	ldr	r2, [r3, #28]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69d9      	ldr	r1, [r3, #28]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	021a      	lsls	r2, r3, #8
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	61da      	str	r2, [r3, #28]
      break;
 80074de:	e043      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fc5a 	bl	8007da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0208 	orr.w	r2, r2, #8
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0204 	bic.w	r2, r2, #4
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800751e:	e023      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fc8c 	bl	8007e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800753a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	021a      	lsls	r2, r3, #8
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007560:	e002      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
      break;
 8007566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop

0800757c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_TIM_ConfigClockSource+0x1c>
 8007594:	2302      	movs	r3, #2
 8007596:	e0b4      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x186>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	4b56      	ldr	r3, [pc, #344]	; (800770c <HAL_TIM_ConfigClockSource+0x190>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d0:	d03e      	beq.n	8007650 <HAL_TIM_ConfigClockSource+0xd4>
 80075d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d6:	f200 8087 	bhi.w	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075de:	f000 8086 	beq.w	80076ee <HAL_TIM_ConfigClockSource+0x172>
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e6:	d87f      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b70      	cmp	r3, #112	; 0x70
 80075ea:	d01a      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xa6>
 80075ec:	2b70      	cmp	r3, #112	; 0x70
 80075ee:	d87b      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f0:	2b60      	cmp	r3, #96	; 0x60
 80075f2:	d050      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0x11a>
 80075f4:	2b60      	cmp	r3, #96	; 0x60
 80075f6:	d877      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f8:	2b50      	cmp	r3, #80	; 0x50
 80075fa:	d03c      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0xfa>
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d873      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d058      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d86f      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007608:	2b30      	cmp	r3, #48	; 0x30
 800760a:	d064      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 800760c:	2b30      	cmp	r3, #48	; 0x30
 800760e:	d86b      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007610:	2b20      	cmp	r3, #32
 8007612:	d060      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d867      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05c      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 800761c:	2b10      	cmp	r3, #16
 800761e:	d05a      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	e062      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007632:	f000 fcd5 	bl	8007fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	609a      	str	r2, [r3, #8]
      break;
 800764e:	e04f      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007660:	f000 fcbe 	bl	8007fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007672:	609a      	str	r2, [r3, #8]
      break;
 8007674:	e03c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007682:	461a      	mov	r2, r3
 8007684:	f000 fc32 	bl	8007eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2150      	movs	r1, #80	; 0x50
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fc8b 	bl	8007faa <TIM_ITRx_SetConfig>
      break;
 8007694:	e02c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a2:	461a      	mov	r2, r3
 80076a4:	f000 fc51 	bl	8007f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2160      	movs	r1, #96	; 0x60
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fc7b 	bl	8007faa <TIM_ITRx_SetConfig>
      break;
 80076b4:	e01c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c2:	461a      	mov	r2, r3
 80076c4:	f000 fc12 	bl	8007eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2140      	movs	r1, #64	; 0x40
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fc6b 	bl	8007faa <TIM_ITRx_SetConfig>
      break;
 80076d4:	e00c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f000 fc62 	bl	8007faa <TIM_ITRx_SetConfig>
      break;
 80076e6:	e003      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
      break;
 80076ec:	e000      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	fffeff88 	.word	0xfffeff88

08007710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d107      	bne.n	8007774 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007772:	e02a      	b.n	80077ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d107      	bne.n	800778e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2202      	movs	r2, #2
 8007782:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800778c:	e01d      	b.n	80077ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d107      	bne.n	80077a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2204      	movs	r2, #4
 800779c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a6:	e010      	b.n	80077ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d107      	bne.n	80077c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2208      	movs	r2, #8
 80077b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077c0:	e003      	b.n	80077ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff ffb4 	bl	8007738 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	771a      	strb	r2, [r3, #28]
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d10b      	bne.n	800780e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d136      	bne.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	e031      	b.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d10b      	bne.n	8007830 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2202      	movs	r2, #2
 800781c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d125      	bne.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800782e:	e020      	b.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d10b      	bne.n	8007852 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2204      	movs	r2, #4
 800783e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d114      	bne.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	e00f      	b.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d10a      	bne.n	8007872 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2208      	movs	r2, #8
 8007860:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff ff4c 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	771a      	strb	r2, [r3, #28]
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d103      	bne.n	80078a6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	771a      	strb	r2, [r3, #28]
 80078a4:	e019      	b.n	80078da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d103      	bne.n	80078b8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2202      	movs	r2, #2
 80078b4:	771a      	strb	r2, [r3, #28]
 80078b6:	e010      	b.n	80078da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d103      	bne.n	80078ca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2204      	movs	r2, #4
 80078c6:	771a      	strb	r2, [r3, #28]
 80078c8:	e007      	b.n	80078da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d102      	bne.n	80078da <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2208      	movs	r2, #8
 80078d8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff ff22 	bl	8007724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	771a      	strb	r2, [r3, #28]
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a40      	ldr	r2, [pc, #256]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d00f      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a3d      	ldr	r2, [pc, #244]	; (8007a08 <TIM_Base_SetConfig+0x118>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00b      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a3c      	ldr	r2, [pc, #240]	; (8007a0c <TIM_Base_SetConfig+0x11c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d007      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3b      	ldr	r2, [pc, #236]	; (8007a10 <TIM_Base_SetConfig+0x120>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3a      	ldr	r2, [pc, #232]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d02b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007950:	d027      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2c      	ldr	r2, [pc, #176]	; (8007a08 <TIM_Base_SetConfig+0x118>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d023      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2b      	ldr	r2, [pc, #172]	; (8007a0c <TIM_Base_SetConfig+0x11c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01f      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <TIM_Base_SetConfig+0x120>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d017      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <TIM_Base_SetConfig+0x128>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a27      	ldr	r2, [pc, #156]	; (8007a1c <TIM_Base_SetConfig+0x12c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a26      	ldr	r2, [pc, #152]	; (8007a20 <TIM_Base_SetConfig+0x130>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a25      	ldr	r2, [pc, #148]	; (8007a24 <TIM_Base_SetConfig+0x134>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a24      	ldr	r2, [pc, #144]	; (8007a28 <TIM_Base_SetConfig+0x138>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <TIM_Base_SetConfig+0x13c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d103      	bne.n	80079f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800
 8007a24:	40001800 	.word	0x40001800
 8007a28:	40001c00 	.word	0x40001c00
 8007a2c:	40002000 	.word	0x40002000

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f023 0201 	bic.w	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <TIM_OC1_SetConfig+0xd8>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a21      	ldr	r2, [pc, #132]	; (8007b0c <TIM_OC1_SetConfig+0xdc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC1_SetConfig+0x64>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a20      	ldr	r2, [pc, #128]	; (8007b10 <TIM_OC1_SetConfig+0xe0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10c      	bne.n	8007aae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0308 	bic.w	r3, r3, #8
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 0304 	bic.w	r3, r3, #4
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <TIM_OC1_SetConfig+0xdc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_OC1_SetConfig+0x8e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <TIM_OC1_SetConfig+0xe0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d111      	bne.n	8007ae2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	fffeff8f 	.word	0xfffeff8f
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	f023 0210 	bic.w	r2, r3, #16
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4b2e      	ldr	r3, [pc, #184]	; (8007bf8 <TIM_OC2_SetConfig+0xe4>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0320 	bic.w	r3, r3, #32
 8007b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a23      	ldr	r2, [pc, #140]	; (8007bfc <TIM_OC2_SetConfig+0xe8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC2_SetConfig+0x68>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <TIM_OC2_SetConfig+0xec>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d10d      	bne.n	8007b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <TIM_OC2_SetConfig+0xe8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC2_SetConfig+0x94>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <TIM_OC2_SetConfig+0xec>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d113      	bne.n	8007bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	feff8fff 	.word	0xfeff8fff
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40010400 	.word	0x40010400

08007c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ce4 <TIM_OC3_SetConfig+0xe0>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a22      	ldr	r2, [pc, #136]	; (8007ce8 <TIM_OC3_SetConfig+0xe4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d003      	beq.n	8007c6a <TIM_OC3_SetConfig+0x66>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a21      	ldr	r2, [pc, #132]	; (8007cec <TIM_OC3_SetConfig+0xe8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10d      	bne.n	8007c86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	021b      	lsls	r3, r3, #8
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <TIM_OC3_SetConfig+0xe4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0x92>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <TIM_OC3_SetConfig+0xe8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d113      	bne.n	8007cbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	fffeff8f 	.word	0xfffeff8f
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <TIM_OC4_SetConfig+0xa4>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	031b      	lsls	r3, r3, #12
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <TIM_OC4_SetConfig+0xa8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC4_SetConfig+0x68>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <TIM_OC4_SetConfig+0xac>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	019b      	lsls	r3, r3, #6
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	feff8fff 	.word	0xfeff8fff
 8007d98:	40010000 	.word	0x40010000
 8007d9c:	40010400 	.word	0x40010400

08007da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <TIM_OC5_SetConfig+0x98>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a12      	ldr	r2, [pc, #72]	; (8007e3c <TIM_OC5_SetConfig+0x9c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC5_SetConfig+0x5e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a11      	ldr	r2, [pc, #68]	; (8007e40 <TIM_OC5_SetConfig+0xa0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d109      	bne.n	8007e12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	621a      	str	r2, [r3, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	fffeff8f 	.word	0xfffeff8f
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40010400 	.word	0x40010400

08007e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <TIM_OC6_SetConfig+0x9c>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <TIM_OC6_SetConfig+0xa0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x60>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <TIM_OC6_SetConfig+0xa4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d109      	bne.n	8007eb8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	029b      	lsls	r3, r3, #10
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	feff8fff 	.word	0xfeff8fff
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40010400 	.word	0x40010400

08007eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f023 0201 	bic.w	r2, r3, #1
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f023 030a 	bic.w	r3, r3, #10
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f023 0210 	bic.w	r2, r3, #16
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	031b      	lsls	r3, r3, #12
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	621a      	str	r2, [r3, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f043 0307 	orr.w	r3, r3, #7
 8007fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	021a      	lsls	r2, r3, #8
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	431a      	orrs	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	4313      	orrs	r3, r2
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	2201      	movs	r2, #1
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1a      	ldr	r2, [r3, #32]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	fa01 f303 	lsl.w	r3, r1, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008080:	2302      	movs	r3, #2
 8008082:	e06d      	b.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a30      	ldr	r2, [pc, #192]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2f      	ldr	r2, [pc, #188]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d108      	bne.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a20      	ldr	r2, [pc, #128]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d022      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d01d      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d018      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d013      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1a      	ldr	r2, [pc, #104]	; (800817c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d00e      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d009      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a16      	ldr	r2, [pc, #88]	; (8008180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d004      	beq.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a15      	ldr	r2, [pc, #84]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d10c      	bne.n	800814e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4313      	orrs	r3, r2
 8008144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40014000 	.word	0x40014000
 8008184:	40001800 	.word	0x40001800

08008188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e040      	b.n	800821c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f9 ff70 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	; 0x24
 80081b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0201 	bic.w	r2, r2, #1
 80081c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc66 	bl	8008a98 <UART_SetConfig>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e022      	b.n	800821c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 febe 	bl	8008f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff45 	bl	80090a4 <UART_CheckIdleState>
 800821a:	4603      	mov	r3, r0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af02      	add	r7, sp, #8
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008238:	2b20      	cmp	r3, #32
 800823a:	d171      	bne.n	8008320 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_UART_Transmit+0x24>
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e06a      	b.n	8008322 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2221      	movs	r2, #33	; 0x21
 8008258:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800825a:	f7fa f993 	bl	8002584 <HAL_GetTick>
 800825e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	88fa      	ldrh	r2, [r7, #6]
 800826c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008278:	d108      	bne.n	800828c <HAL_UART_Transmit+0x68>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	e003      	b.n	8008294 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008294:	e02c      	b.n	80082f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2200      	movs	r2, #0
 800829e:	2180      	movs	r1, #128	; 0x80
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 ff36 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e038      	b.n	8008322 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	3302      	adds	r3, #2
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	e007      	b.n	80082de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1cc      	bne.n	8008296 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	2140      	movs	r1, #64	; 0x40
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 ff03 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e005      	b.n	8008322 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e000      	b.n	8008322 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08a      	sub	sp, #40	; 0x28
 800832e:	af02      	add	r7, sp, #8
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008340:	2b20      	cmp	r3, #32
 8008342:	f040 80b1 	bne.w	80084a8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <HAL_UART_Receive+0x28>
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e0a9      	b.n	80084aa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2222      	movs	r2, #34	; 0x22
 8008362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800836c:	f7fa f90a 	bl	8002584 <HAL_GetTick>
 8008370:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	88fa      	ldrh	r2, [r7, #6]
 8008376:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838a:	d10e      	bne.n	80083aa <HAL_UART_Receive+0x80>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <HAL_UART_Receive+0x76>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f240 12ff 	movw	r2, #511	; 0x1ff
 800839a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800839e:	e02d      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	22ff      	movs	r2, #255	; 0xff
 80083a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083a8:	e028      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <HAL_UART_Receive+0xa4>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d104      	bne.n	80083c4 <HAL_UART_Receive+0x9a>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	22ff      	movs	r2, #255	; 0xff
 80083be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083c2:	e01b      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	227f      	movs	r2, #127	; 0x7f
 80083c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083cc:	e016      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d6:	d10d      	bne.n	80083f4 <HAL_UART_Receive+0xca>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_UART_Receive+0xc0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	227f      	movs	r2, #127	; 0x7f
 80083e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083e8:	e008      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	223f      	movs	r2, #63	; 0x3f
 80083ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f2:	e003      	b.n	80083fc <HAL_UART_Receive+0xd2>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008402:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d108      	bne.n	8008420 <HAL_UART_Receive+0xf6>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d104      	bne.n	8008420 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e003      	b.n	8008428 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008428:	e032      	b.n	8008490 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	2120      	movs	r1, #32
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fe6c 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e032      	b.n	80084aa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10c      	bne.n	8008464 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	b29a      	uxth	r2, r3
 8008452:	8a7b      	ldrh	r3, [r7, #18]
 8008454:	4013      	ands	r3, r2
 8008456:	b29a      	uxth	r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	3302      	adds	r3, #2
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e00c      	b.n	800847e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	b2da      	uxtb	r2, r3
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	4013      	ands	r3, r2
 8008472:	b2da      	uxtb	r2, r3
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	3301      	adds	r3, #1
 800847c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008496:	b29b      	uxth	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1c6      	bne.n	800842a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	e000      	b.n	80084aa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80084a8:	2302      	movs	r3, #2
  }
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3720      	adds	r7, #32
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b0ba      	sub	sp, #232	; 0xe8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80084de:	f640 030f 	movw	r3, #2063	; 0x80f
 80084e2:	4013      	ands	r3, r2
 80084e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80084e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d115      	bne.n	800851c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00f      	beq.n	800851c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8297 	beq.w	8008a40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
      }
      return;
 800851a:	e291      	b.n	8008a40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800851c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8117 	beq.w	8008754 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008536:	4b85      	ldr	r3, [pc, #532]	; (800874c <HAL_UART_IRQHandler+0x298>)
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 810a 	beq.w	8008754 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d011      	beq.n	8008570 <HAL_UART_IRQHandler+0xbc>
 800854c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008566:	f043 0201 	orr.w	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d011      	beq.n	80085a0 <HAL_UART_IRQHandler+0xec>
 800857c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2202      	movs	r2, #2
 800858e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008596:	f043 0204 	orr.w	r2, r3, #4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d011      	beq.n	80085d0 <HAL_UART_IRQHandler+0x11c>
 80085ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2204      	movs	r2, #4
 80085be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c6:	f043 0202 	orr.w	r2, r3, #2
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d017      	beq.n	800860c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2208      	movs	r2, #8
 80085fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008602:	f043 0208 	orr.w	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008614:	2b00      	cmp	r3, #0
 8008616:	d012      	beq.n	800863e <HAL_UART_IRQHandler+0x18a>
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800862c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 81fd 	beq.w	8008a44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d005      	beq.n	8008696 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800868a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800868e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008692:	2b00      	cmp	r3, #0
 8008694:	d04f      	beq.n	8008736 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fe01 	bl	800929e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d141      	bne.n	800872e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1d9      	bne.n	80086aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d013      	beq.n	8008726 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008702:	4a13      	ldr	r2, [pc, #76]	; (8008750 <HAL_UART_IRQHandler+0x29c>)
 8008704:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870a:	4618      	mov	r0, r3
 800870c:	f7fa fec2 	bl	8003494 <HAL_DMA_Abort_IT>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d017      	beq.n	8008746 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	e00f      	b.n	8008746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9a0 	bl	8008a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872c:	e00b      	b.n	8008746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f99c 	bl	8008a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008734:	e007      	b.n	8008746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f998 	bl	8008a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008744:	e17e      	b.n	8008a44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008746:	bf00      	nop
    return;
 8008748:	e17c      	b.n	8008a44 <HAL_UART_IRQHandler+0x590>
 800874a:	bf00      	nop
 800874c:	04000120 	.word	0x04000120
 8008750:	08009367 	.word	0x08009367

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008758:	2b01      	cmp	r3, #1
 800875a:	f040 814c 	bne.w	80089f6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8145 	beq.w	80089f6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800876c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008770:	f003 0310 	and.w	r3, r3, #16
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 813e 	beq.w	80089f6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2210      	movs	r2, #16
 8008780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878c:	2b40      	cmp	r3, #64	; 0x40
 800878e:	f040 80b6 	bne.w	80088fe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800879e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8150 	beq.w	8008a48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087b2:	429a      	cmp	r2, r3
 80087b4:	f080 8148 	bcs.w	8008a48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087cc:	f000 8086 	beq.w	80088dc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1da      	bne.n	80087d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800882a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800883e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e1      	bne.n	800881a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800887a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800887c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e3      	bne.n	8008856 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088be:	65bb      	str	r3, [r7, #88]	; 0x58
 80088c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e4      	bne.n	800889c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fa fd6c 	bl	80033b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8c2 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088fc:	e0a4      	b.n	8008a48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800890a:	b29b      	uxth	r3, r3
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8096 	beq.w	8008a4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8091 	beq.w	8008a4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800893e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800894c:	647b      	str	r3, [r7, #68]	; 0x44
 800894e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800895a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e4      	bne.n	800892a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	623b      	str	r3, [r7, #32]
   return(result);
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3308      	adds	r3, #8
 8008980:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008984:	633a      	str	r2, [r7, #48]	; 0x30
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800898a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e3      	bne.n	8008960 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f023 0310 	bic.w	r3, r3, #16
 80089c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	461a      	mov	r2, r3
 80089ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	69b9      	ldr	r1, [r7, #24]
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	617b      	str	r3, [r7, #20]
   return(result);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e4      	bne.n	80089ac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f846 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089f4:	e02a      	b.n	8008a4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01c      	beq.n	8008a50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
    }
    return;
 8008a1e:	e017      	b.n	8008a50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d012      	beq.n	8008a52 <HAL_UART_IRQHandler+0x59e>
 8008a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00c      	beq.n	8008a52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fcaa 	bl	8009392 <UART_EndTransmit_IT>
    return;
 8008a3e:	e008      	b.n	8008a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a40:	bf00      	nop
 8008a42:	e006      	b.n	8008a52 <HAL_UART_IRQHandler+0x59e>
    return;
 8008a44:	bf00      	nop
 8008a46:	e004      	b.n	8008a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a48:	bf00      	nop
 8008a4a:	e002      	b.n	8008a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a4c:	bf00      	nop
 8008a4e:	e000      	b.n	8008a52 <HAL_UART_IRQHandler+0x59e>
    return;
 8008a50:	bf00      	nop
  }

}
 8008a52:	37e8      	adds	r7, #232	; 0xe8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4ba6      	ldr	r3, [pc, #664]	; (8008d5c <UART_SetConfig+0x2c4>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	6979      	ldr	r1, [r7, #20]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a94      	ldr	r2, [pc, #592]	; (8008d60 <UART_SetConfig+0x2c8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d120      	bne.n	8008b56 <UART_SetConfig+0xbe>
 8008b14:	4b93      	ldr	r3, [pc, #588]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d816      	bhi.n	8008b50 <UART_SetConfig+0xb8>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <UART_SetConfig+0x90>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b45 	.word	0x08008b45
 8008b30:	08008b3f 	.word	0x08008b3f
 8008b34:	08008b4b 	.word	0x08008b4b
 8008b38:	2301      	movs	r3, #1
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	e150      	b.n	8008de0 <UART_SetConfig+0x348>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	77fb      	strb	r3, [r7, #31]
 8008b42:	e14d      	b.n	8008de0 <UART_SetConfig+0x348>
 8008b44:	2304      	movs	r3, #4
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e14a      	b.n	8008de0 <UART_SetConfig+0x348>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e147      	b.n	8008de0 <UART_SetConfig+0x348>
 8008b50:	2310      	movs	r3, #16
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e144      	b.n	8008de0 <UART_SetConfig+0x348>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a83      	ldr	r2, [pc, #524]	; (8008d68 <UART_SetConfig+0x2d0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d132      	bne.n	8008bc6 <UART_SetConfig+0x12e>
 8008b60:	4b80      	ldr	r3, [pc, #512]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b66:	f003 030c 	and.w	r3, r3, #12
 8008b6a:	2b0c      	cmp	r3, #12
 8008b6c:	d828      	bhi.n	8008bc0 <UART_SetConfig+0x128>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <UART_SetConfig+0xdc>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008ba9 	.word	0x08008ba9
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bc1 	.word	0x08008bc1
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008bc1 	.word	0x08008bc1
 8008b94:	08008baf 	.word	0x08008baf
 8008b98:	08008bc1 	.word	0x08008bc1
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bbb 	.word	0x08008bbb
 8008ba8:	2300      	movs	r3, #0
 8008baa:	77fb      	strb	r3, [r7, #31]
 8008bac:	e118      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	77fb      	strb	r3, [r7, #31]
 8008bb2:	e115      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	77fb      	strb	r3, [r7, #31]
 8008bb8:	e112      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bba:	2308      	movs	r3, #8
 8008bbc:	77fb      	strb	r3, [r7, #31]
 8008bbe:	e10f      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	77fb      	strb	r3, [r7, #31]
 8008bc4:	e10c      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a68      	ldr	r2, [pc, #416]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d120      	bne.n	8008c12 <UART_SetConfig+0x17a>
 8008bd0:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bda:	2b30      	cmp	r3, #48	; 0x30
 8008bdc:	d013      	beq.n	8008c06 <UART_SetConfig+0x16e>
 8008bde:	2b30      	cmp	r3, #48	; 0x30
 8008be0:	d814      	bhi.n	8008c0c <UART_SetConfig+0x174>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d009      	beq.n	8008bfa <UART_SetConfig+0x162>
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d810      	bhi.n	8008c0c <UART_SetConfig+0x174>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <UART_SetConfig+0x15c>
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d006      	beq.n	8008c00 <UART_SetConfig+0x168>
 8008bf2:	e00b      	b.n	8008c0c <UART_SetConfig+0x174>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e0f2      	b.n	8008de0 <UART_SetConfig+0x348>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	77fb      	strb	r3, [r7, #31]
 8008bfe:	e0ef      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c00:	2304      	movs	r3, #4
 8008c02:	77fb      	strb	r3, [r7, #31]
 8008c04:	e0ec      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c06:	2308      	movs	r3, #8
 8008c08:	77fb      	strb	r3, [r7, #31]
 8008c0a:	e0e9      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	e0e6      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a56      	ldr	r2, [pc, #344]	; (8008d70 <UART_SetConfig+0x2d8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d120      	bne.n	8008c5e <UART_SetConfig+0x1c6>
 8008c1c:	4b51      	ldr	r3, [pc, #324]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c26:	2bc0      	cmp	r3, #192	; 0xc0
 8008c28:	d013      	beq.n	8008c52 <UART_SetConfig+0x1ba>
 8008c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c2c:	d814      	bhi.n	8008c58 <UART_SetConfig+0x1c0>
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d009      	beq.n	8008c46 <UART_SetConfig+0x1ae>
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d810      	bhi.n	8008c58 <UART_SetConfig+0x1c0>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <UART_SetConfig+0x1a8>
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d006      	beq.n	8008c4c <UART_SetConfig+0x1b4>
 8008c3e:	e00b      	b.n	8008c58 <UART_SetConfig+0x1c0>
 8008c40:	2300      	movs	r3, #0
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e0cc      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c46:	2302      	movs	r3, #2
 8008c48:	77fb      	strb	r3, [r7, #31]
 8008c4a:	e0c9      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	77fb      	strb	r3, [r7, #31]
 8008c50:	e0c6      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c52:	2308      	movs	r3, #8
 8008c54:	77fb      	strb	r3, [r7, #31]
 8008c56:	e0c3      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	77fb      	strb	r3, [r7, #31]
 8008c5c:	e0c0      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a44      	ldr	r2, [pc, #272]	; (8008d74 <UART_SetConfig+0x2dc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d125      	bne.n	8008cb4 <UART_SetConfig+0x21c>
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c76:	d017      	beq.n	8008ca8 <UART_SetConfig+0x210>
 8008c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c7c:	d817      	bhi.n	8008cae <UART_SetConfig+0x216>
 8008c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c82:	d00b      	beq.n	8008c9c <UART_SetConfig+0x204>
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c88:	d811      	bhi.n	8008cae <UART_SetConfig+0x216>
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <UART_SetConfig+0x1fe>
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c92:	d006      	beq.n	8008ca2 <UART_SetConfig+0x20a>
 8008c94:	e00b      	b.n	8008cae <UART_SetConfig+0x216>
 8008c96:	2300      	movs	r3, #0
 8008c98:	77fb      	strb	r3, [r7, #31]
 8008c9a:	e0a1      	b.n	8008de0 <UART_SetConfig+0x348>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	e09e      	b.n	8008de0 <UART_SetConfig+0x348>
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	77fb      	strb	r3, [r7, #31]
 8008ca6:	e09b      	b.n	8008de0 <UART_SetConfig+0x348>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	77fb      	strb	r3, [r7, #31]
 8008cac:	e098      	b.n	8008de0 <UART_SetConfig+0x348>
 8008cae:	2310      	movs	r3, #16
 8008cb0:	77fb      	strb	r3, [r7, #31]
 8008cb2:	e095      	b.n	8008de0 <UART_SetConfig+0x348>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a2f      	ldr	r2, [pc, #188]	; (8008d78 <UART_SetConfig+0x2e0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d125      	bne.n	8008d0a <UART_SetConfig+0x272>
 8008cbe:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ccc:	d017      	beq.n	8008cfe <UART_SetConfig+0x266>
 8008cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cd2:	d817      	bhi.n	8008d04 <UART_SetConfig+0x26c>
 8008cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cd8:	d00b      	beq.n	8008cf2 <UART_SetConfig+0x25a>
 8008cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cde:	d811      	bhi.n	8008d04 <UART_SetConfig+0x26c>
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <UART_SetConfig+0x254>
 8008ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce8:	d006      	beq.n	8008cf8 <UART_SetConfig+0x260>
 8008cea:	e00b      	b.n	8008d04 <UART_SetConfig+0x26c>
 8008cec:	2301      	movs	r3, #1
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e076      	b.n	8008de0 <UART_SetConfig+0x348>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	77fb      	strb	r3, [r7, #31]
 8008cf6:	e073      	b.n	8008de0 <UART_SetConfig+0x348>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	77fb      	strb	r3, [r7, #31]
 8008cfc:	e070      	b.n	8008de0 <UART_SetConfig+0x348>
 8008cfe:	2308      	movs	r3, #8
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e06d      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d04:	2310      	movs	r3, #16
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e06a      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <UART_SetConfig+0x2e4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d138      	bne.n	8008d86 <UART_SetConfig+0x2ee>
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d22:	d017      	beq.n	8008d54 <UART_SetConfig+0x2bc>
 8008d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d28:	d82a      	bhi.n	8008d80 <UART_SetConfig+0x2e8>
 8008d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2e:	d00b      	beq.n	8008d48 <UART_SetConfig+0x2b0>
 8008d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d34:	d824      	bhi.n	8008d80 <UART_SetConfig+0x2e8>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <UART_SetConfig+0x2aa>
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3e:	d006      	beq.n	8008d4e <UART_SetConfig+0x2b6>
 8008d40:	e01e      	b.n	8008d80 <UART_SetConfig+0x2e8>
 8008d42:	2300      	movs	r3, #0
 8008d44:	77fb      	strb	r3, [r7, #31]
 8008d46:	e04b      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	77fb      	strb	r3, [r7, #31]
 8008d4c:	e048      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d4e:	2304      	movs	r3, #4
 8008d50:	77fb      	strb	r3, [r7, #31]
 8008d52:	e045      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d54:	2308      	movs	r3, #8
 8008d56:	77fb      	strb	r3, [r7, #31]
 8008d58:	e042      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d5a:	bf00      	nop
 8008d5c:	efff69f3 	.word	0xefff69f3
 8008d60:	40011000 	.word	0x40011000
 8008d64:	40023800 	.word	0x40023800
 8008d68:	40004400 	.word	0x40004400
 8008d6c:	40004800 	.word	0x40004800
 8008d70:	40004c00 	.word	0x40004c00
 8008d74:	40005000 	.word	0x40005000
 8008d78:	40011400 	.word	0x40011400
 8008d7c:	40007800 	.word	0x40007800
 8008d80:	2310      	movs	r3, #16
 8008d82:	77fb      	strb	r3, [r7, #31]
 8008d84:	e02c      	b.n	8008de0 <UART_SetConfig+0x348>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a72      	ldr	r2, [pc, #456]	; (8008f54 <UART_SetConfig+0x4bc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d125      	bne.n	8008ddc <UART_SetConfig+0x344>
 8008d90:	4b71      	ldr	r3, [pc, #452]	; (8008f58 <UART_SetConfig+0x4c0>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d9e:	d017      	beq.n	8008dd0 <UART_SetConfig+0x338>
 8008da0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008da4:	d817      	bhi.n	8008dd6 <UART_SetConfig+0x33e>
 8008da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008daa:	d00b      	beq.n	8008dc4 <UART_SetConfig+0x32c>
 8008dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db0:	d811      	bhi.n	8008dd6 <UART_SetConfig+0x33e>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <UART_SetConfig+0x326>
 8008db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dba:	d006      	beq.n	8008dca <UART_SetConfig+0x332>
 8008dbc:	e00b      	b.n	8008dd6 <UART_SetConfig+0x33e>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	77fb      	strb	r3, [r7, #31]
 8008dc2:	e00d      	b.n	8008de0 <UART_SetConfig+0x348>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	77fb      	strb	r3, [r7, #31]
 8008dc8:	e00a      	b.n	8008de0 <UART_SetConfig+0x348>
 8008dca:	2304      	movs	r3, #4
 8008dcc:	77fb      	strb	r3, [r7, #31]
 8008dce:	e007      	b.n	8008de0 <UART_SetConfig+0x348>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	77fb      	strb	r3, [r7, #31]
 8008dd4:	e004      	b.n	8008de0 <UART_SetConfig+0x348>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	77fb      	strb	r3, [r7, #31]
 8008dda:	e001      	b.n	8008de0 <UART_SetConfig+0x348>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de8:	d15b      	bne.n	8008ea2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008dea:	7ffb      	ldrb	r3, [r7, #31]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d828      	bhi.n	8008e42 <UART_SetConfig+0x3aa>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <UART_SetConfig+0x360>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e25 	.word	0x08008e25
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	08008e43 	.word	0x08008e43
 8008e08:	08008e33 	.word	0x08008e33
 8008e0c:	08008e43 	.word	0x08008e43
 8008e10:	08008e43 	.word	0x08008e43
 8008e14:	08008e43 	.word	0x08008e43
 8008e18:	08008e3b 	.word	0x08008e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e1c:	f7fd fb44 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8008e20:	61b8      	str	r0, [r7, #24]
        break;
 8008e22:	e013      	b.n	8008e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e24:	f7fd fb54 	bl	80064d0 <HAL_RCC_GetPCLK2Freq>
 8008e28:	61b8      	str	r0, [r7, #24]
        break;
 8008e2a:	e00f      	b.n	8008e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e2c:	4b4b      	ldr	r3, [pc, #300]	; (8008f5c <UART_SetConfig+0x4c4>)
 8008e2e:	61bb      	str	r3, [r7, #24]
        break;
 8008e30:	e00c      	b.n	8008e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fd fa27 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8008e36:	61b8      	str	r0, [r7, #24]
        break;
 8008e38:	e008      	b.n	8008e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	61bb      	str	r3, [r7, #24]
        break;
 8008e40:	e004      	b.n	8008e4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	77bb      	strb	r3, [r7, #30]
        break;
 8008e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d074      	beq.n	8008f3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	005a      	lsls	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	441a      	add	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	2b0f      	cmp	r3, #15
 8008e6c:	d916      	bls.n	8008e9c <UART_SetConfig+0x404>
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e74:	d212      	bcs.n	8008e9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f023 030f 	bic.w	r3, r3, #15
 8008e7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	89fb      	ldrh	r3, [r7, #14]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	89fa      	ldrh	r2, [r7, #14]
 8008e98:	60da      	str	r2, [r3, #12]
 8008e9a:	e04f      	b.n	8008f3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	77bb      	strb	r3, [r7, #30]
 8008ea0:	e04c      	b.n	8008f3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ea2:	7ffb      	ldrb	r3, [r7, #31]
 8008ea4:	2b08      	cmp	r3, #8
 8008ea6:	d828      	bhi.n	8008efa <UART_SetConfig+0x462>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x418>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	08008efb 	.word	0x08008efb
 8008ec0:	08008eeb 	.word	0x08008eeb
 8008ec4:	08008efb 	.word	0x08008efb
 8008ec8:	08008efb 	.word	0x08008efb
 8008ecc:	08008efb 	.word	0x08008efb
 8008ed0:	08008ef3 	.word	0x08008ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed4:	f7fd fae8 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8008ed8:	61b8      	str	r0, [r7, #24]
        break;
 8008eda:	e013      	b.n	8008f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008edc:	f7fd faf8 	bl	80064d0 <HAL_RCC_GetPCLK2Freq>
 8008ee0:	61b8      	str	r0, [r7, #24]
        break;
 8008ee2:	e00f      	b.n	8008f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee4:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <UART_SetConfig+0x4c4>)
 8008ee6:	61bb      	str	r3, [r7, #24]
        break;
 8008ee8:	e00c      	b.n	8008f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eea:	f7fd f9cb 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8008eee:	61b8      	str	r0, [r7, #24]
        break;
 8008ef0:	e008      	b.n	8008f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ef6:	61bb      	str	r3, [r7, #24]
        break;
 8008ef8:	e004      	b.n	8008f04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	77bb      	strb	r3, [r7, #30]
        break;
 8008f02:	bf00      	nop
    }

    if (pclk != 0U)
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d018      	beq.n	8008f3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	085a      	lsrs	r2, r3, #1
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	441a      	add	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b0f      	cmp	r3, #15
 8008f22:	d909      	bls.n	8008f38 <UART_SetConfig+0x4a0>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2a:	d205      	bcs.n	8008f38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	e001      	b.n	8008f3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40007c00 	.word	0x40007c00
 8008f58:	40023800 	.word	0x40023800
 8008f5c:	00f42400 	.word	0x00f42400

08008f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01a      	beq.n	8009076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800905e:	d10a      	bne.n	8009076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	605a      	str	r2, [r3, #4]
  }
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b4:	f7f9 fa66 	bl	8002584 <HAL_GetTick>
 80090b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d10e      	bne.n	80090e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f81b 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e011      	b.n	800910a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b09c      	sub	sp, #112	; 0x70
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009122:	e0a7      	b.n	8009274 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912a:	f000 80a3 	beq.w	8009274 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912e:	f7f9 fa29 	bl	8002584 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800913a:	429a      	cmp	r2, r3
 800913c:	d302      	bcc.n	8009144 <UART_WaitOnFlagUntilTimeout+0x32>
 800913e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009140:	2b00      	cmp	r3, #0
 8009142:	d13f      	bne.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009158:	667b      	str	r3, [r7, #100]	; 0x64
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009164:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	663b      	str	r3, [r7, #96]	; 0x60
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009196:	64ba      	str	r2, [r7, #72]	; 0x48
 8009198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800919c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e068      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d050      	beq.n	8009274 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e0:	d148      	bne.n	8009274 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
 800920c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	613b      	str	r3, [r7, #16]
   return(result);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f023 0301 	bic.w	r3, r3, #1
 8009234:	66bb      	str	r3, [r7, #104]	; 0x68
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800923e:	623a      	str	r2, [r7, #32]
 8009240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	69f9      	ldr	r1, [r7, #28]
 8009244:	6a3a      	ldr	r2, [r7, #32]
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	61bb      	str	r3, [r7, #24]
   return(result);
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e5      	bne.n	800921e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2220      	movs	r2, #32
 800925c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2220      	movs	r2, #32
 8009264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e010      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	4013      	ands	r3, r2
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	bf0c      	ite	eq
 8009284:	2301      	moveq	r3, #1
 8009286:	2300      	movne	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	461a      	mov	r2, r3
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	429a      	cmp	r2, r3
 8009290:	f43f af48 	beq.w	8009124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3770      	adds	r7, #112	; 0x70
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800929e:	b480      	push	{r7}
 80092a0:	b095      	sub	sp, #84	; 0x54
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
 80092c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f023 0301 	bic.w	r3, r3, #1
 80092ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e5      	bne.n	80092d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009310:	2b01      	cmp	r3, #1
 8009312:	d118      	bne.n	8009346 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	60bb      	str	r3, [r7, #8]
   return(result);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f023 0310 	bic.w	r3, r3, #16
 8009328:	647b      	str	r3, [r7, #68]	; 0x44
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009332:	61bb      	str	r3, [r7, #24]
 8009334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	613b      	str	r3, [r7, #16]
   return(result);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e6      	bne.n	8009314 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2220      	movs	r2, #32
 800934a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	669a      	str	r2, [r3, #104]	; 0x68
}
 800935a:	bf00      	nop
 800935c:	3754      	adds	r7, #84	; 0x54
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7ff fb71 	bl	8008a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b088      	sub	sp, #32
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff fb3d 	bl	8008a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093de:	bf00      	nop
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093e8:	b084      	sub	sp, #16
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	f107 001c 	add.w	r0, r7, #28
 80093f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d120      	bne.n	8009442 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	4b20      	ldr	r3, [pc, #128]	; (8009494 <USB_CoreInit+0xac>)
 8009412:	4013      	ands	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d105      	bne.n	8009436 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa96 	bl	8009968 <USB_CoreReset>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
 8009440:	e010      	b.n	8009464 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa8a 	bl	8009968 <USB_CoreReset>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10b      	bne.n	8009482 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f043 0206 	orr.w	r2, r3, #6
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800948e:	b004      	add	sp, #16
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	ffbdffbf 	.word	0xffbdffbf

08009498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 0201 	bic.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d115      	bne.n	8009508 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094e8:	2001      	movs	r0, #1
 80094ea:	f7f9 f857 	bl	800259c <HAL_Delay>
      ms++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa29 	bl	800994c <USB_GetMode>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d01e      	beq.n	800953e <USB_SetCurrentMode+0x84>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b31      	cmp	r3, #49	; 0x31
 8009504:	d9f0      	bls.n	80094e8 <USB_SetCurrentMode+0x2e>
 8009506:	e01a      	b.n	800953e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d115      	bne.n	800953a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800951a:	2001      	movs	r0, #1
 800951c:	f7f9 f83e 	bl	800259c <HAL_Delay>
      ms++;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa10 	bl	800994c <USB_GetMode>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <USB_SetCurrentMode+0x84>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b31      	cmp	r3, #49	; 0x31
 8009536:	d9f0      	bls.n	800951a <USB_SetCurrentMode+0x60>
 8009538:	e001      	b.n	800953e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e005      	b.n	800954a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b32      	cmp	r3, #50	; 0x32
 8009542:	d101      	bne.n	8009548 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009554:	b084      	sub	sp, #16
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	e009      	b.n	8009588 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	3340      	adds	r3, #64	; 0x40
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	2200      	movs	r2, #0
 8009580:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	3301      	adds	r3, #1
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b0e      	cmp	r3, #14
 800958c:	d9f2      	bls.n	8009574 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d11c      	bne.n	80095ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a2:	f043 0302 	orr.w	r3, r3, #2
 80095a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	e005      	b.n	80095da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095e0:	461a      	mov	r2, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ec:	4619      	mov	r1, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f4:	461a      	mov	r2, r3
 80095f6:	680b      	ldr	r3, [r1, #0]
 80095f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d10c      	bne.n	800961a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f965 	bl	80098d8 <USB_SetDevSpeed>
 800960e:	e008      	b.n	8009622 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009610:	2101      	movs	r1, #1
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f960 	bl	80098d8 <USB_SetDevSpeed>
 8009618:	e003      	b.n	8009622 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800961a:	2103      	movs	r1, #3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f95b 	bl	80098d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009622:	2110      	movs	r1, #16
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8f3 	bl	8009810 <USB_FlushTxFifo>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f91f 	bl	8009878 <USB_FlushRxFifo>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964a:	461a      	mov	r2, r3
 800964c:	2300      	movs	r3, #0
 800964e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	461a      	mov	r2, r3
 8009658:	2300      	movs	r3, #0
 800965a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009662:	461a      	mov	r2, r3
 8009664:	2300      	movs	r3, #0
 8009666:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009668:	2300      	movs	r3, #0
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	e043      	b.n	80096f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009684:	d118      	bne.n	80096b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	461a      	mov	r2, r3
 800969a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	e013      	b.n	80096ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ae:	461a      	mov	r2, r3
 80096b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	e008      	b.n	80096ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	461a      	mov	r2, r3
 80096c6:	2300      	movs	r3, #0
 80096c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d6:	461a      	mov	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e8:	461a      	mov	r2, r3
 80096ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	3301      	adds	r3, #1
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d3b7      	bcc.n	800966e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096fe:	2300      	movs	r3, #0
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	e043      	b.n	800978c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800971a:	d118      	bne.n	800974e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	461a      	mov	r2, r3
 8009730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e013      	b.n	8009760 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e008      	b.n	8009760 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	461a      	mov	r2, r3
 800975c:	2300      	movs	r3, #0
 800975e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	461a      	mov	r2, r3
 800976e:	2300      	movs	r3, #0
 8009770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977e:	461a      	mov	r2, r3
 8009780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009784:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3301      	adds	r3, #1
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	429a      	cmp	r2, r3
 8009792:	d3b7      	bcc.n	8009704 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80097b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f043 0210 	orr.w	r2, r3, #16
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <USB_DevInit+0x2b4>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f043 0208 	orr.w	r2, r3, #8
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d105      	bne.n	80097f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699a      	ldr	r2, [r3, #24]
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <USB_DevInit+0x2b8>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009804:	b004      	add	sp, #16
 8009806:	4770      	bx	lr
 8009808:	803c3800 	.word	0x803c3800
 800980c:	40000004 	.word	0x40000004

08009810 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3301      	adds	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a13      	ldr	r2, [pc, #76]	; (8009874 <USB_FlushTxFifo+0x64>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d901      	bls.n	8009830 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e01b      	b.n	8009868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	daf2      	bge.n	800981e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	019b      	lsls	r3, r3, #6
 8009840:	f043 0220 	orr.w	r2, r3, #32
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4a08      	ldr	r2, [pc, #32]	; (8009874 <USB_FlushTxFifo+0x64>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d901      	bls.n	800985a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e006      	b.n	8009868 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b20      	cmp	r3, #32
 8009864:	d0f0      	beq.n	8009848 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	00030d40 	.word	0x00030d40

08009878 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3301      	adds	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <USB_FlushRxFifo+0x5c>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d901      	bls.n	8009896 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e018      	b.n	80098c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	daf2      	bge.n	8009884 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2210      	movs	r2, #16
 80098a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <USB_FlushRxFifo+0x5c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d901      	bls.n	80098ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e006      	b.n	80098c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b10      	cmp	r3, #16
 80098c4:	d0f0      	beq.n	80098a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	00030d40 	.word	0x00030d40

080098d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098f8:	4313      	orrs	r3, r2
 80098fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009938:	f043 0302 	orr.w	r3, r3, #2
 800993c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	f003 0301 	and.w	r3, r3, #1
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a13      	ldr	r2, [pc, #76]	; (80099cc <USB_CoreReset+0x64>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d901      	bls.n	8009986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e01b      	b.n	80099be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	daf2      	bge.n	8009974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f043 0201 	orr.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <USB_CoreReset+0x64>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e006      	b.n	80099be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d0f0      	beq.n	800999e <USB_CoreReset+0x36>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	00030d40 	.word	0x00030d40

080099d0 <main_inner_system>:
#include "soil_sensor.h"
#include "ultra_sonic_sensor.h"
#include "micro_servo_motor.h"


void main_inner_system(){
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0

	uint32_t dis= 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
	char strCopy[15];

	soil_sensor();
 80099da:	f000 f845 	bl	8009a68 <soil_sensor>
	dis = ultra_sonic_sensor();
 80099de:	f000 f923 	bl	8009c28 <ultra_sonic_sensor>
 80099e2:	6178      	str	r0, [r7, #20]

	motor_rotation();
 80099e4:	f000 f82a 	bl	8009a3c <motor_rotation>

	SSD1306_GotoXY (0, 0);
 80099e8:	2100      	movs	r1, #0
 80099ea:	2000      	movs	r0, #0
 80099ec:	f7f7 ff9e 	bl	800192c <SSD1306_GotoXY>
	SSD1306_Puts ("Distance:", &Font_11x18, 1);
 80099f0:	2201      	movs	r2, #1
 80099f2:	490e      	ldr	r1, [pc, #56]	; (8009a2c <main_inner_system+0x5c>)
 80099f4:	480e      	ldr	r0, [pc, #56]	; (8009a30 <main_inner_system+0x60>)
 80099f6:	f7f8 f82f 	bl	8001a58 <SSD1306_Puts>
	sprintf(strCopy,"%lu    ", dis);
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	490d      	ldr	r1, [pc, #52]	; (8009a34 <main_inner_system+0x64>)
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fa97 	bl	8009f34 <siprintf>
	SSD1306_GotoXY (0, 30);
 8009a06:	211e      	movs	r1, #30
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f7f7 ff8f 	bl	800192c <SSD1306_GotoXY>
	SSD1306_Puts (strCopy, &Font_16x26, 1);
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	2201      	movs	r2, #1
 8009a12:	4909      	ldr	r1, [pc, #36]	; (8009a38 <main_inner_system+0x68>)
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f8 f81f 	bl	8001a58 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8009a1a:	f7f7 fee1 	bl	80017e0 <SSD1306_UpdateScreen>
	HAL_Delay(50);
 8009a1e:	2032      	movs	r0, #50	; 0x32
 8009a20:	f7f8 fdbc 	bl	800259c <HAL_Delay>

}
 8009a24:	bf00      	nop
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000000 	.word	0x20000000
 8009a30:	0800afc4 	.word	0x0800afc4
 8009a34:	0800afd0 	.word	0x0800afd0
 8009a38:	20000008 	.word	0x20000008

08009a3c <motor_rotation>:
    // Set the CCR value to control the servo position
    htim3.Instance->CCR2 = pulse_width;
    HAL_Delay(50);  // Wait for the servo to reach the desired position
}*/

void motor_rotation(){
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
	// Rotate back to 0 degrees
	for (uint16_t angle = 180; angle >= 0; angle -= 10) {
		servo_rotate(angle);
	}*/

	htim3.Instance->CCR2 = 75;  // duty cycle is .5 ms
 8009a40:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <motor_rotation+0x28>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	224b      	movs	r2, #75	; 0x4b
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 8009a48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a4c:	f7f8 fda6 	bl	800259c <HAL_Delay>
	htim3.Instance->CCR2 = 175;  // duty cycle is 2.5 ms
 8009a50:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <motor_rotation+0x28>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	22af      	movs	r2, #175	; 0xaf
 8009a56:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 8009a58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a5c:	f7f8 fd9e 	bl	800259c <HAL_Delay>

	// If the timer's period is 1000, setting CCR2 to 175 would mean a duty cycle of (175/1000) × 100% = 17.5%

}
 8009a60:	bf00      	nop
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20000404 	.word	0x20000404

08009a68 <soil_sensor>:
#include "soil_sensor.h"


void soil_sensor(){
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0

	uint16_t readValue;

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2104      	movs	r1, #4
 8009a72:	4839      	ldr	r0, [pc, #228]	; (8009b58 <soil_sensor+0xf0>)
 8009a74:	f7fa fc92 	bl	800439c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8009a78:	2014      	movs	r0, #20
 8009a7a:	f7f8 fd8f 	bl	800259c <HAL_Delay>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8009a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a82:	4836      	ldr	r0, [pc, #216]	; (8009b5c <soil_sensor+0xf4>)
 8009a84:	f7f8 fdf2 	bl	800266c <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc1);
 8009a88:	4834      	ldr	r0, [pc, #208]	; (8009b5c <soil_sensor+0xf4>)
 8009a8a:	f7f8 ff75 	bl	8002978 <HAL_ADC_GetValue>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8009a92:	2200      	movs	r2, #0
 8009a94:	2104      	movs	r1, #4
 8009a96:	4830      	ldr	r0, [pc, #192]	; (8009b58 <soil_sensor+0xf0>)
 8009a98:	f7fa fc80 	bl	800439c <HAL_GPIO_WritePin>

	char buffer[20]; // Buffer to store the string representation of readValue

	// Convert integer to string
	snprintf(buffer, sizeof(buffer), "%d\r\n", readValue);
 8009a9c:	8afb      	ldrh	r3, [r7, #22]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	4a2f      	ldr	r2, [pc, #188]	; (8009b60 <soil_sensor+0xf8>)
 8009aa2:	2114      	movs	r1, #20
 8009aa4:	f000 fa12 	bl	8009ecc <sniprintf>

	// Send the data over UART
	HAL_UART_Transmit(&huart7, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f6 fbb0 	bl	8000210 <strlen>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aba:	482a      	ldr	r0, [pc, #168]	; (8009b64 <soil_sensor+0xfc>)
 8009abc:	f7fe fbb2 	bl	8008224 <HAL_UART_Transmit>

	if (readValue > 40){
 8009ac0:	8afb      	ldrh	r3, [r7, #22]
 8009ac2:	2b28      	cmp	r3, #40	; 0x28
 8009ac4:	d914      	bls.n	8009af0 <soil_sensor+0x88>
		printf("%d\n\r", readValue);
 8009ac6:	8afb      	ldrh	r3, [r7, #22]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4827      	ldr	r0, [pc, #156]	; (8009b68 <soil_sensor+0x100>)
 8009acc:	f000 f9ec 	bl	8009ea8 <iprintf>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4825      	ldr	r0, [pc, #148]	; (8009b6c <soil_sensor+0x104>)
 8009ad6:	f7fa fc61 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8009ada:	2200      	movs	r2, #0
 8009adc:	2102      	movs	r1, #2
 8009ade:	4823      	ldr	r0, [pc, #140]	; (8009b6c <soil_sensor+0x104>)
 8009ae0:	f7fa fc5c 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4821      	ldr	r0, [pc, #132]	; (8009b70 <soil_sensor+0x108>)
 8009aea:	f7fa fc57 	bl	800439c <HAL_GPIO_WritePin>
 8009aee:	e02b      	b.n	8009b48 <soil_sensor+0xe0>
	}
	else if (readValue > 10 ){
 8009af0:	8afb      	ldrh	r3, [r7, #22]
 8009af2:	2b0a      	cmp	r3, #10
 8009af4:	d914      	bls.n	8009b20 <soil_sensor+0xb8>
		printf("%d\n\r", readValue);
 8009af6:	8afb      	ldrh	r3, [r7, #22]
 8009af8:	4619      	mov	r1, r3
 8009afa:	481b      	ldr	r0, [pc, #108]	; (8009b68 <soil_sensor+0x100>)
 8009afc:	f000 f9d4 	bl	8009ea8 <iprintf>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8009b00:	2200      	movs	r2, #0
 8009b02:	2101      	movs	r1, #1
 8009b04:	4819      	ldr	r0, [pc, #100]	; (8009b6c <soil_sensor+0x104>)
 8009b06:	f7fa fc49 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	4817      	ldr	r0, [pc, #92]	; (8009b6c <soil_sensor+0x104>)
 8009b10:	f7fa fc44 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8009b14:	2200      	movs	r2, #0
 8009b16:	2101      	movs	r1, #1
 8009b18:	4815      	ldr	r0, [pc, #84]	; (8009b70 <soil_sensor+0x108>)
 8009b1a:	f7fa fc3f 	bl	800439c <HAL_GPIO_WritePin>
 8009b1e:	e013      	b.n	8009b48 <soil_sensor+0xe0>
	}
	else{
		printf("%d\n\r", readValue);
 8009b20:	8afb      	ldrh	r3, [r7, #22]
 8009b22:	4619      	mov	r1, r3
 8009b24:	4810      	ldr	r0, [pc, #64]	; (8009b68 <soil_sensor+0x100>)
 8009b26:	f000 f9bf 	bl	8009ea8 <iprintf>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	480f      	ldr	r0, [pc, #60]	; (8009b6c <soil_sensor+0x104>)
 8009b30:	f7fa fc34 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8009b34:	2200      	movs	r2, #0
 8009b36:	2102      	movs	r1, #2
 8009b38:	480c      	ldr	r0, [pc, #48]	; (8009b6c <soil_sensor+0x104>)
 8009b3a:	f7fa fc2f 	bl	800439c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8009b3e:	2201      	movs	r2, #1
 8009b40:	2101      	movs	r1, #1
 8009b42:	480b      	ldr	r0, [pc, #44]	; (8009b70 <soil_sensor+0x108>)
 8009b44:	f7fa fc2a 	bl	800439c <HAL_GPIO_WritePin>
	}
	HAL_Delay(500);
 8009b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b4c:	f7f8 fd26 	bl	800259c <HAL_Delay>

}
 8009b50:	bf00      	nop
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40021400 	.word	0x40021400
 8009b5c:	2000020c 	.word	0x2000020c
 8009b60:	0800afd8 	.word	0x0800afd8
 8009b64:	200004b0 	.word	0x200004b0
 8009b68:	0800afe0 	.word	0x0800afe0
 8009b6c:	40020c00 	.word	0x40020c00
 8009b70:	40021800 	.word	0x40021800

08009b74 <_write>:
 * @param file Unused file descriptor.
 * @param ptr Pointer to the data to be transmitted.
 * @param len Number of bytes to transmit.
 * @return The number of bytes transmitted.
 */
int _write(int file, char *ptr, int len) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	4804      	ldr	r0, [pc, #16]	; (8009b9c <_write+0x28>)
 8009b8c:	f7fe fb4a 	bl	8008224 <HAL_UART_Transmit>
	return len;
 8009b90:	687b      	ldr	r3, [r7, #4]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000538 	.word	0x20000538

08009ba0 <__io_getchar>:
 * This function receives a character through the UART_DEBUG interface
 * to provide a custom implementation of character input for scanf.
 *
 * @return The received character.
 */
int __io_getchar(void) {
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8009baa:	1df9      	adds	r1, r7, #7
 8009bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	4807      	ldr	r0, [pc, #28]	; (8009bd0 <__io_getchar+0x30>)
 8009bb4:	f7fe fbb9 	bl	800832a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8009bb8:	1df9      	adds	r1, r7, #7
 8009bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <__io_getchar+0x30>)
 8009bc2:	f7fe fb2f 	bl	8008224 <HAL_UART_Transmit>
	return ch;
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20000538 	.word	0x20000538

08009bd4 <_read>:
 * @param file Unused file descriptor.
 * @param ptr Pointer to the buffer where the data will be stored.
 * @param len Maximum number of bytes to read.
 * @return The number of bytes read.
 */
int _read(int file, char *ptr, int len) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
	char ch;

	for (; DataIdx < len; DataIdx++) {
 8009be4:	e016      	b.n	8009c14 <_read+0x40>
		ch = __io_getchar();
 8009be6:	f7ff ffdb 	bl	8009ba0 <__io_getchar>
 8009bea:	4603      	mov	r3, r0
 8009bec:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	7cfa      	ldrb	r2, [r7, #19]
 8009bf2:	701a      	strb	r2, [r3, #0]
		ptr++;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8009bfa:	7cfb      	ldrb	r3, [r7, #19]
 8009bfc:	2b0d      	cmp	r3, #13
 8009bfe:	d002      	beq.n	8009c06 <_read+0x32>
 8009c00:	7cfb      	ldrb	r3, [r7, #19]
 8009c02:	2b0a      	cmp	r3, #10
 8009c04:	d103      	bne.n	8009c0e <_read+0x3a>
			*(ptr) = 0;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
			break;
 8009c0c:	e006      	b.n	8009c1c <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	3301      	adds	r3, #1
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	dbe4      	blt.n	8009be6 <_read+0x12>
		}
	}
	return DataIdx + 1;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	3301      	adds	r3, #1
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <ultra_sonic_sensor>:
#include "ultra_sonic_sensor.h"


uint32_t ultra_sonic_sensor(){
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
	uint32_t pMillis;
	uint32_t Value1 = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
	uint32_t Value2 = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
	uint32_t Distance  = 0;  // cm
 8009c36:	2300      	movs	r3, #0
 8009c38:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c40:	4835      	ldr	r0, [pc, #212]	; (8009d18 <ultra_sonic_sensor+0xf0>)
 8009c42:	f7fa fbab 	bl	800439c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8009c46:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <ultra_sonic_sensor+0xf4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8009c4e:	bf00      	nop
 8009c50:	4b32      	ldr	r3, [pc, #200]	; (8009d1c <ultra_sonic_sensor+0xf4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b09      	cmp	r3, #9
 8009c58:	d9fa      	bls.n	8009c50 <ultra_sonic_sensor+0x28>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c60:	482d      	ldr	r0, [pc, #180]	; (8009d18 <ultra_sonic_sensor+0xf0>)
 8009c62:	f7fa fb9b 	bl	800439c <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8009c66:	f7f8 fc8d 	bl	8002584 <HAL_GetTick>
 8009c6a:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8009c6c:	bf00      	nop
 8009c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c72:	482b      	ldr	r0, [pc, #172]	; (8009d20 <ultra_sonic_sensor+0xf8>)
 8009c74:	f7fa fb7a 	bl	800436c <HAL_GPIO_ReadPin>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <ultra_sonic_sensor+0x66>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f103 040a 	add.w	r4, r3, #10
 8009c84:	f7f8 fc7e 	bl	8002584 <HAL_GetTick>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	d8ef      	bhi.n	8009c6e <ultra_sonic_sensor+0x46>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8009c8e:	4b23      	ldr	r3, [pc, #140]	; (8009d1c <ultra_sonic_sensor+0xf4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	60fb      	str	r3, [r7, #12]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8009c96:	f7f8 fc75 	bl	8002584 <HAL_GetTick>
 8009c9a:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8009c9c:	bf00      	nop
 8009c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ca2:	481f      	ldr	r0, [pc, #124]	; (8009d20 <ultra_sonic_sensor+0xf8>)
 8009ca4:	f7fa fb62 	bl	800436c <HAL_GPIO_ReadPin>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <ultra_sonic_sensor+0x96>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8009cb4:	f7f8 fc66 	bl	8002584 <HAL_GetTick>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	429c      	cmp	r4, r3
 8009cbc:	d8ef      	bhi.n	8009c9e <ultra_sonic_sensor+0x76>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8009cbe:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <ultra_sonic_sensor+0xf4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	60bb      	str	r3, [r7, #8]

	Distance = (Value2-Value1)* 0.034/2;
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f6 fc39 	bl	8000544 <__aeabi_ui2d>
 8009cd2:	a30f      	add	r3, pc, #60	; (adr r3, 8009d10 <ultra_sonic_sensor+0xe8>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fcae 	bl	8000638 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cec:	f7f6 fdce 	bl	800088c <__aeabi_ddiv>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f7f6 feb0 	bl	8000a5c <__aeabi_d2uiz>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	607b      	str	r3, [r7, #4]

	return Distance;
 8009d00:	687b      	ldr	r3, [r7, #4]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd90      	pop	{r4, r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	b020c49c 	.word	0xb020c49c
 8009d14:	3fa16872 	.word	0x3fa16872
 8009d18:	40021400 	.word	0x40021400
 8009d1c:	200003b8 	.word	0x200003b8
 8009d20:	40020c00 	.word	0x40020c00

08009d24 <std>:
 8009d24:	2300      	movs	r3, #0
 8009d26:	b510      	push	{r4, lr}
 8009d28:	4604      	mov	r4, r0
 8009d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d32:	6083      	str	r3, [r0, #8]
 8009d34:	8181      	strh	r1, [r0, #12]
 8009d36:	6643      	str	r3, [r0, #100]	; 0x64
 8009d38:	81c2      	strh	r2, [r0, #14]
 8009d3a:	6183      	str	r3, [r0, #24]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	2208      	movs	r2, #8
 8009d40:	305c      	adds	r0, #92	; 0x5c
 8009d42:	f000 f95a 	bl	8009ffa <memset>
 8009d46:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <std+0x58>)
 8009d48:	6263      	str	r3, [r4, #36]	; 0x24
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <std+0x5c>)
 8009d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d4e:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <std+0x60>)
 8009d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d52:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <std+0x64>)
 8009d54:	6323      	str	r3, [r4, #48]	; 0x30
 8009d56:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <std+0x68>)
 8009d58:	6224      	str	r4, [r4, #32]
 8009d5a:	429c      	cmp	r4, r3
 8009d5c:	d006      	beq.n	8009d6c <std+0x48>
 8009d5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d62:	4294      	cmp	r4, r2
 8009d64:	d002      	beq.n	8009d6c <std+0x48>
 8009d66:	33d0      	adds	r3, #208	; 0xd0
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	d105      	bne.n	8009d78 <std+0x54>
 8009d6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d74:	f000 b9ba 	b.w	800a0ec <__retarget_lock_init_recursive>
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08009f75 	.word	0x08009f75
 8009d80:	08009f97 	.word	0x08009f97
 8009d84:	08009fcf 	.word	0x08009fcf
 8009d88:	08009ff3 	.word	0x08009ff3
 8009d8c:	20000ee0 	.word	0x20000ee0

08009d90 <stdio_exit_handler>:
 8009d90:	4a02      	ldr	r2, [pc, #8]	; (8009d9c <stdio_exit_handler+0xc>)
 8009d92:	4903      	ldr	r1, [pc, #12]	; (8009da0 <stdio_exit_handler+0x10>)
 8009d94:	4803      	ldr	r0, [pc, #12]	; (8009da4 <stdio_exit_handler+0x14>)
 8009d96:	f000 b869 	b.w	8009e6c <_fwalk_sglue>
 8009d9a:	bf00      	nop
 8009d9c:	2000001c 	.word	0x2000001c
 8009da0:	0800ac49 	.word	0x0800ac49
 8009da4:	20000028 	.word	0x20000028

08009da8 <cleanup_stdio>:
 8009da8:	6841      	ldr	r1, [r0, #4]
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <cleanup_stdio+0x34>)
 8009dac:	4299      	cmp	r1, r3
 8009dae:	b510      	push	{r4, lr}
 8009db0:	4604      	mov	r4, r0
 8009db2:	d001      	beq.n	8009db8 <cleanup_stdio+0x10>
 8009db4:	f000 ff48 	bl	800ac48 <_fflush_r>
 8009db8:	68a1      	ldr	r1, [r4, #8]
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <cleanup_stdio+0x38>)
 8009dbc:	4299      	cmp	r1, r3
 8009dbe:	d002      	beq.n	8009dc6 <cleanup_stdio+0x1e>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 ff41 	bl	800ac48 <_fflush_r>
 8009dc6:	68e1      	ldr	r1, [r4, #12]
 8009dc8:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <cleanup_stdio+0x3c>)
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	d004      	beq.n	8009dd8 <cleanup_stdio+0x30>
 8009dce:	4620      	mov	r0, r4
 8009dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd4:	f000 bf38 	b.w	800ac48 <_fflush_r>
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000ee0 	.word	0x20000ee0
 8009de0:	20000f48 	.word	0x20000f48
 8009de4:	20000fb0 	.word	0x20000fb0

08009de8 <global_stdio_init.part.0>:
 8009de8:	b510      	push	{r4, lr}
 8009dea:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <global_stdio_init.part.0+0x30>)
 8009dec:	4c0b      	ldr	r4, [pc, #44]	; (8009e1c <global_stdio_init.part.0+0x34>)
 8009dee:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <global_stdio_init.part.0+0x38>)
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	4620      	mov	r0, r4
 8009df4:	2200      	movs	r2, #0
 8009df6:	2104      	movs	r1, #4
 8009df8:	f7ff ff94 	bl	8009d24 <std>
 8009dfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e00:	2201      	movs	r2, #1
 8009e02:	2109      	movs	r1, #9
 8009e04:	f7ff ff8e 	bl	8009d24 <std>
 8009e08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e12:	2112      	movs	r1, #18
 8009e14:	f7ff bf86 	b.w	8009d24 <std>
 8009e18:	20001018 	.word	0x20001018
 8009e1c:	20000ee0 	.word	0x20000ee0
 8009e20:	08009d91 	.word	0x08009d91

08009e24 <__sfp_lock_acquire>:
 8009e24:	4801      	ldr	r0, [pc, #4]	; (8009e2c <__sfp_lock_acquire+0x8>)
 8009e26:	f000 b962 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 8009e2a:	bf00      	nop
 8009e2c:	20001021 	.word	0x20001021

08009e30 <__sfp_lock_release>:
 8009e30:	4801      	ldr	r0, [pc, #4]	; (8009e38 <__sfp_lock_release+0x8>)
 8009e32:	f000 b95d 	b.w	800a0f0 <__retarget_lock_release_recursive>
 8009e36:	bf00      	nop
 8009e38:	20001021 	.word	0x20001021

08009e3c <__sinit>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	4604      	mov	r4, r0
 8009e40:	f7ff fff0 	bl	8009e24 <__sfp_lock_acquire>
 8009e44:	6a23      	ldr	r3, [r4, #32]
 8009e46:	b11b      	cbz	r3, 8009e50 <__sinit+0x14>
 8009e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4c:	f7ff bff0 	b.w	8009e30 <__sfp_lock_release>
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <__sinit+0x28>)
 8009e52:	6223      	str	r3, [r4, #32]
 8009e54:	4b04      	ldr	r3, [pc, #16]	; (8009e68 <__sinit+0x2c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f5      	bne.n	8009e48 <__sinit+0xc>
 8009e5c:	f7ff ffc4 	bl	8009de8 <global_stdio_init.part.0>
 8009e60:	e7f2      	b.n	8009e48 <__sinit+0xc>
 8009e62:	bf00      	nop
 8009e64:	08009da9 	.word	0x08009da9
 8009e68:	20001018 	.word	0x20001018

08009e6c <_fwalk_sglue>:
 8009e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e70:	4607      	mov	r7, r0
 8009e72:	4688      	mov	r8, r1
 8009e74:	4614      	mov	r4, r2
 8009e76:	2600      	movs	r6, #0
 8009e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e80:	d505      	bpl.n	8009e8e <_fwalk_sglue+0x22>
 8009e82:	6824      	ldr	r4, [r4, #0]
 8009e84:	2c00      	cmp	r4, #0
 8009e86:	d1f7      	bne.n	8009e78 <_fwalk_sglue+0xc>
 8009e88:	4630      	mov	r0, r6
 8009e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d907      	bls.n	8009ea4 <_fwalk_sglue+0x38>
 8009e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	d003      	beq.n	8009ea4 <_fwalk_sglue+0x38>
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	47c0      	blx	r8
 8009ea2:	4306      	orrs	r6, r0
 8009ea4:	3568      	adds	r5, #104	; 0x68
 8009ea6:	e7e9      	b.n	8009e7c <_fwalk_sglue+0x10>

08009ea8 <iprintf>:
 8009ea8:	b40f      	push	{r0, r1, r2, r3}
 8009eaa:	b507      	push	{r0, r1, r2, lr}
 8009eac:	4906      	ldr	r1, [pc, #24]	; (8009ec8 <iprintf+0x20>)
 8009eae:	ab04      	add	r3, sp, #16
 8009eb0:	6808      	ldr	r0, [r1, #0]
 8009eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb6:	6881      	ldr	r1, [r0, #8]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	f000 fb95 	bl	800a5e8 <_vfiprintf_r>
 8009ebe:	b003      	add	sp, #12
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b004      	add	sp, #16
 8009ec6:	4770      	bx	lr
 8009ec8:	20000074 	.word	0x20000074

08009ecc <sniprintf>:
 8009ecc:	b40c      	push	{r2, r3}
 8009ece:	b530      	push	{r4, r5, lr}
 8009ed0:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <sniprintf+0x64>)
 8009ed2:	1e0c      	subs	r4, r1, #0
 8009ed4:	681d      	ldr	r5, [r3, #0]
 8009ed6:	b09d      	sub	sp, #116	; 0x74
 8009ed8:	da08      	bge.n	8009eec <sniprintf+0x20>
 8009eda:	238b      	movs	r3, #139	; 0x8b
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ee2:	b01d      	add	sp, #116	; 0x74
 8009ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ee8:	b002      	add	sp, #8
 8009eea:	4770      	bx	lr
 8009eec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009ef0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ef4:	bf14      	ite	ne
 8009ef6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009efa:	4623      	moveq	r3, r4
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f04:	9002      	str	r0, [sp, #8]
 8009f06:	9006      	str	r0, [sp, #24]
 8009f08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f0e:	ab21      	add	r3, sp, #132	; 0x84
 8009f10:	a902      	add	r1, sp, #8
 8009f12:	4628      	mov	r0, r5
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	f000 fa3f 	bl	800a398 <_svfiprintf_r>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	bfbc      	itt	lt
 8009f1e:	238b      	movlt	r3, #139	; 0x8b
 8009f20:	602b      	strlt	r3, [r5, #0]
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	d0dd      	beq.n	8009ee2 <sniprintf+0x16>
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	e7d9      	b.n	8009ee2 <sniprintf+0x16>
 8009f2e:	bf00      	nop
 8009f30:	20000074 	.word	0x20000074

08009f34 <siprintf>:
 8009f34:	b40e      	push	{r1, r2, r3}
 8009f36:	b500      	push	{lr}
 8009f38:	b09c      	sub	sp, #112	; 0x70
 8009f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f3c:	9002      	str	r0, [sp, #8]
 8009f3e:	9006      	str	r0, [sp, #24]
 8009f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <siprintf+0x38>)
 8009f46:	9107      	str	r1, [sp, #28]
 8009f48:	9104      	str	r1, [sp, #16]
 8009f4a:	4909      	ldr	r1, [pc, #36]	; (8009f70 <siprintf+0x3c>)
 8009f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f50:	9105      	str	r1, [sp, #20]
 8009f52:	6800      	ldr	r0, [r0, #0]
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	a902      	add	r1, sp, #8
 8009f58:	f000 fa1e 	bl	800a398 <_svfiprintf_r>
 8009f5c:	9b02      	ldr	r3, [sp, #8]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	b01c      	add	sp, #112	; 0x70
 8009f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f68:	b003      	add	sp, #12
 8009f6a:	4770      	bx	lr
 8009f6c:	20000074 	.word	0x20000074
 8009f70:	ffff0208 	.word	0xffff0208

08009f74 <__sread>:
 8009f74:	b510      	push	{r4, lr}
 8009f76:	460c      	mov	r4, r1
 8009f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7c:	f000 f868 	bl	800a050 <_read_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	bfab      	itete	ge
 8009f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f86:	89a3      	ldrhlt	r3, [r4, #12]
 8009f88:	181b      	addge	r3, r3, r0
 8009f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f8e:	bfac      	ite	ge
 8009f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f92:	81a3      	strhlt	r3, [r4, #12]
 8009f94:	bd10      	pop	{r4, pc}

08009f96 <__swrite>:
 8009f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	898b      	ldrh	r3, [r1, #12]
 8009f9e:	05db      	lsls	r3, r3, #23
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	4616      	mov	r6, r2
 8009fa6:	d505      	bpl.n	8009fb4 <__swrite+0x1e>
 8009fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fac:	2302      	movs	r3, #2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f000 f83c 	bl	800a02c <_lseek_r>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fca:	f000 b853 	b.w	800a074 <_write_r>

08009fce <__sseek>:
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd6:	f000 f829 	bl	800a02c <_lseek_r>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	bf15      	itete	ne
 8009fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fea:	81a3      	strheq	r3, [r4, #12]
 8009fec:	bf18      	it	ne
 8009fee:	81a3      	strhne	r3, [r4, #12]
 8009ff0:	bd10      	pop	{r4, pc}

08009ff2 <__sclose>:
 8009ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff6:	f000 b809 	b.w	800a00c <_close_r>

08009ffa <memset>:
 8009ffa:	4402      	add	r2, r0
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d100      	bne.n	800a004 <memset+0xa>
 800a002:	4770      	bx	lr
 800a004:	f803 1b01 	strb.w	r1, [r3], #1
 800a008:	e7f9      	b.n	8009ffe <memset+0x4>
	...

0800a00c <_close_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d06      	ldr	r5, [pc, #24]	; (800a028 <_close_r+0x1c>)
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	f7f8 f9be 	bl	8002398 <_close>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_close_r+0x1a>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b103      	cbz	r3, 800a026 <_close_r+0x1a>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	2000101c 	.word	0x2000101c

0800a02c <_lseek_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4d07      	ldr	r5, [pc, #28]	; (800a04c <_lseek_r+0x20>)
 800a030:	4604      	mov	r4, r0
 800a032:	4608      	mov	r0, r1
 800a034:	4611      	mov	r1, r2
 800a036:	2200      	movs	r2, #0
 800a038:	602a      	str	r2, [r5, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f7f8 f9d3 	bl	80023e6 <_lseek>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_lseek_r+0x1e>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_lseek_r+0x1e>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	2000101c 	.word	0x2000101c

0800a050 <_read_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d07      	ldr	r5, [pc, #28]	; (800a070 <_read_r+0x20>)
 800a054:	4604      	mov	r4, r0
 800a056:	4608      	mov	r0, r1
 800a058:	4611      	mov	r1, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f7ff fdb8 	bl	8009bd4 <_read>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_read_r+0x1e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_read_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	2000101c 	.word	0x2000101c

0800a074 <_write_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_write_r+0x20>)
 800a078:	4604      	mov	r4, r0
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f7ff fd76 	bl	8009b74 <_write>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_write_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_write_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	2000101c 	.word	0x2000101c

0800a098 <__errno>:
 800a098:	4b01      	ldr	r3, [pc, #4]	; (800a0a0 <__errno+0x8>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20000074 	.word	0x20000074

0800a0a4 <__libc_init_array>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4d0d      	ldr	r5, [pc, #52]	; (800a0dc <__libc_init_array+0x38>)
 800a0a8:	4c0d      	ldr	r4, [pc, #52]	; (800a0e0 <__libc_init_array+0x3c>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	42a6      	cmp	r6, r4
 800a0b2:	d109      	bne.n	800a0c8 <__libc_init_array+0x24>
 800a0b4:	4d0b      	ldr	r5, [pc, #44]	; (800a0e4 <__libc_init_array+0x40>)
 800a0b6:	4c0c      	ldr	r4, [pc, #48]	; (800a0e8 <__libc_init_array+0x44>)
 800a0b8:	f000 ff78 	bl	800afac <_init>
 800a0bc:	1b64      	subs	r4, r4, r5
 800a0be:	10a4      	asrs	r4, r4, #2
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	42a6      	cmp	r6, r4
 800a0c4:	d105      	bne.n	800a0d2 <__libc_init_array+0x2e>
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0cc:	4798      	blx	r3
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7ee      	b.n	800a0b0 <__libc_init_array+0xc>
 800a0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d6:	4798      	blx	r3
 800a0d8:	3601      	adds	r6, #1
 800a0da:	e7f2      	b.n	800a0c2 <__libc_init_array+0x1e>
 800a0dc:	0800d0ec 	.word	0x0800d0ec
 800a0e0:	0800d0ec 	.word	0x0800d0ec
 800a0e4:	0800d0ec 	.word	0x0800d0ec
 800a0e8:	0800d0f0 	.word	0x0800d0f0

0800a0ec <__retarget_lock_init_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <__retarget_lock_acquire_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <__retarget_lock_release_recursive>:
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <_free_r>:
 800a0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d044      	beq.n	800a184 <_free_r+0x90>
 800a0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fe:	9001      	str	r0, [sp, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f1a1 0404 	sub.w	r4, r1, #4
 800a106:	bfb8      	it	lt
 800a108:	18e4      	addlt	r4, r4, r3
 800a10a:	f000 f8df 	bl	800a2cc <__malloc_lock>
 800a10e:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <_free_r+0x94>)
 800a110:	9801      	ldr	r0, [sp, #4]
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	b933      	cbnz	r3, 800a124 <_free_r+0x30>
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	b003      	add	sp, #12
 800a11c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a120:	f000 b8da 	b.w	800a2d8 <__malloc_unlock>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d908      	bls.n	800a13a <_free_r+0x46>
 800a128:	6825      	ldr	r5, [r4, #0]
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf01      	itttt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	1949      	addeq	r1, r1, r5
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	e7ed      	b.n	800a116 <_free_r+0x22>
 800a13a:	461a      	mov	r2, r3
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b10b      	cbz	r3, 800a144 <_free_r+0x50>
 800a140:	42a3      	cmp	r3, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x46>
 800a144:	6811      	ldr	r1, [r2, #0]
 800a146:	1855      	adds	r5, r2, r1
 800a148:	42a5      	cmp	r5, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x70>
 800a14c:	6824      	ldr	r4, [r4, #0]
 800a14e:	4421      	add	r1, r4
 800a150:	1854      	adds	r4, r2, r1
 800a152:	42a3      	cmp	r3, r4
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	d1e0      	bne.n	800a11a <_free_r+0x26>
 800a158:	681c      	ldr	r4, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	6053      	str	r3, [r2, #4]
 800a15e:	440c      	add	r4, r1
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	e7da      	b.n	800a11a <_free_r+0x26>
 800a164:	d902      	bls.n	800a16c <_free_r+0x78>
 800a166:	230c      	movs	r3, #12
 800a168:	6003      	str	r3, [r0, #0]
 800a16a:	e7d6      	b.n	800a11a <_free_r+0x26>
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	428b      	cmp	r3, r1
 800a172:	bf04      	itt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	6063      	str	r3, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1949      	addeq	r1, r1, r5
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	6054      	str	r4, [r2, #4]
 800a182:	e7ca      	b.n	800a11a <_free_r+0x26>
 800a184:	b003      	add	sp, #12
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	20001024 	.word	0x20001024

0800a18c <sbrk_aligned>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4e0e      	ldr	r6, [pc, #56]	; (800a1c8 <sbrk_aligned+0x3c>)
 800a190:	460c      	mov	r4, r1
 800a192:	6831      	ldr	r1, [r6, #0]
 800a194:	4605      	mov	r5, r0
 800a196:	b911      	cbnz	r1, 800a19e <sbrk_aligned+0x12>
 800a198:	f000 fe2e 	bl	800adf8 <_sbrk_r>
 800a19c:	6030      	str	r0, [r6, #0]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 fe29 	bl	800adf8 <_sbrk_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d00a      	beq.n	800a1c0 <sbrk_aligned+0x34>
 800a1aa:	1cc4      	adds	r4, r0, #3
 800a1ac:	f024 0403 	bic.w	r4, r4, #3
 800a1b0:	42a0      	cmp	r0, r4
 800a1b2:	d007      	beq.n	800a1c4 <sbrk_aligned+0x38>
 800a1b4:	1a21      	subs	r1, r4, r0
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 fe1e 	bl	800adf8 <_sbrk_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d101      	bne.n	800a1c4 <sbrk_aligned+0x38>
 800a1c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	20001028 	.word	0x20001028

0800a1cc <_malloc_r>:
 800a1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d0:	1ccd      	adds	r5, r1, #3
 800a1d2:	f025 0503 	bic.w	r5, r5, #3
 800a1d6:	3508      	adds	r5, #8
 800a1d8:	2d0c      	cmp	r5, #12
 800a1da:	bf38      	it	cc
 800a1dc:	250c      	movcc	r5, #12
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	db01      	blt.n	800a1e8 <_malloc_r+0x1c>
 800a1e4:	42a9      	cmp	r1, r5
 800a1e6:	d905      	bls.n	800a1f4 <_malloc_r+0x28>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2c8 <_malloc_r+0xfc>
 800a1f8:	f000 f868 	bl	800a2cc <__malloc_lock>
 800a1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a200:	461c      	mov	r4, r3
 800a202:	bb5c      	cbnz	r4, 800a25c <_malloc_r+0x90>
 800a204:	4629      	mov	r1, r5
 800a206:	4638      	mov	r0, r7
 800a208:	f7ff ffc0 	bl	800a18c <sbrk_aligned>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	4604      	mov	r4, r0
 800a210:	d155      	bne.n	800a2be <_malloc_r+0xf2>
 800a212:	f8d8 4000 	ldr.w	r4, [r8]
 800a216:	4626      	mov	r6, r4
 800a218:	2e00      	cmp	r6, #0
 800a21a:	d145      	bne.n	800a2a8 <_malloc_r+0xdc>
 800a21c:	2c00      	cmp	r4, #0
 800a21e:	d048      	beq.n	800a2b2 <_malloc_r+0xe6>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	4631      	mov	r1, r6
 800a224:	4638      	mov	r0, r7
 800a226:	eb04 0903 	add.w	r9, r4, r3
 800a22a:	f000 fde5 	bl	800adf8 <_sbrk_r>
 800a22e:	4581      	cmp	r9, r0
 800a230:	d13f      	bne.n	800a2b2 <_malloc_r+0xe6>
 800a232:	6821      	ldr	r1, [r4, #0]
 800a234:	1a6d      	subs	r5, r5, r1
 800a236:	4629      	mov	r1, r5
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa7 	bl	800a18c <sbrk_aligned>
 800a23e:	3001      	adds	r0, #1
 800a240:	d037      	beq.n	800a2b2 <_malloc_r+0xe6>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	442b      	add	r3, r5
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	f8d8 3000 	ldr.w	r3, [r8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d038      	beq.n	800a2c2 <_malloc_r+0xf6>
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	42a2      	cmp	r2, r4
 800a254:	d12b      	bne.n	800a2ae <_malloc_r+0xe2>
 800a256:	2200      	movs	r2, #0
 800a258:	605a      	str	r2, [r3, #4]
 800a25a:	e00f      	b.n	800a27c <_malloc_r+0xb0>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	1b52      	subs	r2, r2, r5
 800a260:	d41f      	bmi.n	800a2a2 <_malloc_r+0xd6>
 800a262:	2a0b      	cmp	r2, #11
 800a264:	d917      	bls.n	800a296 <_malloc_r+0xca>
 800a266:	1961      	adds	r1, r4, r5
 800a268:	42a3      	cmp	r3, r4
 800a26a:	6025      	str	r5, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	6059      	strne	r1, [r3, #4]
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	bf08      	it	eq
 800a274:	f8c8 1000 	streq.w	r1, [r8]
 800a278:	5162      	str	r2, [r4, r5]
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	4638      	mov	r0, r7
 800a27e:	f104 060b 	add.w	r6, r4, #11
 800a282:	f000 f829 	bl	800a2d8 <__malloc_unlock>
 800a286:	f026 0607 	bic.w	r6, r6, #7
 800a28a:	1d23      	adds	r3, r4, #4
 800a28c:	1af2      	subs	r2, r6, r3
 800a28e:	d0ae      	beq.n	800a1ee <_malloc_r+0x22>
 800a290:	1b9b      	subs	r3, r3, r6
 800a292:	50a3      	str	r3, [r4, r2]
 800a294:	e7ab      	b.n	800a1ee <_malloc_r+0x22>
 800a296:	42a3      	cmp	r3, r4
 800a298:	6862      	ldr	r2, [r4, #4]
 800a29a:	d1dd      	bne.n	800a258 <_malloc_r+0x8c>
 800a29c:	f8c8 2000 	str.w	r2, [r8]
 800a2a0:	e7ec      	b.n	800a27c <_malloc_r+0xb0>
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	6864      	ldr	r4, [r4, #4]
 800a2a6:	e7ac      	b.n	800a202 <_malloc_r+0x36>
 800a2a8:	4634      	mov	r4, r6
 800a2aa:	6876      	ldr	r6, [r6, #4]
 800a2ac:	e7b4      	b.n	800a218 <_malloc_r+0x4c>
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7cc      	b.n	800a24c <_malloc_r+0x80>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	603b      	str	r3, [r7, #0]
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f000 f80e 	bl	800a2d8 <__malloc_unlock>
 800a2bc:	e797      	b.n	800a1ee <_malloc_r+0x22>
 800a2be:	6025      	str	r5, [r4, #0]
 800a2c0:	e7dc      	b.n	800a27c <_malloc_r+0xb0>
 800a2c2:	605b      	str	r3, [r3, #4]
 800a2c4:	deff      	udf	#255	; 0xff
 800a2c6:	bf00      	nop
 800a2c8:	20001024 	.word	0x20001024

0800a2cc <__malloc_lock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_lock+0x8>)
 800a2ce:	f7ff bf0e 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	20001020 	.word	0x20001020

0800a2d8 <__malloc_unlock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_unlock+0x8>)
 800a2da:	f7ff bf09 	b.w	800a0f0 <__retarget_lock_release_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20001020 	.word	0x20001020

0800a2e4 <__ssputs_r>:
 800a2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e8:	688e      	ldr	r6, [r1, #8]
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	42be      	cmp	r6, r7
 800a2ee:	680b      	ldr	r3, [r1, #0]
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	4690      	mov	r8, r2
 800a2f6:	d82c      	bhi.n	800a352 <__ssputs_r+0x6e>
 800a2f8:	898a      	ldrh	r2, [r1, #12]
 800a2fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2fe:	d026      	beq.n	800a34e <__ssputs_r+0x6a>
 800a300:	6965      	ldr	r5, [r4, #20]
 800a302:	6909      	ldr	r1, [r1, #16]
 800a304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a308:	eba3 0901 	sub.w	r9, r3, r1
 800a30c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a310:	1c7b      	adds	r3, r7, #1
 800a312:	444b      	add	r3, r9
 800a314:	106d      	asrs	r5, r5, #1
 800a316:	429d      	cmp	r5, r3
 800a318:	bf38      	it	cc
 800a31a:	461d      	movcc	r5, r3
 800a31c:	0553      	lsls	r3, r2, #21
 800a31e:	d527      	bpl.n	800a370 <__ssputs_r+0x8c>
 800a320:	4629      	mov	r1, r5
 800a322:	f7ff ff53 	bl	800a1cc <_malloc_r>
 800a326:	4606      	mov	r6, r0
 800a328:	b360      	cbz	r0, 800a384 <__ssputs_r+0xa0>
 800a32a:	6921      	ldr	r1, [r4, #16]
 800a32c:	464a      	mov	r2, r9
 800a32e:	f000 fd73 	bl	800ae18 <memcpy>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	6126      	str	r6, [r4, #16]
 800a340:	6165      	str	r5, [r4, #20]
 800a342:	444e      	add	r6, r9
 800a344:	eba5 0509 	sub.w	r5, r5, r9
 800a348:	6026      	str	r6, [r4, #0]
 800a34a:	60a5      	str	r5, [r4, #8]
 800a34c:	463e      	mov	r6, r7
 800a34e:	42be      	cmp	r6, r7
 800a350:	d900      	bls.n	800a354 <__ssputs_r+0x70>
 800a352:	463e      	mov	r6, r7
 800a354:	6820      	ldr	r0, [r4, #0]
 800a356:	4632      	mov	r2, r6
 800a358:	4641      	mov	r1, r8
 800a35a:	f000 fd33 	bl	800adc4 <memmove>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	1b9b      	subs	r3, r3, r6
 800a362:	60a3      	str	r3, [r4, #8]
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	4433      	add	r3, r6
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	2000      	movs	r0, #0
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	462a      	mov	r2, r5
 800a372:	f000 fd5f 	bl	800ae34 <_realloc_r>
 800a376:	4606      	mov	r6, r0
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1e0      	bne.n	800a33e <__ssputs_r+0x5a>
 800a37c:	6921      	ldr	r1, [r4, #16]
 800a37e:	4650      	mov	r0, sl
 800a380:	f7ff feb8 	bl	800a0f4 <_free_r>
 800a384:	230c      	movs	r3, #12
 800a386:	f8ca 3000 	str.w	r3, [sl]
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a390:	81a3      	strh	r3, [r4, #12]
 800a392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a396:	e7e9      	b.n	800a36c <__ssputs_r+0x88>

0800a398 <_svfiprintf_r>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4698      	mov	r8, r3
 800a39e:	898b      	ldrh	r3, [r1, #12]
 800a3a0:	061b      	lsls	r3, r3, #24
 800a3a2:	b09d      	sub	sp, #116	; 0x74
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	d50e      	bpl.n	800a3ca <_svfiprintf_r+0x32>
 800a3ac:	690b      	ldr	r3, [r1, #16]
 800a3ae:	b963      	cbnz	r3, 800a3ca <_svfiprintf_r+0x32>
 800a3b0:	2140      	movs	r1, #64	; 0x40
 800a3b2:	f7ff ff0b 	bl	800a1cc <_malloc_r>
 800a3b6:	6028      	str	r0, [r5, #0]
 800a3b8:	6128      	str	r0, [r5, #16]
 800a3ba:	b920      	cbnz	r0, 800a3c6 <_svfiprintf_r+0x2e>
 800a3bc:	230c      	movs	r3, #12
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3c4:	e0d0      	b.n	800a568 <_svfiprintf_r+0x1d0>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	616b      	str	r3, [r5, #20]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ce:	2320      	movs	r3, #32
 800a3d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d8:	2330      	movs	r3, #48	; 0x30
 800a3da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a580 <_svfiprintf_r+0x1e8>
 800a3de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e2:	f04f 0901 	mov.w	r9, #1
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ee:	b10a      	cbz	r2, 800a3f4 <_svfiprintf_r+0x5c>
 800a3f0:	2a25      	cmp	r2, #37	; 0x25
 800a3f2:	d1f9      	bne.n	800a3e8 <_svfiprintf_r+0x50>
 800a3f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f8:	d00b      	beq.n	800a412 <_svfiprintf_r+0x7a>
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff ff6f 	bl	800a2e4 <__ssputs_r>
 800a406:	3001      	adds	r0, #1
 800a408:	f000 80a9 	beq.w	800a55e <_svfiprintf_r+0x1c6>
 800a40c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a40e:	445a      	add	r2, fp
 800a410:	9209      	str	r2, [sp, #36]	; 0x24
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80a1 	beq.w	800a55e <_svfiprintf_r+0x1c6>
 800a41c:	2300      	movs	r3, #0
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a426:	f10a 0a01 	add.w	sl, sl, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a432:	931a      	str	r3, [sp, #104]	; 0x68
 800a434:	4654      	mov	r4, sl
 800a436:	2205      	movs	r2, #5
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	4850      	ldr	r0, [pc, #320]	; (800a580 <_svfiprintf_r+0x1e8>)
 800a43e:	f7f5 feef 	bl	8000220 <memchr>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	b9d8      	cbnz	r0, 800a47e <_svfiprintf_r+0xe6>
 800a446:	06d0      	lsls	r0, r2, #27
 800a448:	bf44      	itt	mi
 800a44a:	2320      	movmi	r3, #32
 800a44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a450:	0711      	lsls	r1, r2, #28
 800a452:	bf44      	itt	mi
 800a454:	232b      	movmi	r3, #43	; 0x2b
 800a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45a:	f89a 3000 	ldrb.w	r3, [sl]
 800a45e:	2b2a      	cmp	r3, #42	; 0x2a
 800a460:	d015      	beq.n	800a48e <_svfiprintf_r+0xf6>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4654      	mov	r4, sl
 800a466:	2000      	movs	r0, #0
 800a468:	f04f 0c0a 	mov.w	ip, #10
 800a46c:	4621      	mov	r1, r4
 800a46e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a472:	3b30      	subs	r3, #48	; 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d94d      	bls.n	800a514 <_svfiprintf_r+0x17c>
 800a478:	b1b0      	cbz	r0, 800a4a8 <_svfiprintf_r+0x110>
 800a47a:	9207      	str	r2, [sp, #28]
 800a47c:	e014      	b.n	800a4a8 <_svfiprintf_r+0x110>
 800a47e:	eba0 0308 	sub.w	r3, r0, r8
 800a482:	fa09 f303 	lsl.w	r3, r9, r3
 800a486:	4313      	orrs	r3, r2
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	46a2      	mov	sl, r4
 800a48c:	e7d2      	b.n	800a434 <_svfiprintf_r+0x9c>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1d19      	adds	r1, r3, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	9103      	str	r1, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	bfbb      	ittet	lt
 800a49a:	425b      	neglt	r3, r3
 800a49c:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a0:	9307      	strge	r3, [sp, #28]
 800a4a2:	9307      	strlt	r3, [sp, #28]
 800a4a4:	bfb8      	it	lt
 800a4a6:	9204      	strlt	r2, [sp, #16]
 800a4a8:	7823      	ldrb	r3, [r4, #0]
 800a4aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ac:	d10c      	bne.n	800a4c8 <_svfiprintf_r+0x130>
 800a4ae:	7863      	ldrb	r3, [r4, #1]
 800a4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b2:	d134      	bne.n	800a51e <_svfiprintf_r+0x186>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfb8      	it	lt
 800a4c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4c4:	3402      	adds	r4, #2
 800a4c6:	9305      	str	r3, [sp, #20]
 800a4c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a590 <_svfiprintf_r+0x1f8>
 800a4cc:	7821      	ldrb	r1, [r4, #0]
 800a4ce:	2203      	movs	r2, #3
 800a4d0:	4650      	mov	r0, sl
 800a4d2:	f7f5 fea5 	bl	8000220 <memchr>
 800a4d6:	b138      	cbz	r0, 800a4e8 <_svfiprintf_r+0x150>
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	eba0 000a 	sub.w	r0, r0, sl
 800a4de:	2240      	movs	r2, #64	; 0x40
 800a4e0:	4082      	lsls	r2, r0
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	3401      	adds	r4, #1
 800a4e6:	9304      	str	r3, [sp, #16]
 800a4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ec:	4825      	ldr	r0, [pc, #148]	; (800a584 <_svfiprintf_r+0x1ec>)
 800a4ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4f2:	2206      	movs	r2, #6
 800a4f4:	f7f5 fe94 	bl	8000220 <memchr>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d038      	beq.n	800a56e <_svfiprintf_r+0x1d6>
 800a4fc:	4b22      	ldr	r3, [pc, #136]	; (800a588 <_svfiprintf_r+0x1f0>)
 800a4fe:	bb1b      	cbnz	r3, 800a548 <_svfiprintf_r+0x1b0>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	3307      	adds	r3, #7
 800a504:	f023 0307 	bic.w	r3, r3, #7
 800a508:	3308      	adds	r3, #8
 800a50a:	9303      	str	r3, [sp, #12]
 800a50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50e:	4433      	add	r3, r6
 800a510:	9309      	str	r3, [sp, #36]	; 0x24
 800a512:	e768      	b.n	800a3e6 <_svfiprintf_r+0x4e>
 800a514:	fb0c 3202 	mla	r2, ip, r2, r3
 800a518:	460c      	mov	r4, r1
 800a51a:	2001      	movs	r0, #1
 800a51c:	e7a6      	b.n	800a46c <_svfiprintf_r+0xd4>
 800a51e:	2300      	movs	r3, #0
 800a520:	3401      	adds	r4, #1
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	4619      	mov	r1, r3
 800a526:	f04f 0c0a 	mov.w	ip, #10
 800a52a:	4620      	mov	r0, r4
 800a52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a530:	3a30      	subs	r2, #48	; 0x30
 800a532:	2a09      	cmp	r2, #9
 800a534:	d903      	bls.n	800a53e <_svfiprintf_r+0x1a6>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0c6      	beq.n	800a4c8 <_svfiprintf_r+0x130>
 800a53a:	9105      	str	r1, [sp, #20]
 800a53c:	e7c4      	b.n	800a4c8 <_svfiprintf_r+0x130>
 800a53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a542:	4604      	mov	r4, r0
 800a544:	2301      	movs	r3, #1
 800a546:	e7f0      	b.n	800a52a <_svfiprintf_r+0x192>
 800a548:	ab03      	add	r3, sp, #12
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	462a      	mov	r2, r5
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <_svfiprintf_r+0x1f4>)
 800a550:	a904      	add	r1, sp, #16
 800a552:	4638      	mov	r0, r7
 800a554:	f3af 8000 	nop.w
 800a558:	1c42      	adds	r2, r0, #1
 800a55a:	4606      	mov	r6, r0
 800a55c:	d1d6      	bne.n	800a50c <_svfiprintf_r+0x174>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	065b      	lsls	r3, r3, #25
 800a562:	f53f af2d 	bmi.w	800a3c0 <_svfiprintf_r+0x28>
 800a566:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a568:	b01d      	add	sp, #116	; 0x74
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	ab03      	add	r3, sp, #12
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	462a      	mov	r2, r5
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <_svfiprintf_r+0x1f4>)
 800a576:	a904      	add	r1, sp, #16
 800a578:	4638      	mov	r0, r7
 800a57a:	f000 f9bd 	bl	800a8f8 <_printf_i>
 800a57e:	e7eb      	b.n	800a558 <_svfiprintf_r+0x1c0>
 800a580:	0800d0b0 	.word	0x0800d0b0
 800a584:	0800d0ba 	.word	0x0800d0ba
 800a588:	00000000 	.word	0x00000000
 800a58c:	0800a2e5 	.word	0x0800a2e5
 800a590:	0800d0b6 	.word	0x0800d0b6

0800a594 <__sfputc_r>:
 800a594:	6893      	ldr	r3, [r2, #8]
 800a596:	3b01      	subs	r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	b410      	push	{r4}
 800a59c:	6093      	str	r3, [r2, #8]
 800a59e:	da08      	bge.n	800a5b2 <__sfputc_r+0x1e>
 800a5a0:	6994      	ldr	r4, [r2, #24]
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	db01      	blt.n	800a5aa <__sfputc_r+0x16>
 800a5a6:	290a      	cmp	r1, #10
 800a5a8:	d103      	bne.n	800a5b2 <__sfputc_r+0x1e>
 800a5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ae:	f000 bb73 	b.w	800ac98 <__swbuf_r>
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	1c58      	adds	r0, r3, #1
 800a5b6:	6010      	str	r0, [r2, #0]
 800a5b8:	7019      	strb	r1, [r3, #0]
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <__sfputs_r>:
 800a5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	18d5      	adds	r5, r2, r3
 800a5cc:	42ac      	cmp	r4, r5
 800a5ce:	d101      	bne.n	800a5d4 <__sfputs_r+0x12>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e007      	b.n	800a5e4 <__sfputs_r+0x22>
 800a5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d8:	463a      	mov	r2, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7ff ffda 	bl	800a594 <__sfputc_r>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d1f3      	bne.n	800a5cc <__sfputs_r+0xa>
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5e8 <_vfiprintf_r>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	b09d      	sub	sp, #116	; 0x74
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	4698      	mov	r8, r3
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	b118      	cbz	r0, 800a600 <_vfiprintf_r+0x18>
 800a5f8:	6a03      	ldr	r3, [r0, #32]
 800a5fa:	b90b      	cbnz	r3, 800a600 <_vfiprintf_r+0x18>
 800a5fc:	f7ff fc1e 	bl	8009e3c <__sinit>
 800a600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a602:	07d9      	lsls	r1, r3, #31
 800a604:	d405      	bmi.n	800a612 <_vfiprintf_r+0x2a>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	059a      	lsls	r2, r3, #22
 800a60a:	d402      	bmi.n	800a612 <_vfiprintf_r+0x2a>
 800a60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a60e:	f7ff fd6e 	bl	800a0ee <__retarget_lock_acquire_recursive>
 800a612:	89ab      	ldrh	r3, [r5, #12]
 800a614:	071b      	lsls	r3, r3, #28
 800a616:	d501      	bpl.n	800a61c <_vfiprintf_r+0x34>
 800a618:	692b      	ldr	r3, [r5, #16]
 800a61a:	b99b      	cbnz	r3, 800a644 <_vfiprintf_r+0x5c>
 800a61c:	4629      	mov	r1, r5
 800a61e:	4630      	mov	r0, r6
 800a620:	f000 fb78 	bl	800ad14 <__swsetup_r>
 800a624:	b170      	cbz	r0, 800a644 <_vfiprintf_r+0x5c>
 800a626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a628:	07dc      	lsls	r4, r3, #31
 800a62a:	d504      	bpl.n	800a636 <_vfiprintf_r+0x4e>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a630:	b01d      	add	sp, #116	; 0x74
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	89ab      	ldrh	r3, [r5, #12]
 800a638:	0598      	lsls	r0, r3, #22
 800a63a:	d4f7      	bmi.n	800a62c <_vfiprintf_r+0x44>
 800a63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a63e:	f7ff fd57 	bl	800a0f0 <__retarget_lock_release_recursive>
 800a642:	e7f3      	b.n	800a62c <_vfiprintf_r+0x44>
 800a644:	2300      	movs	r3, #0
 800a646:	9309      	str	r3, [sp, #36]	; 0x24
 800a648:	2320      	movs	r3, #32
 800a64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a64e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a652:	2330      	movs	r3, #48	; 0x30
 800a654:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a808 <_vfiprintf_r+0x220>
 800a658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a65c:	f04f 0901 	mov.w	r9, #1
 800a660:	4623      	mov	r3, r4
 800a662:	469a      	mov	sl, r3
 800a664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a668:	b10a      	cbz	r2, 800a66e <_vfiprintf_r+0x86>
 800a66a:	2a25      	cmp	r2, #37	; 0x25
 800a66c:	d1f9      	bne.n	800a662 <_vfiprintf_r+0x7a>
 800a66e:	ebba 0b04 	subs.w	fp, sl, r4
 800a672:	d00b      	beq.n	800a68c <_vfiprintf_r+0xa4>
 800a674:	465b      	mov	r3, fp
 800a676:	4622      	mov	r2, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ffa1 	bl	800a5c2 <__sfputs_r>
 800a680:	3001      	adds	r0, #1
 800a682:	f000 80a9 	beq.w	800a7d8 <_vfiprintf_r+0x1f0>
 800a686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a688:	445a      	add	r2, fp
 800a68a:	9209      	str	r2, [sp, #36]	; 0x24
 800a68c:	f89a 3000 	ldrb.w	r3, [sl]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 80a1 	beq.w	800a7d8 <_vfiprintf_r+0x1f0>
 800a696:	2300      	movs	r3, #0
 800a698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6a0:	f10a 0a01 	add.w	sl, sl, #1
 800a6a4:	9304      	str	r3, [sp, #16]
 800a6a6:	9307      	str	r3, [sp, #28]
 800a6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ae:	4654      	mov	r4, sl
 800a6b0:	2205      	movs	r2, #5
 800a6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b6:	4854      	ldr	r0, [pc, #336]	; (800a808 <_vfiprintf_r+0x220>)
 800a6b8:	f7f5 fdb2 	bl	8000220 <memchr>
 800a6bc:	9a04      	ldr	r2, [sp, #16]
 800a6be:	b9d8      	cbnz	r0, 800a6f8 <_vfiprintf_r+0x110>
 800a6c0:	06d1      	lsls	r1, r2, #27
 800a6c2:	bf44      	itt	mi
 800a6c4:	2320      	movmi	r3, #32
 800a6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ca:	0713      	lsls	r3, r2, #28
 800a6cc:	bf44      	itt	mi
 800a6ce:	232b      	movmi	r3, #43	; 0x2b
 800a6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6da:	d015      	beq.n	800a708 <_vfiprintf_r+0x120>
 800a6dc:	9a07      	ldr	r2, [sp, #28]
 800a6de:	4654      	mov	r4, sl
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f04f 0c0a 	mov.w	ip, #10
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ec:	3b30      	subs	r3, #48	; 0x30
 800a6ee:	2b09      	cmp	r3, #9
 800a6f0:	d94d      	bls.n	800a78e <_vfiprintf_r+0x1a6>
 800a6f2:	b1b0      	cbz	r0, 800a722 <_vfiprintf_r+0x13a>
 800a6f4:	9207      	str	r2, [sp, #28]
 800a6f6:	e014      	b.n	800a722 <_vfiprintf_r+0x13a>
 800a6f8:	eba0 0308 	sub.w	r3, r0, r8
 800a6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a700:	4313      	orrs	r3, r2
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	46a2      	mov	sl, r4
 800a706:	e7d2      	b.n	800a6ae <_vfiprintf_r+0xc6>
 800a708:	9b03      	ldr	r3, [sp, #12]
 800a70a:	1d19      	adds	r1, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	9103      	str	r1, [sp, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfbb      	ittet	lt
 800a714:	425b      	neglt	r3, r3
 800a716:	f042 0202 	orrlt.w	r2, r2, #2
 800a71a:	9307      	strge	r3, [sp, #28]
 800a71c:	9307      	strlt	r3, [sp, #28]
 800a71e:	bfb8      	it	lt
 800a720:	9204      	strlt	r2, [sp, #16]
 800a722:	7823      	ldrb	r3, [r4, #0]
 800a724:	2b2e      	cmp	r3, #46	; 0x2e
 800a726:	d10c      	bne.n	800a742 <_vfiprintf_r+0x15a>
 800a728:	7863      	ldrb	r3, [r4, #1]
 800a72a:	2b2a      	cmp	r3, #42	; 0x2a
 800a72c:	d134      	bne.n	800a798 <_vfiprintf_r+0x1b0>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	1d1a      	adds	r2, r3, #4
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	9203      	str	r2, [sp, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfb8      	it	lt
 800a73a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a73e:	3402      	adds	r4, #2
 800a740:	9305      	str	r3, [sp, #20]
 800a742:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a818 <_vfiprintf_r+0x230>
 800a746:	7821      	ldrb	r1, [r4, #0]
 800a748:	2203      	movs	r2, #3
 800a74a:	4650      	mov	r0, sl
 800a74c:	f7f5 fd68 	bl	8000220 <memchr>
 800a750:	b138      	cbz	r0, 800a762 <_vfiprintf_r+0x17a>
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	eba0 000a 	sub.w	r0, r0, sl
 800a758:	2240      	movs	r2, #64	; 0x40
 800a75a:	4082      	lsls	r2, r0
 800a75c:	4313      	orrs	r3, r2
 800a75e:	3401      	adds	r4, #1
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	4829      	ldr	r0, [pc, #164]	; (800a80c <_vfiprintf_r+0x224>)
 800a768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a76c:	2206      	movs	r2, #6
 800a76e:	f7f5 fd57 	bl	8000220 <memchr>
 800a772:	2800      	cmp	r0, #0
 800a774:	d03f      	beq.n	800a7f6 <_vfiprintf_r+0x20e>
 800a776:	4b26      	ldr	r3, [pc, #152]	; (800a810 <_vfiprintf_r+0x228>)
 800a778:	bb1b      	cbnz	r3, 800a7c2 <_vfiprintf_r+0x1da>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	3307      	adds	r3, #7
 800a77e:	f023 0307 	bic.w	r3, r3, #7
 800a782:	3308      	adds	r3, #8
 800a784:	9303      	str	r3, [sp, #12]
 800a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a788:	443b      	add	r3, r7
 800a78a:	9309      	str	r3, [sp, #36]	; 0x24
 800a78c:	e768      	b.n	800a660 <_vfiprintf_r+0x78>
 800a78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a792:	460c      	mov	r4, r1
 800a794:	2001      	movs	r0, #1
 800a796:	e7a6      	b.n	800a6e6 <_vfiprintf_r+0xfe>
 800a798:	2300      	movs	r3, #0
 800a79a:	3401      	adds	r4, #1
 800a79c:	9305      	str	r3, [sp, #20]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7aa:	3a30      	subs	r2, #48	; 0x30
 800a7ac:	2a09      	cmp	r2, #9
 800a7ae:	d903      	bls.n	800a7b8 <_vfiprintf_r+0x1d0>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0c6      	beq.n	800a742 <_vfiprintf_r+0x15a>
 800a7b4:	9105      	str	r1, [sp, #20]
 800a7b6:	e7c4      	b.n	800a742 <_vfiprintf_r+0x15a>
 800a7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7bc:	4604      	mov	r4, r0
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e7f0      	b.n	800a7a4 <_vfiprintf_r+0x1bc>
 800a7c2:	ab03      	add	r3, sp, #12
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	462a      	mov	r2, r5
 800a7c8:	4b12      	ldr	r3, [pc, #72]	; (800a814 <_vfiprintf_r+0x22c>)
 800a7ca:	a904      	add	r1, sp, #16
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f3af 8000 	nop.w
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	1c78      	adds	r0, r7, #1
 800a7d6:	d1d6      	bne.n	800a786 <_vfiprintf_r+0x19e>
 800a7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7da:	07d9      	lsls	r1, r3, #31
 800a7dc:	d405      	bmi.n	800a7ea <_vfiprintf_r+0x202>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	059a      	lsls	r2, r3, #22
 800a7e2:	d402      	bmi.n	800a7ea <_vfiprintf_r+0x202>
 800a7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e6:	f7ff fc83 	bl	800a0f0 <__retarget_lock_release_recursive>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	065b      	lsls	r3, r3, #25
 800a7ee:	f53f af1d 	bmi.w	800a62c <_vfiprintf_r+0x44>
 800a7f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7f4:	e71c      	b.n	800a630 <_vfiprintf_r+0x48>
 800a7f6:	ab03      	add	r3, sp, #12
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <_vfiprintf_r+0x22c>)
 800a7fe:	a904      	add	r1, sp, #16
 800a800:	4630      	mov	r0, r6
 800a802:	f000 f879 	bl	800a8f8 <_printf_i>
 800a806:	e7e4      	b.n	800a7d2 <_vfiprintf_r+0x1ea>
 800a808:	0800d0b0 	.word	0x0800d0b0
 800a80c:	0800d0ba 	.word	0x0800d0ba
 800a810:	00000000 	.word	0x00000000
 800a814:	0800a5c3 	.word	0x0800a5c3
 800a818:	0800d0b6 	.word	0x0800d0b6

0800a81c <_printf_common>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	4616      	mov	r6, r2
 800a822:	4699      	mov	r9, r3
 800a824:	688a      	ldr	r2, [r1, #8]
 800a826:	690b      	ldr	r3, [r1, #16]
 800a828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	bfb8      	it	lt
 800a830:	4613      	movlt	r3, r2
 800a832:	6033      	str	r3, [r6, #0]
 800a834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a838:	4607      	mov	r7, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	b10a      	cbz	r2, 800a842 <_printf_common+0x26>
 800a83e:	3301      	adds	r3, #1
 800a840:	6033      	str	r3, [r6, #0]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	0699      	lsls	r1, r3, #26
 800a846:	bf42      	ittt	mi
 800a848:	6833      	ldrmi	r3, [r6, #0]
 800a84a:	3302      	addmi	r3, #2
 800a84c:	6033      	strmi	r3, [r6, #0]
 800a84e:	6825      	ldr	r5, [r4, #0]
 800a850:	f015 0506 	ands.w	r5, r5, #6
 800a854:	d106      	bne.n	800a864 <_printf_common+0x48>
 800a856:	f104 0a19 	add.w	sl, r4, #25
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	6832      	ldr	r2, [r6, #0]
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	42ab      	cmp	r3, r5
 800a862:	dc26      	bgt.n	800a8b2 <_printf_common+0x96>
 800a864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a868:	1e13      	subs	r3, r2, #0
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	bf18      	it	ne
 800a86e:	2301      	movne	r3, #1
 800a870:	0692      	lsls	r2, r2, #26
 800a872:	d42b      	bmi.n	800a8cc <_printf_common+0xb0>
 800a874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a878:	4649      	mov	r1, r9
 800a87a:	4638      	mov	r0, r7
 800a87c:	47c0      	blx	r8
 800a87e:	3001      	adds	r0, #1
 800a880:	d01e      	beq.n	800a8c0 <_printf_common+0xa4>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	6922      	ldr	r2, [r4, #16]
 800a886:	f003 0306 	and.w	r3, r3, #6
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	bf02      	ittt	eq
 800a88e:	68e5      	ldreq	r5, [r4, #12]
 800a890:	6833      	ldreq	r3, [r6, #0]
 800a892:	1aed      	subeq	r5, r5, r3
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	bf0c      	ite	eq
 800a898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a89c:	2500      	movne	r5, #0
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	bfc4      	itt	gt
 800a8a2:	1a9b      	subgt	r3, r3, r2
 800a8a4:	18ed      	addgt	r5, r5, r3
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	341a      	adds	r4, #26
 800a8aa:	42b5      	cmp	r5, r6
 800a8ac:	d11a      	bne.n	800a8e4 <_printf_common+0xc8>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e008      	b.n	800a8c4 <_printf_common+0xa8>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	47c0      	blx	r8
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d103      	bne.n	800a8c8 <_printf_common+0xac>
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	e7c6      	b.n	800a85a <_printf_common+0x3e>
 800a8cc:	18e1      	adds	r1, r4, r3
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	2030      	movs	r0, #48	; 0x30
 800a8d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8d6:	4422      	add	r2, r4
 800a8d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	e7c7      	b.n	800a874 <_printf_common+0x58>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	47c0      	blx	r8
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	d0e6      	beq.n	800a8c0 <_printf_common+0xa4>
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	e7d9      	b.n	800a8aa <_printf_common+0x8e>
	...

0800a8f8 <_printf_i>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	7e0f      	ldrb	r7, [r1, #24]
 800a8fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a900:	2f78      	cmp	r7, #120	; 0x78
 800a902:	4691      	mov	r9, r2
 800a904:	4680      	mov	r8, r0
 800a906:	460c      	mov	r4, r1
 800a908:	469a      	mov	sl, r3
 800a90a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a90e:	d807      	bhi.n	800a920 <_printf_i+0x28>
 800a910:	2f62      	cmp	r7, #98	; 0x62
 800a912:	d80a      	bhi.n	800a92a <_printf_i+0x32>
 800a914:	2f00      	cmp	r7, #0
 800a916:	f000 80d4 	beq.w	800aac2 <_printf_i+0x1ca>
 800a91a:	2f58      	cmp	r7, #88	; 0x58
 800a91c:	f000 80c0 	beq.w	800aaa0 <_printf_i+0x1a8>
 800a920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a928:	e03a      	b.n	800a9a0 <_printf_i+0xa8>
 800a92a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a92e:	2b15      	cmp	r3, #21
 800a930:	d8f6      	bhi.n	800a920 <_printf_i+0x28>
 800a932:	a101      	add	r1, pc, #4	; (adr r1, 800a938 <_printf_i+0x40>)
 800a934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a938:	0800a991 	.word	0x0800a991
 800a93c:	0800a9a5 	.word	0x0800a9a5
 800a940:	0800a921 	.word	0x0800a921
 800a944:	0800a921 	.word	0x0800a921
 800a948:	0800a921 	.word	0x0800a921
 800a94c:	0800a921 	.word	0x0800a921
 800a950:	0800a9a5 	.word	0x0800a9a5
 800a954:	0800a921 	.word	0x0800a921
 800a958:	0800a921 	.word	0x0800a921
 800a95c:	0800a921 	.word	0x0800a921
 800a960:	0800a921 	.word	0x0800a921
 800a964:	0800aaa9 	.word	0x0800aaa9
 800a968:	0800a9d1 	.word	0x0800a9d1
 800a96c:	0800aa63 	.word	0x0800aa63
 800a970:	0800a921 	.word	0x0800a921
 800a974:	0800a921 	.word	0x0800a921
 800a978:	0800aacb 	.word	0x0800aacb
 800a97c:	0800a921 	.word	0x0800a921
 800a980:	0800a9d1 	.word	0x0800a9d1
 800a984:	0800a921 	.word	0x0800a921
 800a988:	0800a921 	.word	0x0800a921
 800a98c:	0800aa6b 	.word	0x0800aa6b
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	1d1a      	adds	r2, r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	602a      	str	r2, [r5, #0]
 800a998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a99c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e09f      	b.n	800aae4 <_printf_i+0x1ec>
 800a9a4:	6820      	ldr	r0, [r4, #0]
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	0607      	lsls	r7, r0, #24
 800a9aa:	f103 0104 	add.w	r1, r3, #4
 800a9ae:	6029      	str	r1, [r5, #0]
 800a9b0:	d501      	bpl.n	800a9b6 <_printf_i+0xbe>
 800a9b2:	681e      	ldr	r6, [r3, #0]
 800a9b4:	e003      	b.n	800a9be <_printf_i+0xc6>
 800a9b6:	0646      	lsls	r6, r0, #25
 800a9b8:	d5fb      	bpl.n	800a9b2 <_printf_i+0xba>
 800a9ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	da03      	bge.n	800a9ca <_printf_i+0xd2>
 800a9c2:	232d      	movs	r3, #45	; 0x2d
 800a9c4:	4276      	negs	r6, r6
 800a9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ca:	485a      	ldr	r0, [pc, #360]	; (800ab34 <_printf_i+0x23c>)
 800a9cc:	230a      	movs	r3, #10
 800a9ce:	e012      	b.n	800a9f6 <_printf_i+0xfe>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	1d19      	adds	r1, r3, #4
 800a9d6:	6029      	str	r1, [r5, #0]
 800a9d8:	0605      	lsls	r5, r0, #24
 800a9da:	d501      	bpl.n	800a9e0 <_printf_i+0xe8>
 800a9dc:	681e      	ldr	r6, [r3, #0]
 800a9de:	e002      	b.n	800a9e6 <_printf_i+0xee>
 800a9e0:	0641      	lsls	r1, r0, #25
 800a9e2:	d5fb      	bpl.n	800a9dc <_printf_i+0xe4>
 800a9e4:	881e      	ldrh	r6, [r3, #0]
 800a9e6:	4853      	ldr	r0, [pc, #332]	; (800ab34 <_printf_i+0x23c>)
 800a9e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ea:	bf0c      	ite	eq
 800a9ec:	2308      	moveq	r3, #8
 800a9ee:	230a      	movne	r3, #10
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9f6:	6865      	ldr	r5, [r4, #4]
 800a9f8:	60a5      	str	r5, [r4, #8]
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	bfa2      	ittt	ge
 800a9fe:	6821      	ldrge	r1, [r4, #0]
 800aa00:	f021 0104 	bicge.w	r1, r1, #4
 800aa04:	6021      	strge	r1, [r4, #0]
 800aa06:	b90e      	cbnz	r6, 800aa0c <_printf_i+0x114>
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	d04b      	beq.n	800aaa4 <_printf_i+0x1ac>
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa12:	fb03 6711 	mls	r7, r3, r1, r6
 800aa16:	5dc7      	ldrb	r7, [r0, r7]
 800aa18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa1c:	4637      	mov	r7, r6
 800aa1e:	42bb      	cmp	r3, r7
 800aa20:	460e      	mov	r6, r1
 800aa22:	d9f4      	bls.n	800aa0e <_printf_i+0x116>
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d10b      	bne.n	800aa40 <_printf_i+0x148>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	07de      	lsls	r6, r3, #31
 800aa2c:	d508      	bpl.n	800aa40 <_printf_i+0x148>
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	4299      	cmp	r1, r3
 800aa34:	bfde      	ittt	le
 800aa36:	2330      	movle	r3, #48	; 0x30
 800aa38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa40:	1b52      	subs	r2, r2, r5
 800aa42:	6122      	str	r2, [r4, #16]
 800aa44:	f8cd a000 	str.w	sl, [sp]
 800aa48:	464b      	mov	r3, r9
 800aa4a:	aa03      	add	r2, sp, #12
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4640      	mov	r0, r8
 800aa50:	f7ff fee4 	bl	800a81c <_printf_common>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d14a      	bne.n	800aaee <_printf_i+0x1f6>
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa5c:	b004      	add	sp, #16
 800aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	f043 0320 	orr.w	r3, r3, #32
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	4833      	ldr	r0, [pc, #204]	; (800ab38 <_printf_i+0x240>)
 800aa6c:	2778      	movs	r7, #120	; 0x78
 800aa6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	6829      	ldr	r1, [r5, #0]
 800aa76:	061f      	lsls	r7, r3, #24
 800aa78:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa7c:	d402      	bmi.n	800aa84 <_printf_i+0x18c>
 800aa7e:	065f      	lsls	r7, r3, #25
 800aa80:	bf48      	it	mi
 800aa82:	b2b6      	uxthmi	r6, r6
 800aa84:	07df      	lsls	r7, r3, #31
 800aa86:	bf48      	it	mi
 800aa88:	f043 0320 	orrmi.w	r3, r3, #32
 800aa8c:	6029      	str	r1, [r5, #0]
 800aa8e:	bf48      	it	mi
 800aa90:	6023      	strmi	r3, [r4, #0]
 800aa92:	b91e      	cbnz	r6, 800aa9c <_printf_i+0x1a4>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	f023 0320 	bic.w	r3, r3, #32
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	e7a7      	b.n	800a9f0 <_printf_i+0xf8>
 800aaa0:	4824      	ldr	r0, [pc, #144]	; (800ab34 <_printf_i+0x23c>)
 800aaa2:	e7e4      	b.n	800aa6e <_printf_i+0x176>
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	e7bd      	b.n	800aa24 <_printf_i+0x12c>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	6826      	ldr	r6, [r4, #0]
 800aaac:	6961      	ldr	r1, [r4, #20]
 800aaae:	1d18      	adds	r0, r3, #4
 800aab0:	6028      	str	r0, [r5, #0]
 800aab2:	0635      	lsls	r5, r6, #24
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	d501      	bpl.n	800aabc <_printf_i+0x1c4>
 800aab8:	6019      	str	r1, [r3, #0]
 800aaba:	e002      	b.n	800aac2 <_printf_i+0x1ca>
 800aabc:	0670      	lsls	r0, r6, #25
 800aabe:	d5fb      	bpl.n	800aab8 <_printf_i+0x1c0>
 800aac0:	8019      	strh	r1, [r3, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	4615      	mov	r5, r2
 800aac8:	e7bc      	b.n	800aa44 <_printf_i+0x14c>
 800aaca:	682b      	ldr	r3, [r5, #0]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	602a      	str	r2, [r5, #0]
 800aad0:	681d      	ldr	r5, [r3, #0]
 800aad2:	6862      	ldr	r2, [r4, #4]
 800aad4:	2100      	movs	r1, #0
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7f5 fba2 	bl	8000220 <memchr>
 800aadc:	b108      	cbz	r0, 800aae2 <_printf_i+0x1ea>
 800aade:	1b40      	subs	r0, r0, r5
 800aae0:	6060      	str	r0, [r4, #4]
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	2300      	movs	r3, #0
 800aae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaec:	e7aa      	b.n	800aa44 <_printf_i+0x14c>
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	47d0      	blx	sl
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d0ad      	beq.n	800aa58 <_printf_i+0x160>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	079b      	lsls	r3, r3, #30
 800ab00:	d413      	bmi.n	800ab2a <_printf_i+0x232>
 800ab02:	68e0      	ldr	r0, [r4, #12]
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	4298      	cmp	r0, r3
 800ab08:	bfb8      	it	lt
 800ab0a:	4618      	movlt	r0, r3
 800ab0c:	e7a6      	b.n	800aa5c <_printf_i+0x164>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4632      	mov	r2, r6
 800ab12:	4649      	mov	r1, r9
 800ab14:	4640      	mov	r0, r8
 800ab16:	47d0      	blx	sl
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d09d      	beq.n	800aa58 <_printf_i+0x160>
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	9903      	ldr	r1, [sp, #12]
 800ab22:	1a5b      	subs	r3, r3, r1
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dcf2      	bgt.n	800ab0e <_printf_i+0x216>
 800ab28:	e7eb      	b.n	800ab02 <_printf_i+0x20a>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	f104 0619 	add.w	r6, r4, #25
 800ab30:	e7f5      	b.n	800ab1e <_printf_i+0x226>
 800ab32:	bf00      	nop
 800ab34:	0800d0c1 	.word	0x0800d0c1
 800ab38:	0800d0d2 	.word	0x0800d0d2

0800ab3c <__sflush_r>:
 800ab3c:	898a      	ldrh	r2, [r1, #12]
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	4605      	mov	r5, r0
 800ab44:	0710      	lsls	r0, r2, #28
 800ab46:	460c      	mov	r4, r1
 800ab48:	d458      	bmi.n	800abfc <__sflush_r+0xc0>
 800ab4a:	684b      	ldr	r3, [r1, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dc05      	bgt.n	800ab5c <__sflush_r+0x20>
 800ab50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc02      	bgt.n	800ab5c <__sflush_r+0x20>
 800ab56:	2000      	movs	r0, #0
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d0f9      	beq.n	800ab56 <__sflush_r+0x1a>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab68:	682f      	ldr	r7, [r5, #0]
 800ab6a:	6a21      	ldr	r1, [r4, #32]
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	d032      	beq.n	800abd6 <__sflush_r+0x9a>
 800ab70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	075a      	lsls	r2, r3, #29
 800ab76:	d505      	bpl.n	800ab84 <__sflush_r+0x48>
 800ab78:	6863      	ldr	r3, [r4, #4]
 800ab7a:	1ac0      	subs	r0, r0, r3
 800ab7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab7e:	b10b      	cbz	r3, 800ab84 <__sflush_r+0x48>
 800ab80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab82:	1ac0      	subs	r0, r0, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	4602      	mov	r2, r0
 800ab88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8a:	6a21      	ldr	r1, [r4, #32]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b0      	blx	r6
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	d106      	bne.n	800aba4 <__sflush_r+0x68>
 800ab96:	6829      	ldr	r1, [r5, #0]
 800ab98:	291d      	cmp	r1, #29
 800ab9a:	d82b      	bhi.n	800abf4 <__sflush_r+0xb8>
 800ab9c:	4a29      	ldr	r2, [pc, #164]	; (800ac44 <__sflush_r+0x108>)
 800ab9e:	410a      	asrs	r2, r1
 800aba0:	07d6      	lsls	r6, r2, #31
 800aba2:	d427      	bmi.n	800abf4 <__sflush_r+0xb8>
 800aba4:	2200      	movs	r2, #0
 800aba6:	6062      	str	r2, [r4, #4]
 800aba8:	04d9      	lsls	r1, r3, #19
 800abaa:	6922      	ldr	r2, [r4, #16]
 800abac:	6022      	str	r2, [r4, #0]
 800abae:	d504      	bpl.n	800abba <__sflush_r+0x7e>
 800abb0:	1c42      	adds	r2, r0, #1
 800abb2:	d101      	bne.n	800abb8 <__sflush_r+0x7c>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b903      	cbnz	r3, 800abba <__sflush_r+0x7e>
 800abb8:	6560      	str	r0, [r4, #84]	; 0x54
 800abba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abbc:	602f      	str	r7, [r5, #0]
 800abbe:	2900      	cmp	r1, #0
 800abc0:	d0c9      	beq.n	800ab56 <__sflush_r+0x1a>
 800abc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc6:	4299      	cmp	r1, r3
 800abc8:	d002      	beq.n	800abd0 <__sflush_r+0x94>
 800abca:	4628      	mov	r0, r5
 800abcc:	f7ff fa92 	bl	800a0f4 <_free_r>
 800abd0:	2000      	movs	r0, #0
 800abd2:	6360      	str	r0, [r4, #52]	; 0x34
 800abd4:	e7c0      	b.n	800ab58 <__sflush_r+0x1c>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4628      	mov	r0, r5
 800abda:	47b0      	blx	r6
 800abdc:	1c41      	adds	r1, r0, #1
 800abde:	d1c8      	bne.n	800ab72 <__sflush_r+0x36>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0c5      	beq.n	800ab72 <__sflush_r+0x36>
 800abe6:	2b1d      	cmp	r3, #29
 800abe8:	d001      	beq.n	800abee <__sflush_r+0xb2>
 800abea:	2b16      	cmp	r3, #22
 800abec:	d101      	bne.n	800abf2 <__sflush_r+0xb6>
 800abee:	602f      	str	r7, [r5, #0]
 800abf0:	e7b1      	b.n	800ab56 <__sflush_r+0x1a>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	e7ad      	b.n	800ab58 <__sflush_r+0x1c>
 800abfc:	690f      	ldr	r7, [r1, #16]
 800abfe:	2f00      	cmp	r7, #0
 800ac00:	d0a9      	beq.n	800ab56 <__sflush_r+0x1a>
 800ac02:	0793      	lsls	r3, r2, #30
 800ac04:	680e      	ldr	r6, [r1, #0]
 800ac06:	bf08      	it	eq
 800ac08:	694b      	ldreq	r3, [r1, #20]
 800ac0a:	600f      	str	r7, [r1, #0]
 800ac0c:	bf18      	it	ne
 800ac0e:	2300      	movne	r3, #0
 800ac10:	eba6 0807 	sub.w	r8, r6, r7
 800ac14:	608b      	str	r3, [r1, #8]
 800ac16:	f1b8 0f00 	cmp.w	r8, #0
 800ac1a:	dd9c      	ble.n	800ab56 <__sflush_r+0x1a>
 800ac1c:	6a21      	ldr	r1, [r4, #32]
 800ac1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac20:	4643      	mov	r3, r8
 800ac22:	463a      	mov	r2, r7
 800ac24:	4628      	mov	r0, r5
 800ac26:	47b0      	blx	r6
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	dc06      	bgt.n	800ac3a <__sflush_r+0xfe>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac38:	e78e      	b.n	800ab58 <__sflush_r+0x1c>
 800ac3a:	4407      	add	r7, r0
 800ac3c:	eba8 0800 	sub.w	r8, r8, r0
 800ac40:	e7e9      	b.n	800ac16 <__sflush_r+0xda>
 800ac42:	bf00      	nop
 800ac44:	dfbffffe 	.word	0xdfbffffe

0800ac48 <_fflush_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	690b      	ldr	r3, [r1, #16]
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	b913      	cbnz	r3, 800ac58 <_fflush_r+0x10>
 800ac52:	2500      	movs	r5, #0
 800ac54:	4628      	mov	r0, r5
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	b118      	cbz	r0, 800ac62 <_fflush_r+0x1a>
 800ac5a:	6a03      	ldr	r3, [r0, #32]
 800ac5c:	b90b      	cbnz	r3, 800ac62 <_fflush_r+0x1a>
 800ac5e:	f7ff f8ed 	bl	8009e3c <__sinit>
 800ac62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f3      	beq.n	800ac52 <_fflush_r+0xa>
 800ac6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac6c:	07d0      	lsls	r0, r2, #31
 800ac6e:	d404      	bmi.n	800ac7a <_fflush_r+0x32>
 800ac70:	0599      	lsls	r1, r3, #22
 800ac72:	d402      	bmi.n	800ac7a <_fflush_r+0x32>
 800ac74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac76:	f7ff fa3a 	bl	800a0ee <__retarget_lock_acquire_recursive>
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	f7ff ff5d 	bl	800ab3c <__sflush_r>
 800ac82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac84:	07da      	lsls	r2, r3, #31
 800ac86:	4605      	mov	r5, r0
 800ac88:	d4e4      	bmi.n	800ac54 <_fflush_r+0xc>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	059b      	lsls	r3, r3, #22
 800ac8e:	d4e1      	bmi.n	800ac54 <_fflush_r+0xc>
 800ac90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac92:	f7ff fa2d 	bl	800a0f0 <__retarget_lock_release_recursive>
 800ac96:	e7dd      	b.n	800ac54 <_fflush_r+0xc>

0800ac98 <__swbuf_r>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	460e      	mov	r6, r1
 800ac9c:	4614      	mov	r4, r2
 800ac9e:	4605      	mov	r5, r0
 800aca0:	b118      	cbz	r0, 800acaa <__swbuf_r+0x12>
 800aca2:	6a03      	ldr	r3, [r0, #32]
 800aca4:	b90b      	cbnz	r3, 800acaa <__swbuf_r+0x12>
 800aca6:	f7ff f8c9 	bl	8009e3c <__sinit>
 800acaa:	69a3      	ldr	r3, [r4, #24]
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	071a      	lsls	r2, r3, #28
 800acb2:	d525      	bpl.n	800ad00 <__swbuf_r+0x68>
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	b31b      	cbz	r3, 800ad00 <__swbuf_r+0x68>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	6922      	ldr	r2, [r4, #16]
 800acbc:	1a98      	subs	r0, r3, r2
 800acbe:	6963      	ldr	r3, [r4, #20]
 800acc0:	b2f6      	uxtb	r6, r6
 800acc2:	4283      	cmp	r3, r0
 800acc4:	4637      	mov	r7, r6
 800acc6:	dc04      	bgt.n	800acd2 <__swbuf_r+0x3a>
 800acc8:	4621      	mov	r1, r4
 800acca:	4628      	mov	r0, r5
 800accc:	f7ff ffbc 	bl	800ac48 <_fflush_r>
 800acd0:	b9e0      	cbnz	r0, 800ad0c <__swbuf_r+0x74>
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	6022      	str	r2, [r4, #0]
 800acde:	701e      	strb	r6, [r3, #0]
 800ace0:	6962      	ldr	r2, [r4, #20]
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d004      	beq.n	800acf2 <__swbuf_r+0x5a>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	07db      	lsls	r3, r3, #31
 800acec:	d506      	bpl.n	800acfc <__swbuf_r+0x64>
 800acee:	2e0a      	cmp	r6, #10
 800acf0:	d104      	bne.n	800acfc <__swbuf_r+0x64>
 800acf2:	4621      	mov	r1, r4
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7ff ffa7 	bl	800ac48 <_fflush_r>
 800acfa:	b938      	cbnz	r0, 800ad0c <__swbuf_r+0x74>
 800acfc:	4638      	mov	r0, r7
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad00:	4621      	mov	r1, r4
 800ad02:	4628      	mov	r0, r5
 800ad04:	f000 f806 	bl	800ad14 <__swsetup_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0d5      	beq.n	800acb8 <__swbuf_r+0x20>
 800ad0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ad10:	e7f4      	b.n	800acfc <__swbuf_r+0x64>
	...

0800ad14 <__swsetup_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4b2a      	ldr	r3, [pc, #168]	; (800adc0 <__swsetup_r+0xac>)
 800ad18:	4605      	mov	r5, r0
 800ad1a:	6818      	ldr	r0, [r3, #0]
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	b118      	cbz	r0, 800ad28 <__swsetup_r+0x14>
 800ad20:	6a03      	ldr	r3, [r0, #32]
 800ad22:	b90b      	cbnz	r3, 800ad28 <__swsetup_r+0x14>
 800ad24:	f7ff f88a 	bl	8009e3c <__sinit>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad2e:	0718      	lsls	r0, r3, #28
 800ad30:	d422      	bmi.n	800ad78 <__swsetup_r+0x64>
 800ad32:	06d9      	lsls	r1, r3, #27
 800ad34:	d407      	bmi.n	800ad46 <__swsetup_r+0x32>
 800ad36:	2309      	movs	r3, #9
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad44:	e034      	b.n	800adb0 <__swsetup_r+0x9c>
 800ad46:	0758      	lsls	r0, r3, #29
 800ad48:	d512      	bpl.n	800ad70 <__swsetup_r+0x5c>
 800ad4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad4c:	b141      	cbz	r1, 800ad60 <__swsetup_r+0x4c>
 800ad4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad52:	4299      	cmp	r1, r3
 800ad54:	d002      	beq.n	800ad5c <__swsetup_r+0x48>
 800ad56:	4628      	mov	r0, r5
 800ad58:	f7ff f9cc 	bl	800a0f4 <_free_r>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6363      	str	r3, [r4, #52]	; 0x34
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6063      	str	r3, [r4, #4]
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	f043 0308 	orr.w	r3, r3, #8
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	b94b      	cbnz	r3, 800ad90 <__swsetup_r+0x7c>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad86:	d003      	beq.n	800ad90 <__swsetup_r+0x7c>
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 f8a7 	bl	800aede <__smakebuf_r>
 800ad90:	89a0      	ldrh	r0, [r4, #12]
 800ad92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad96:	f010 0301 	ands.w	r3, r0, #1
 800ad9a:	d00a      	beq.n	800adb2 <__swsetup_r+0x9e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60a3      	str	r3, [r4, #8]
 800ada0:	6963      	ldr	r3, [r4, #20]
 800ada2:	425b      	negs	r3, r3
 800ada4:	61a3      	str	r3, [r4, #24]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	b943      	cbnz	r3, 800adbc <__swsetup_r+0xa8>
 800adaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adae:	d1c4      	bne.n	800ad3a <__swsetup_r+0x26>
 800adb0:	bd38      	pop	{r3, r4, r5, pc}
 800adb2:	0781      	lsls	r1, r0, #30
 800adb4:	bf58      	it	pl
 800adb6:	6963      	ldrpl	r3, [r4, #20]
 800adb8:	60a3      	str	r3, [r4, #8]
 800adba:	e7f4      	b.n	800ada6 <__swsetup_r+0x92>
 800adbc:	2000      	movs	r0, #0
 800adbe:	e7f7      	b.n	800adb0 <__swsetup_r+0x9c>
 800adc0:	20000074 	.word	0x20000074

0800adc4 <memmove>:
 800adc4:	4288      	cmp	r0, r1
 800adc6:	b510      	push	{r4, lr}
 800adc8:	eb01 0402 	add.w	r4, r1, r2
 800adcc:	d902      	bls.n	800add4 <memmove+0x10>
 800adce:	4284      	cmp	r4, r0
 800add0:	4623      	mov	r3, r4
 800add2:	d807      	bhi.n	800ade4 <memmove+0x20>
 800add4:	1e43      	subs	r3, r0, #1
 800add6:	42a1      	cmp	r1, r4
 800add8:	d008      	beq.n	800adec <memmove+0x28>
 800adda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ade2:	e7f8      	b.n	800add6 <memmove+0x12>
 800ade4:	4402      	add	r2, r0
 800ade6:	4601      	mov	r1, r0
 800ade8:	428a      	cmp	r2, r1
 800adea:	d100      	bne.n	800adee <memmove+0x2a>
 800adec:	bd10      	pop	{r4, pc}
 800adee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adf6:	e7f7      	b.n	800ade8 <memmove+0x24>

0800adf8 <_sbrk_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	; (800ae14 <_sbrk_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f7 fafc 	bl	8002400 <_sbrk>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_sbrk_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_sbrk_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	2000101c 	.word	0x2000101c

0800ae18 <memcpy>:
 800ae18:	440a      	add	r2, r1
 800ae1a:	4291      	cmp	r1, r2
 800ae1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae20:	d100      	bne.n	800ae24 <memcpy+0xc>
 800ae22:	4770      	bx	lr
 800ae24:	b510      	push	{r4, lr}
 800ae26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	d1f9      	bne.n	800ae26 <memcpy+0xe>
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <_realloc_r>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4680      	mov	r8, r0
 800ae3a:	4614      	mov	r4, r2
 800ae3c:	460e      	mov	r6, r1
 800ae3e:	b921      	cbnz	r1, 800ae4a <_realloc_r+0x16>
 800ae40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	4611      	mov	r1, r2
 800ae46:	f7ff b9c1 	b.w	800a1cc <_malloc_r>
 800ae4a:	b92a      	cbnz	r2, 800ae58 <_realloc_r+0x24>
 800ae4c:	f7ff f952 	bl	800a0f4 <_free_r>
 800ae50:	4625      	mov	r5, r4
 800ae52:	4628      	mov	r0, r5
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	f000 f8a0 	bl	800af9c <_malloc_usable_size_r>
 800ae5c:	4284      	cmp	r4, r0
 800ae5e:	4607      	mov	r7, r0
 800ae60:	d802      	bhi.n	800ae68 <_realloc_r+0x34>
 800ae62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae66:	d812      	bhi.n	800ae8e <_realloc_r+0x5a>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f7ff f9ae 	bl	800a1cc <_malloc_r>
 800ae70:	4605      	mov	r5, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0ed      	beq.n	800ae52 <_realloc_r+0x1e>
 800ae76:	42bc      	cmp	r4, r7
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	bf28      	it	cs
 800ae7e:	463a      	movcs	r2, r7
 800ae80:	f7ff ffca 	bl	800ae18 <memcpy>
 800ae84:	4631      	mov	r1, r6
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff f934 	bl	800a0f4 <_free_r>
 800ae8c:	e7e1      	b.n	800ae52 <_realloc_r+0x1e>
 800ae8e:	4635      	mov	r5, r6
 800ae90:	e7df      	b.n	800ae52 <_realloc_r+0x1e>

0800ae92 <__swhatbuf_r>:
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	b096      	sub	sp, #88	; 0x58
 800ae9e:	4615      	mov	r5, r2
 800aea0:	461e      	mov	r6, r3
 800aea2:	da0d      	bge.n	800aec0 <__swhatbuf_r+0x2e>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aeaa:	f04f 0100 	mov.w	r1, #0
 800aeae:	bf0c      	ite	eq
 800aeb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aeb4:	2340      	movne	r3, #64	; 0x40
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	6031      	str	r1, [r6, #0]
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	b016      	add	sp, #88	; 0x58
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	466a      	mov	r2, sp
 800aec2:	f000 f849 	bl	800af58 <_fstat_r>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	dbec      	blt.n	800aea4 <__swhatbuf_r+0x12>
 800aeca:	9901      	ldr	r1, [sp, #4]
 800aecc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aed0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aed4:	4259      	negs	r1, r3
 800aed6:	4159      	adcs	r1, r3
 800aed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aedc:	e7eb      	b.n	800aeb6 <__swhatbuf_r+0x24>

0800aede <__smakebuf_r>:
 800aede:	898b      	ldrh	r3, [r1, #12]
 800aee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee2:	079d      	lsls	r5, r3, #30
 800aee4:	4606      	mov	r6, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	d507      	bpl.n	800aefa <__smakebuf_r+0x1c>
 800aeea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	2301      	movs	r3, #1
 800aef4:	6163      	str	r3, [r4, #20]
 800aef6:	b002      	add	sp, #8
 800aef8:	bd70      	pop	{r4, r5, r6, pc}
 800aefa:	ab01      	add	r3, sp, #4
 800aefc:	466a      	mov	r2, sp
 800aefe:	f7ff ffc8 	bl	800ae92 <__swhatbuf_r>
 800af02:	9900      	ldr	r1, [sp, #0]
 800af04:	4605      	mov	r5, r0
 800af06:	4630      	mov	r0, r6
 800af08:	f7ff f960 	bl	800a1cc <_malloc_r>
 800af0c:	b948      	cbnz	r0, 800af22 <__smakebuf_r+0x44>
 800af0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af12:	059a      	lsls	r2, r3, #22
 800af14:	d4ef      	bmi.n	800aef6 <__smakebuf_r+0x18>
 800af16:	f023 0303 	bic.w	r3, r3, #3
 800af1a:	f043 0302 	orr.w	r3, r3, #2
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	e7e3      	b.n	800aeea <__smakebuf_r+0xc>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	6020      	str	r0, [r4, #0]
 800af26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	6163      	str	r3, [r4, #20]
 800af30:	9b01      	ldr	r3, [sp, #4]
 800af32:	6120      	str	r0, [r4, #16]
 800af34:	b15b      	cbz	r3, 800af4e <__smakebuf_r+0x70>
 800af36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3a:	4630      	mov	r0, r6
 800af3c:	f000 f81e 	bl	800af7c <_isatty_r>
 800af40:	b128      	cbz	r0, 800af4e <__smakebuf_r+0x70>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0303 	bic.w	r3, r3, #3
 800af48:	f043 0301 	orr.w	r3, r3, #1
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	431d      	orrs	r5, r3
 800af52:	81a5      	strh	r5, [r4, #12]
 800af54:	e7cf      	b.n	800aef6 <__smakebuf_r+0x18>
	...

0800af58 <_fstat_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	; (800af78 <_fstat_r+0x20>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	4611      	mov	r1, r2
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	f7f7 fa23 	bl	80023b0 <_fstat>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	d102      	bne.n	800af74 <_fstat_r+0x1c>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b103      	cbz	r3, 800af74 <_fstat_r+0x1c>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd38      	pop	{r3, r4, r5, pc}
 800af76:	bf00      	nop
 800af78:	2000101c 	.word	0x2000101c

0800af7c <_isatty_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d06      	ldr	r5, [pc, #24]	; (800af98 <_isatty_r+0x1c>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f7 fa22 	bl	80023d0 <_isatty>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_isatty_r+0x1a>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_isatty_r+0x1a>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	2000101c 	.word	0x2000101c

0800af9c <_malloc_usable_size_r>:
 800af9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa0:	1f18      	subs	r0, r3, #4
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bfbc      	itt	lt
 800afa6:	580b      	ldrlt	r3, [r1, r0]
 800afa8:	18c0      	addlt	r0, r0, r3
 800afaa:	4770      	bx	lr

0800afac <_init>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr

0800afb8 <_fini>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr
